
smart_watch_v_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec0  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec4  08004ec4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004ec4  08004ec4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ec4  08004ec4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ec8  08004ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  20000078  08004f44  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  08004f44  0002061c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb89  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e9e  00000000  00000000  0002ec2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  00030ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb0  00000000  00000000  00031850  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018414  00000000  00000000  00032500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad74  00000000  00000000  0004a914  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b7da  00000000  00000000  00055688  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0e62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bac  00000000  00000000  000e0ee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fec 	.word	0x08003fec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003fec 	.word	0x08003fec

0800014c <menu_ac>:




void menu_ac(uint8_t menu, uint8_t secili)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	switch(menu)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	2b05      	cmp	r3, #5
 8000160:	d828      	bhi.n	80001b4 <menu_ac+0x68>
 8000162:	a201      	add	r2, pc, #4	; (adr r2, 8000168 <menu_ac+0x1c>)
 8000164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000168:	08000181 	.word	0x08000181
 800016c:	0800018b 	.word	0x0800018b
 8000170:	08000195 	.word	0x08000195
 8000174:	0800019f 	.word	0x0800019f
 8000178:	080001a9 	.word	0x080001a9
 800017c:	080001af 	.word	0x080001af
	{
		case ANA_SAYFA:
			anasayfa_ac(secili);
 8000180:	79bb      	ldrb	r3, [r7, #6]
 8000182:	4618      	mov	r0, r3
 8000184:	f000 f91c 	bl	80003c0 <anasayfa_ac>
			break;
 8000188:	e015      	b.n	80001b6 <menu_ac+0x6a>
		case NABIZ:
			nabiz_menu_ac(secili);
 800018a:	79bb      	ldrb	r3, [r7, #6]
 800018c:	4618      	mov	r0, r3
 800018e:	f000 f8ef 	bl	8000370 <nabiz_menu_ac>
			break;
 8000192:	e010      	b.n	80001b6 <menu_ac+0x6a>
		case ADIM:
			adim_menu_ac(secili);
 8000194:	79bb      	ldrb	r3, [r7, #6]
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f8c2 	bl	8000320 <adim_menu_ac>
			break;
 800019c:	e00b      	b.n	80001b6 <menu_ac+0x6a>
		case TELEFON:
			telefon_menu_ac(secili);
 800019e:	79bb      	ldrb	r3, [r7, #6]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 f831 	bl	8000208 <telefon_menu_ac>
			break;
 80001a6:	e006      	b.n	80001b6 <menu_ac+0x6a>
		case SICAKLIK:
			sicaklik_menu_ac();
 80001a8:	f000 f80a 	bl	80001c0 <sicaklik_menu_ac>
			break;
 80001ac:	e003      	b.n	80001b6 <menu_ac+0x6a>
		case SAAT:
			saat_goster();
 80001ae:	f000 fa07 	bl	80005c0 <saat_goster>
			break;
 80001b2:	e000      	b.n	80001b6 <menu_ac+0x6a>
		default:
			break;
 80001b4:	bf00      	nop
	}
}
 80001b6:	bf00      	nop
 80001b8:	3708      	adds	r7, #8
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop

080001c0 <sicaklik_menu_ac>:

void sicaklik_menu_ac()
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80001c4:	2000      	movs	r0, #0
 80001c6:	f000 fd8b 	bl	8000ce0 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 80001ca:	2100      	movs	r1, #0
 80001cc:	2002      	movs	r0, #2
 80001ce:	f000 fedd 	bl	8000f8c <ssd1306_SetCursor>
	ssd1306_WriteString("Sicaklik: 30", Font_11x18, White);
 80001d2:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <sicaklik_menu_ac+0x3c>)
 80001d4:	2301      	movs	r3, #1
 80001d6:	ca06      	ldmia	r2, {r1, r2}
 80001d8:	4809      	ldr	r0, [pc, #36]	; (8000200 <sicaklik_menu_ac+0x40>)
 80001da:	f000 feb1 	bl	8000f40 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 19);
 80001de:	2113      	movs	r1, #19
 80001e0:	2002      	movs	r0, #2
 80001e2:	f000 fed3 	bl	8000f8c <ssd1306_SetCursor>
	ssd1306_WriteString("->Geri don", Font_11x18, White);
 80001e6:	4a05      	ldr	r2, [pc, #20]	; (80001fc <sicaklik_menu_ac+0x3c>)
 80001e8:	2301      	movs	r3, #1
 80001ea:	ca06      	ldmia	r2, {r1, r2}
 80001ec:	4805      	ldr	r0, [pc, #20]	; (8000204 <sicaklik_menu_ac+0x44>)
 80001ee:	f000 fea7 	bl	8000f40 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80001f2:	f000 fd97 	bl	8000d24 <ssd1306_UpdateScreen>
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000000 	.word	0x20000000
 8000200:	08004004 	.word	0x08004004
 8000204:	08004014 	.word	0x08004014

08000208 <telefon_menu_ac>:

void telefon_menu_ac(uint8_t secili)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
	switch(secili)
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	2b02      	cmp	r3, #2
 8000216:	d028      	beq.n	800026a <telefon_menu_ac+0x62>
 8000218:	2b03      	cmp	r3, #3
 800021a:	d04a      	beq.n	80002b2 <telefon_menu_ac+0xaa>
 800021c:	2b01      	cmp	r3, #1
 800021e:	d000      	beq.n	8000222 <telefon_menu_ac+0x1a>
		ssd1306_WriteString("->Geri Don", Font_11x18, White);
		ssd1306_UpdateScreen();
		break;
	}

}
 8000220:	e06b      	b.n	80002fa <telefon_menu_ac+0xf2>
		ssd1306_Fill(Black);
 8000222:	2000      	movs	r0, #0
 8000224:	f000 fd5c 	bl	8000ce0 <ssd1306_Fill>
		ssd1306_SetCursor(2, 0);
 8000228:	2100      	movs	r1, #0
 800022a:	2002      	movs	r0, #2
 800022c:	f000 feae 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("->Tlf Bagla", Font_11x18, White);
 8000230:	4a34      	ldr	r2, [pc, #208]	; (8000304 <telefon_menu_ac+0xfc>)
 8000232:	2301      	movs	r3, #1
 8000234:	ca06      	ldmia	r2, {r1, r2}
 8000236:	4834      	ldr	r0, [pc, #208]	; (8000308 <telefon_menu_ac+0x100>)
 8000238:	f000 fe82 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 800023c:	2113      	movs	r1, #19
 800023e:	2002      	movs	r0, #2
 8000240:	f000 fea4 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Tlf Bag.Kes", Font_11x18, White);
 8000244:	4a2f      	ldr	r2, [pc, #188]	; (8000304 <telefon_menu_ac+0xfc>)
 8000246:	2301      	movs	r3, #1
 8000248:	ca06      	ldmia	r2, {r1, r2}
 800024a:	4830      	ldr	r0, [pc, #192]	; (800030c <telefon_menu_ac+0x104>)
 800024c:	f000 fe78 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 8000250:	2126      	movs	r1, #38	; 0x26
 8000252:	2002      	movs	r0, #2
 8000254:	f000 fe9a 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Geri Don", Font_11x18, White);
 8000258:	4a2a      	ldr	r2, [pc, #168]	; (8000304 <telefon_menu_ac+0xfc>)
 800025a:	2301      	movs	r3, #1
 800025c:	ca06      	ldmia	r2, {r1, r2}
 800025e:	482c      	ldr	r0, [pc, #176]	; (8000310 <telefon_menu_ac+0x108>)
 8000260:	f000 fe6e 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000264:	f000 fd5e 	bl	8000d24 <ssd1306_UpdateScreen>
		break;
 8000268:	e047      	b.n	80002fa <telefon_menu_ac+0xf2>
		ssd1306_Fill(Black);
 800026a:	2000      	movs	r0, #0
 800026c:	f000 fd38 	bl	8000ce0 <ssd1306_Fill>
		ssd1306_SetCursor(2, 0);
 8000270:	2100      	movs	r1, #0
 8000272:	2002      	movs	r0, #2
 8000274:	f000 fe8a 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Tlf Bagla", Font_11x18, White);
 8000278:	4a22      	ldr	r2, [pc, #136]	; (8000304 <telefon_menu_ac+0xfc>)
 800027a:	2301      	movs	r3, #1
 800027c:	ca06      	ldmia	r2, {r1, r2}
 800027e:	4825      	ldr	r0, [pc, #148]	; (8000314 <telefon_menu_ac+0x10c>)
 8000280:	f000 fe5e 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 8000284:	2113      	movs	r1, #19
 8000286:	2002      	movs	r0, #2
 8000288:	f000 fe80 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("->Tlf Bag.Kes", Font_11x18, White);
 800028c:	4a1d      	ldr	r2, [pc, #116]	; (8000304 <telefon_menu_ac+0xfc>)
 800028e:	2301      	movs	r3, #1
 8000290:	ca06      	ldmia	r2, {r1, r2}
 8000292:	4821      	ldr	r0, [pc, #132]	; (8000318 <telefon_menu_ac+0x110>)
 8000294:	f000 fe54 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 8000298:	2126      	movs	r1, #38	; 0x26
 800029a:	2002      	movs	r0, #2
 800029c:	f000 fe76 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Geri Don", Font_11x18, White);
 80002a0:	4a18      	ldr	r2, [pc, #96]	; (8000304 <telefon_menu_ac+0xfc>)
 80002a2:	2301      	movs	r3, #1
 80002a4:	ca06      	ldmia	r2, {r1, r2}
 80002a6:	481a      	ldr	r0, [pc, #104]	; (8000310 <telefon_menu_ac+0x108>)
 80002a8:	f000 fe4a 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80002ac:	f000 fd3a 	bl	8000d24 <ssd1306_UpdateScreen>
		break;
 80002b0:	e023      	b.n	80002fa <telefon_menu_ac+0xf2>
		ssd1306_Fill(Black);
 80002b2:	2000      	movs	r0, #0
 80002b4:	f000 fd14 	bl	8000ce0 <ssd1306_Fill>
		ssd1306_SetCursor(2, 0);
 80002b8:	2100      	movs	r1, #0
 80002ba:	2002      	movs	r0, #2
 80002bc:	f000 fe66 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Tlf Bagla", Font_11x18, White);
 80002c0:	4a10      	ldr	r2, [pc, #64]	; (8000304 <telefon_menu_ac+0xfc>)
 80002c2:	2301      	movs	r3, #1
 80002c4:	ca06      	ldmia	r2, {r1, r2}
 80002c6:	4813      	ldr	r0, [pc, #76]	; (8000314 <telefon_menu_ac+0x10c>)
 80002c8:	f000 fe3a 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 80002cc:	2113      	movs	r1, #19
 80002ce:	2002      	movs	r0, #2
 80002d0:	f000 fe5c 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Tlf Bag.Kes", Font_11x18, White);
 80002d4:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <telefon_menu_ac+0xfc>)
 80002d6:	2301      	movs	r3, #1
 80002d8:	ca06      	ldmia	r2, {r1, r2}
 80002da:	480c      	ldr	r0, [pc, #48]	; (800030c <telefon_menu_ac+0x104>)
 80002dc:	f000 fe30 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 80002e0:	2126      	movs	r1, #38	; 0x26
 80002e2:	2002      	movs	r0, #2
 80002e4:	f000 fe52 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("->Geri Don", Font_11x18, White);
 80002e8:	4a06      	ldr	r2, [pc, #24]	; (8000304 <telefon_menu_ac+0xfc>)
 80002ea:	2301      	movs	r3, #1
 80002ec:	ca06      	ldmia	r2, {r1, r2}
 80002ee:	480b      	ldr	r0, [pc, #44]	; (800031c <telefon_menu_ac+0x114>)
 80002f0:	f000 fe26 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80002f4:	f000 fd16 	bl	8000d24 <ssd1306_UpdateScreen>
		break;
 80002f8:	bf00      	nop
}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	20000000 	.word	0x20000000
 8000308:	08004020 	.word	0x08004020
 800030c:	0800402c 	.word	0x0800402c
 8000310:	08004038 	.word	0x08004038
 8000314:	08004044 	.word	0x08004044
 8000318:	08004050 	.word	0x08004050
 800031c:	08004060 	.word	0x08004060

08000320 <adim_menu_ac>:

void adim_menu_ac(uint8_t secili)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
	ssd1306_Fill(Black);
 800032a:	2000      	movs	r0, #0
 800032c:	f000 fcd8 	bl	8000ce0 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 8000330:	2100      	movs	r1, #0
 8000332:	2002      	movs	r0, #2
 8000334:	f000 fe2a 	bl	8000f8c <ssd1306_SetCursor>
	ssd1306_WriteString("Adim Sayisi: 90", Font_11x18, White);
 8000338:	4a0a      	ldr	r2, [pc, #40]	; (8000364 <adim_menu_ac+0x44>)
 800033a:	2301      	movs	r3, #1
 800033c:	ca06      	ldmia	r2, {r1, r2}
 800033e:	480a      	ldr	r0, [pc, #40]	; (8000368 <adim_menu_ac+0x48>)
 8000340:	f000 fdfe 	bl	8000f40 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 19);
 8000344:	2113      	movs	r1, #19
 8000346:	2002      	movs	r0, #2
 8000348:	f000 fe20 	bl	8000f8c <ssd1306_SetCursor>
	ssd1306_WriteString("->Geri don", Font_11x18, White);
 800034c:	4a05      	ldr	r2, [pc, #20]	; (8000364 <adim_menu_ac+0x44>)
 800034e:	2301      	movs	r3, #1
 8000350:	ca06      	ldmia	r2, {r1, r2}
 8000352:	4806      	ldr	r0, [pc, #24]	; (800036c <adim_menu_ac+0x4c>)
 8000354:	f000 fdf4 	bl	8000f40 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000358:	f000 fce4 	bl	8000d24 <ssd1306_UpdateScreen>
}
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000000 	.word	0x20000000
 8000368:	0800406c 	.word	0x0800406c
 800036c:	08004014 	.word	0x08004014

08000370 <nabiz_menu_ac>:

void nabiz_menu_ac(uint8_t secili)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
	ssd1306_Fill(Black);
 800037a:	2000      	movs	r0, #0
 800037c:	f000 fcb0 	bl	8000ce0 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 8000380:	2100      	movs	r1, #0
 8000382:	2002      	movs	r0, #2
 8000384:	f000 fe02 	bl	8000f8c <ssd1306_SetCursor>
	ssd1306_WriteString("Nabiz : 90", Font_11x18, White);
 8000388:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <nabiz_menu_ac+0x44>)
 800038a:	2301      	movs	r3, #1
 800038c:	ca06      	ldmia	r2, {r1, r2}
 800038e:	480a      	ldr	r0, [pc, #40]	; (80003b8 <nabiz_menu_ac+0x48>)
 8000390:	f000 fdd6 	bl	8000f40 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 19);
 8000394:	2113      	movs	r1, #19
 8000396:	2002      	movs	r0, #2
 8000398:	f000 fdf8 	bl	8000f8c <ssd1306_SetCursor>
	ssd1306_WriteString("->Geri don", Font_11x18, White);
 800039c:	4a05      	ldr	r2, [pc, #20]	; (80003b4 <nabiz_menu_ac+0x44>)
 800039e:	2301      	movs	r3, #1
 80003a0:	ca06      	ldmia	r2, {r1, r2}
 80003a2:	4806      	ldr	r0, [pc, #24]	; (80003bc <nabiz_menu_ac+0x4c>)
 80003a4:	f000 fdcc 	bl	8000f40 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80003a8:	f000 fcbc 	bl	8000d24 <ssd1306_UpdateScreen>
}
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000000 	.word	0x20000000
 80003b8:	0800407c 	.word	0x0800407c
 80003bc:	08004014 	.word	0x08004014

080003c0 <anasayfa_ac>:

void anasayfa_ac(uint8_t secili)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
	ssd1306_Fill(Black);
 80003ca:	2000      	movs	r0, #0
 80003cc:	f000 fc88 	bl	8000ce0 <ssd1306_Fill>
	switch(secili)
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	2b05      	cmp	r3, #5
 80003d6:	f200 80d5 	bhi.w	8000584 <anasayfa_ac+0x1c4>
 80003da:	a201      	add	r2, pc, #4	; (adr r2, 80003e0 <anasayfa_ac+0x20>)
 80003dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e0:	080003f9 	.word	0x080003f9
 80003e4:	0800043b 	.word	0x0800043b
 80003e8:	0800047d 	.word	0x0800047d
 80003ec:	080004bf 	.word	0x080004bf
 80003f0:	08000501 	.word	0x08000501
 80003f4:	08000543 	.word	0x08000543
	{
	case 1:
		ssd1306_SetCursor(2, 0);
 80003f8:	2100      	movs	r1, #0
 80003fa:	2002      	movs	r0, #2
 80003fc:	f000 fdc6 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("->Nabiz", Font_11x18, White);
 8000400:	4a63      	ldr	r2, [pc, #396]	; (8000590 <anasayfa_ac+0x1d0>)
 8000402:	2301      	movs	r3, #1
 8000404:	ca06      	ldmia	r2, {r1, r2}
 8000406:	4863      	ldr	r0, [pc, #396]	; (8000594 <anasayfa_ac+0x1d4>)
 8000408:	f000 fd9a 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 800040c:	2113      	movs	r1, #19
 800040e:	2002      	movs	r0, #2
 8000410:	f000 fdbc 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Adim", Font_11x18, White);
 8000414:	4a5e      	ldr	r2, [pc, #376]	; (8000590 <anasayfa_ac+0x1d0>)
 8000416:	2301      	movs	r3, #1
 8000418:	ca06      	ldmia	r2, {r1, r2}
 800041a:	485f      	ldr	r0, [pc, #380]	; (8000598 <anasayfa_ac+0x1d8>)
 800041c:	f000 fd90 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 8000420:	2126      	movs	r1, #38	; 0x26
 8000422:	2002      	movs	r0, #2
 8000424:	f000 fdb2 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 8000428:	4a59      	ldr	r2, [pc, #356]	; (8000590 <anasayfa_ac+0x1d0>)
 800042a:	2301      	movs	r3, #1
 800042c:	ca06      	ldmia	r2, {r1, r2}
 800042e:	485b      	ldr	r0, [pc, #364]	; (800059c <anasayfa_ac+0x1dc>)
 8000430:	f000 fd86 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000434:	f000 fc76 	bl	8000d24 <ssd1306_UpdateScreen>
		break;
 8000438:	e0a5      	b.n	8000586 <anasayfa_ac+0x1c6>
	case 2:
		ssd1306_SetCursor(2, 0);
 800043a:	2100      	movs	r1, #0
 800043c:	2002      	movs	r0, #2
 800043e:	f000 fda5 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Nabiz", Font_11x18, White);
 8000442:	4a53      	ldr	r2, [pc, #332]	; (8000590 <anasayfa_ac+0x1d0>)
 8000444:	2301      	movs	r3, #1
 8000446:	ca06      	ldmia	r2, {r1, r2}
 8000448:	4855      	ldr	r0, [pc, #340]	; (80005a0 <anasayfa_ac+0x1e0>)
 800044a:	f000 fd79 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 800044e:	2113      	movs	r1, #19
 8000450:	2002      	movs	r0, #2
 8000452:	f000 fd9b 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("->Adim", Font_11x18, White);
 8000456:	4a4e      	ldr	r2, [pc, #312]	; (8000590 <anasayfa_ac+0x1d0>)
 8000458:	2301      	movs	r3, #1
 800045a:	ca06      	ldmia	r2, {r1, r2}
 800045c:	4851      	ldr	r0, [pc, #324]	; (80005a4 <anasayfa_ac+0x1e4>)
 800045e:	f000 fd6f 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 8000462:	2126      	movs	r1, #38	; 0x26
 8000464:	2002      	movs	r0, #2
 8000466:	f000 fd91 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 800046a:	4a49      	ldr	r2, [pc, #292]	; (8000590 <anasayfa_ac+0x1d0>)
 800046c:	2301      	movs	r3, #1
 800046e:	ca06      	ldmia	r2, {r1, r2}
 8000470:	484a      	ldr	r0, [pc, #296]	; (800059c <anasayfa_ac+0x1dc>)
 8000472:	f000 fd65 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000476:	f000 fc55 	bl	8000d24 <ssd1306_UpdateScreen>
		break;
 800047a:	e084      	b.n	8000586 <anasayfa_ac+0x1c6>
	case 3:
		ssd1306_SetCursor(2, 0);
 800047c:	2100      	movs	r1, #0
 800047e:	2002      	movs	r0, #2
 8000480:	f000 fd84 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Nabiz", Font_11x18, White);
 8000484:	4a42      	ldr	r2, [pc, #264]	; (8000590 <anasayfa_ac+0x1d0>)
 8000486:	2301      	movs	r3, #1
 8000488:	ca06      	ldmia	r2, {r1, r2}
 800048a:	4845      	ldr	r0, [pc, #276]	; (80005a0 <anasayfa_ac+0x1e0>)
 800048c:	f000 fd58 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 8000490:	2113      	movs	r1, #19
 8000492:	2002      	movs	r0, #2
 8000494:	f000 fd7a 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Adim", Font_11x18, White);
 8000498:	4a3d      	ldr	r2, [pc, #244]	; (8000590 <anasayfa_ac+0x1d0>)
 800049a:	2301      	movs	r3, #1
 800049c:	ca06      	ldmia	r2, {r1, r2}
 800049e:	483e      	ldr	r0, [pc, #248]	; (8000598 <anasayfa_ac+0x1d8>)
 80004a0:	f000 fd4e 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 80004a4:	2126      	movs	r1, #38	; 0x26
 80004a6:	2002      	movs	r0, #2
 80004a8:	f000 fd70 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("->Telefon", Font_11x18, White);
 80004ac:	4a38      	ldr	r2, [pc, #224]	; (8000590 <anasayfa_ac+0x1d0>)
 80004ae:	2301      	movs	r3, #1
 80004b0:	ca06      	ldmia	r2, {r1, r2}
 80004b2:	483d      	ldr	r0, [pc, #244]	; (80005a8 <anasayfa_ac+0x1e8>)
 80004b4:	f000 fd44 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80004b8:	f000 fc34 	bl	8000d24 <ssd1306_UpdateScreen>
		break;
 80004bc:	e063      	b.n	8000586 <anasayfa_ac+0x1c6>
	case 4:
		ssd1306_SetCursor(2, 0);
 80004be:	2100      	movs	r1, #0
 80004c0:	2002      	movs	r0, #2
 80004c2:	f000 fd63 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Adim", Font_11x18, White);
 80004c6:	4a32      	ldr	r2, [pc, #200]	; (8000590 <anasayfa_ac+0x1d0>)
 80004c8:	2301      	movs	r3, #1
 80004ca:	ca06      	ldmia	r2, {r1, r2}
 80004cc:	4832      	ldr	r0, [pc, #200]	; (8000598 <anasayfa_ac+0x1d8>)
 80004ce:	f000 fd37 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 80004d2:	2113      	movs	r1, #19
 80004d4:	2002      	movs	r0, #2
 80004d6:	f000 fd59 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 80004da:	4a2d      	ldr	r2, [pc, #180]	; (8000590 <anasayfa_ac+0x1d0>)
 80004dc:	2301      	movs	r3, #1
 80004de:	ca06      	ldmia	r2, {r1, r2}
 80004e0:	482e      	ldr	r0, [pc, #184]	; (800059c <anasayfa_ac+0x1dc>)
 80004e2:	f000 fd2d 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 80004e6:	2126      	movs	r1, #38	; 0x26
 80004e8:	2002      	movs	r0, #2
 80004ea:	f000 fd4f 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("->Sicaklik", Font_11x18, White);
 80004ee:	4a28      	ldr	r2, [pc, #160]	; (8000590 <anasayfa_ac+0x1d0>)
 80004f0:	2301      	movs	r3, #1
 80004f2:	ca06      	ldmia	r2, {r1, r2}
 80004f4:	482d      	ldr	r0, [pc, #180]	; (80005ac <anasayfa_ac+0x1ec>)
 80004f6:	f000 fd23 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80004fa:	f000 fc13 	bl	8000d24 <ssd1306_UpdateScreen>
		break;
 80004fe:	e042      	b.n	8000586 <anasayfa_ac+0x1c6>
	case 5:
		ssd1306_SetCursor(2, 0);
 8000500:	2100      	movs	r1, #0
 8000502:	2002      	movs	r0, #2
 8000504:	f000 fd42 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 8000508:	4a21      	ldr	r2, [pc, #132]	; (8000590 <anasayfa_ac+0x1d0>)
 800050a:	2301      	movs	r3, #1
 800050c:	ca06      	ldmia	r2, {r1, r2}
 800050e:	4823      	ldr	r0, [pc, #140]	; (800059c <anasayfa_ac+0x1dc>)
 8000510:	f000 fd16 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 8000514:	2113      	movs	r1, #19
 8000516:	2002      	movs	r0, #2
 8000518:	f000 fd38 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Sicaklik", Font_11x18, White);
 800051c:	4a1c      	ldr	r2, [pc, #112]	; (8000590 <anasayfa_ac+0x1d0>)
 800051e:	2301      	movs	r3, #1
 8000520:	ca06      	ldmia	r2, {r1, r2}
 8000522:	4823      	ldr	r0, [pc, #140]	; (80005b0 <anasayfa_ac+0x1f0>)
 8000524:	f000 fd0c 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 8000528:	2126      	movs	r1, #38	; 0x26
 800052a:	2002      	movs	r0, #2
 800052c:	f000 fd2e 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("->Saat Yuzu", Font_11x18, White);
 8000530:	4a17      	ldr	r2, [pc, #92]	; (8000590 <anasayfa_ac+0x1d0>)
 8000532:	2301      	movs	r3, #1
 8000534:	ca06      	ldmia	r2, {r1, r2}
 8000536:	481f      	ldr	r0, [pc, #124]	; (80005b4 <anasayfa_ac+0x1f4>)
 8000538:	f000 fd02 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800053c:	f000 fbf2 	bl	8000d24 <ssd1306_UpdateScreen>
		break;
 8000540:	e021      	b.n	8000586 <anasayfa_ac+0x1c6>
	case 6:
		ssd1306_SetCursor(2, 0);
 8000542:	2100      	movs	r1, #0
 8000544:	2002      	movs	r0, #2
 8000546:	f000 fd21 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Sicaklik", Font_11x18, White);
 800054a:	4a11      	ldr	r2, [pc, #68]	; (8000590 <anasayfa_ac+0x1d0>)
 800054c:	2301      	movs	r3, #1
 800054e:	ca06      	ldmia	r2, {r1, r2}
 8000550:	4817      	ldr	r0, [pc, #92]	; (80005b0 <anasayfa_ac+0x1f0>)
 8000552:	f000 fcf5 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 8000556:	2113      	movs	r1, #19
 8000558:	2002      	movs	r0, #2
 800055a:	f000 fd17 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("Saat Yuzu", Font_11x18, White);
 800055e:	4a0c      	ldr	r2, [pc, #48]	; (8000590 <anasayfa_ac+0x1d0>)
 8000560:	2301      	movs	r3, #1
 8000562:	ca06      	ldmia	r2, {r1, r2}
 8000564:	4814      	ldr	r0, [pc, #80]	; (80005b8 <anasayfa_ac+0x1f8>)
 8000566:	f000 fceb 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 800056a:	2126      	movs	r1, #38	; 0x26
 800056c:	2002      	movs	r0, #2
 800056e:	f000 fd0d 	bl	8000f8c <ssd1306_SetCursor>
		ssd1306_WriteString("->Saat Ayarla", Font_11x18, White);
 8000572:	4a07      	ldr	r2, [pc, #28]	; (8000590 <anasayfa_ac+0x1d0>)
 8000574:	2301      	movs	r3, #1
 8000576:	ca06      	ldmia	r2, {r1, r2}
 8000578:	4810      	ldr	r0, [pc, #64]	; (80005bc <anasayfa_ac+0x1fc>)
 800057a:	f000 fce1 	bl	8000f40 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800057e:	f000 fbd1 	bl	8000d24 <ssd1306_UpdateScreen>
		break;
 8000582:	e000      	b.n	8000586 <anasayfa_ac+0x1c6>
	default:
		break;
 8000584:	bf00      	nop
	}

}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000000 	.word	0x20000000
 8000594:	08004088 	.word	0x08004088
 8000598:	08004090 	.word	0x08004090
 800059c:	08004098 	.word	0x08004098
 80005a0:	080040a0 	.word	0x080040a0
 80005a4:	080040a8 	.word	0x080040a8
 80005a8:	080040b0 	.word	0x080040b0
 80005ac:	080040bc 	.word	0x080040bc
 80005b0:	080040c8 	.word	0x080040c8
 80005b4:	080040d4 	.word	0x080040d4
 80005b8:	080040e0 	.word	0x080040e0
 80005bc:	080040ec 	.word	0x080040ec

080005c0 <saat_goster>:


void saat_goster()
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

	zaman.saat = 21;
 80005c4:	4b23      	ldr	r3, [pc, #140]	; (8000654 <saat_goster+0x94>)
 80005c6:	2215      	movs	r2, #21
 80005c8:	711a      	strb	r2, [r3, #4]
	zaman.dakika = 45;
 80005ca:	4b22      	ldr	r3, [pc, #136]	; (8000654 <saat_goster+0x94>)
 80005cc:	222d      	movs	r2, #45	; 0x2d
 80005ce:	715a      	strb	r2, [r3, #5]
	zaman.saniye = 5;
 80005d0:	4b20      	ldr	r3, [pc, #128]	; (8000654 <saat_goster+0x94>)
 80005d2:	2205      	movs	r2, #5
 80005d4:	719a      	strb	r2, [r3, #6]
	sprintf(saat, "%02d", zaman.saat);
 80005d6:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <saat_goster+0x94>)
 80005d8:	791b      	ldrb	r3, [r3, #4]
 80005da:	461a      	mov	r2, r3
 80005dc:	491e      	ldr	r1, [pc, #120]	; (8000658 <saat_goster+0x98>)
 80005de:	481f      	ldr	r0, [pc, #124]	; (800065c <saat_goster+0x9c>)
 80005e0:	f003 f916 	bl	8003810 <siprintf>
	sprintf(dakika, "%02d", zaman.dakika);
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <saat_goster+0x94>)
 80005e6:	795b      	ldrb	r3, [r3, #5]
 80005e8:	461a      	mov	r2, r3
 80005ea:	491b      	ldr	r1, [pc, #108]	; (8000658 <saat_goster+0x98>)
 80005ec:	481c      	ldr	r0, [pc, #112]	; (8000660 <saat_goster+0xa0>)
 80005ee:	f003 f90f 	bl	8003810 <siprintf>
	sprintf(saniye, "%02d", zaman.saniye);
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <saat_goster+0x94>)
 80005f4:	799b      	ldrb	r3, [r3, #6]
 80005f6:	461a      	mov	r2, r3
 80005f8:	4917      	ldr	r1, [pc, #92]	; (8000658 <saat_goster+0x98>)
 80005fa:	481a      	ldr	r0, [pc, #104]	; (8000664 <saat_goster+0xa4>)
 80005fc:	f003 f908 	bl	8003810 <siprintf>

	ssd1306_Fill(Black);
 8000600:	2000      	movs	r0, #0
 8000602:	f000 fb6d 	bl	8000ce0 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 8000606:	2100      	movs	r1, #0
 8000608:	2002      	movs	r0, #2
 800060a:	f000 fcbf 	bl	8000f8c <ssd1306_SetCursor>
	ssd1306_WriteString(saat, Font_11x18, White);
 800060e:	4a16      	ldr	r2, [pc, #88]	; (8000668 <saat_goster+0xa8>)
 8000610:	2301      	movs	r3, #1
 8000612:	ca06      	ldmia	r2, {r1, r2}
 8000614:	4811      	ldr	r0, [pc, #68]	; (800065c <saat_goster+0x9c>)
 8000616:	f000 fc93 	bl	8000f40 <ssd1306_WriteString>
	ssd1306_WriteString(".", Font_11x18, White);
 800061a:	4a13      	ldr	r2, [pc, #76]	; (8000668 <saat_goster+0xa8>)
 800061c:	2301      	movs	r3, #1
 800061e:	ca06      	ldmia	r2, {r1, r2}
 8000620:	4812      	ldr	r0, [pc, #72]	; (800066c <saat_goster+0xac>)
 8000622:	f000 fc8d 	bl	8000f40 <ssd1306_WriteString>
	ssd1306_WriteString(dakika, Font_11x18, White);
 8000626:	4a10      	ldr	r2, [pc, #64]	; (8000668 <saat_goster+0xa8>)
 8000628:	2301      	movs	r3, #1
 800062a:	ca06      	ldmia	r2, {r1, r2}
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <saat_goster+0xa0>)
 800062e:	f000 fc87 	bl	8000f40 <ssd1306_WriteString>
	ssd1306_WriteString(".", Font_11x18, White);
 8000632:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <saat_goster+0xa8>)
 8000634:	2301      	movs	r3, #1
 8000636:	ca06      	ldmia	r2, {r1, r2}
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <saat_goster+0xac>)
 800063a:	f000 fc81 	bl	8000f40 <ssd1306_WriteString>
	ssd1306_WriteString(saniye, Font_11x18, White);
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <saat_goster+0xa8>)
 8000640:	2301      	movs	r3, #1
 8000642:	ca06      	ldmia	r2, {r1, r2}
 8000644:	4807      	ldr	r0, [pc, #28]	; (8000664 <saat_goster+0xa4>)
 8000646:	f000 fc7b 	bl	8000f40 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800064a:	f000 fb6b 	bl	8000d24 <ssd1306_UpdateScreen>
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000518 	.word	0x20000518
 8000658:	080040fc 	.word	0x080040fc
 800065c:	20000504 	.word	0x20000504
 8000660:	200004c0 	.word	0x200004c0
 8000664:	200004ac 	.word	0x200004ac
 8000668:	20000000 	.word	0x20000000
 800066c:	08004104 	.word	0x08004104

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 ffd8 	bl	8001628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f870 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 f972 	bl	8000964 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000680:	f000 f8a6 	bl	80007d0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000684:	f000 f8d2 	bl	800082c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000688:	f000 f920 	bl	80008cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


    sistem_zamani.clock_tick_1_ms = 0;
 800068c:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <main+0xd0>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]

	ssd1306_Init();
 8000692:	f000 fabb 	bl	8000c0c <ssd1306_Init>

	ssd1306_Fill(Black);
 8000696:	2000      	movs	r0, #0
 8000698:	f000 fb22 	bl	8000ce0 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 800069c:	f000 fb42 	bl	8000d24 <ssd1306_UpdateScreen>

	ds3231_cfg.ay = 12;
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <main+0xd4>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	705a      	strb	r2, [r3, #1]
	ds3231_cfg.gun = 1;
 80006a6:	4b27      	ldr	r3, [pc, #156]	; (8000744 <main+0xd4>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	709a      	strb	r2, [r3, #2]
	ds3231_cfg.ay_gun = 28;
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <main+0xd4>)
 80006ae:	221c      	movs	r2, #28
 80006b0:	70da      	strb	r2, [r3, #3]
	ds3231_cfg.yil = 20;
 80006b2:	4b24      	ldr	r3, [pc, #144]	; (8000744 <main+0xd4>)
 80006b4:	2214      	movs	r2, #20
 80006b6:	701a      	strb	r2, [r3, #0]
	ds3231_cfg.saat = 18;
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <main+0xd4>)
 80006ba:	2212      	movs	r2, #18
 80006bc:	711a      	strb	r2, [r3, #4]
	ds3231_cfg.dakika = 49;
 80006be:	4b21      	ldr	r3, [pc, #132]	; (8000744 <main+0xd4>)
 80006c0:	2231      	movs	r2, #49	; 0x31
 80006c2:	715a      	strb	r2, [r3, #5]
	ds3231_cfg.saniye = 50;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <main+0xd4>)
 80006c6:	2232      	movs	r2, #50	; 0x32
 80006c8:	719a      	strb	r2, [r3, #6]

	timer_durum = 1;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <main+0xd8>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
	lcd.secili = 1;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <main+0xdc>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	705a      	strb	r2, [r3, #1]
	lcd.menu = ANA_SAYFA;
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <main+0xdc>)
 80006d8:	2200      	movs	r2, #0
 80006da:	709a      	strb	r2, [r3, #2]
	HAL_I2C_DeInit(&hi2c1);
 80006dc:	481c      	ldr	r0, [pc, #112]	; (8000750 <main+0xe0>)
 80006de:	f001 fcd7 	bl	8002090 <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c1);
 80006e2:	481b      	ldr	r0, [pc, #108]	; (8000750 <main+0xe0>)
 80006e4:	f001 fb9c 	bl	8001e20 <HAL_I2C_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 80006e8:	481a      	ldr	r0, [pc, #104]	; (8000754 <main+0xe4>)
 80006ea:	f002 fc6f 	bl	8002fcc <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(sistem_zamani._1Hz_bayrak == 1)
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <main+0xd0>)
 80006f0:	7a5b      	ldrb	r3, [r3, #9]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d107      	bne.n	8000706 <main+0x96>
	  {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 80006f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006fa:	4817      	ldr	r0, [pc, #92]	; (8000758 <main+0xe8>)
 80006fc:	f001 fb54 	bl	8001da8 <HAL_GPIO_TogglePin>
		  sistem_zamani._1Hz_bayrak = 0;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <main+0xd0>)
 8000702:	2200      	movs	r2, #0
 8000704:	725a      	strb	r2, [r3, #9]
	  }
	  if(sistem_zamani._2Hz_bayrak == 1)
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <main+0xd0>)
 8000708:	7a1b      	ldrb	r3, [r3, #8]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d102      	bne.n	8000714 <main+0xa4>
	  {

		  sistem_zamani._2Hz_bayrak = 0;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <main+0xd0>)
 8000710:	2200      	movs	r2, #0
 8000712:	721a      	strb	r2, [r3, #8]
	  }
	  if(sistem_zamani._50Hz_bayrak == 1)
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <main+0xd0>)
 8000716:	79db      	ldrb	r3, [r3, #7]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d102      	bne.n	8000722 <main+0xb2>
	  {
//		  ssd1306_UpdateScreen();
		  sistem_zamani._50Hz_bayrak = 0;
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <main+0xd0>)
 800071e:	2200      	movs	r2, #0
 8000720:	71da      	strb	r2, [r3, #7]
	  }
	  if(sistem_zamani._100Hz_bayrak == 1)
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <main+0xd0>)
 8000724:	799b      	ldrb	r3, [r3, #6]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d102      	bne.n	8000730 <main+0xc0>
	  {

		  sistem_zamani._100Hz_bayrak = 0;
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <main+0xd0>)
 800072c:	2200      	movs	r2, #0
 800072e:	719a      	strb	r2, [r3, #6]
	  }
	  if(sistem_zamani._200Hz_bayrak == 1)
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <main+0xd0>)
 8000732:	795b      	ldrb	r3, [r3, #5]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d1da      	bne.n	80006ee <main+0x7e>
	  {

		  sistem_zamani._200Hz_bayrak = 0;
 8000738:	4b01      	ldr	r3, [pc, #4]	; (8000740 <main+0xd0>)
 800073a:	2200      	movs	r2, #0
 800073c:	715a      	strb	r2, [r3, #5]
	  if(sistem_zamani._1Hz_bayrak == 1)
 800073e:	e7d6      	b.n	80006ee <main+0x7e>
 8000740:	20000520 	.word	0x20000520
 8000744:	200004fc 	.word	0x200004fc
 8000748:	200004ab 	.word	0x200004ab
 800074c:	200004a8 	.word	0x200004a8
 8000750:	20000530 	.word	0x20000530
 8000754:	200005cc 	.word	0x200005cc
 8000758:	40010c00 	.word	0x40010c00

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b090      	sub	sp, #64	; 0x40
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0318 	add.w	r3, r7, #24
 8000766:	2228      	movs	r2, #40	; 0x28
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f003 f848 	bl	8003800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077e:	2301      	movs	r3, #1
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000786:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000788:	2300      	movs	r3, #0
 800078a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 0318 	add.w	r3, r7, #24
 8000790:	4618      	mov	r0, r3
 8000792:	f001 ffc3 	bl	800271c <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x44>
  {
    Error_Handler();
 800079c:	f000 f9fa 	bl	8000b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	230f      	movs	r3, #15
 80007a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007a4:	2301      	movs	r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 fa2f 	bl	8002c1c <HAL_RCC_ClockConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80007c4:	f000 f9e6 	bl	8000b94 <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	3740      	adds	r7, #64	; 0x40
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_I2C1_Init+0x50>)
 80007d6:	4a13      	ldr	r2, [pc, #76]	; (8000824 <MX_I2C1_Init+0x54>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_I2C1_Init+0x50>)
 80007dc:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_I2C1_Init+0x58>)
 80007de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_I2C1_Init+0x50>)
 80007ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_I2C1_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_I2C1_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_I2C1_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_I2C1_Init+0x50>)
 800080e:	f001 fb07 	bl	8001e20 <HAL_I2C_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000818:	f000 f9bc 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000530 	.word	0x20000530
 8000824:	40005400 	.word	0x40005400
 8000828:	000186a0 	.word	0x000186a0

0800082c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_TIM1_Init+0x98>)
 800084a:	4a1f      	ldr	r2, [pc, #124]	; (80008c8 <MX_TIM1_Init+0x9c>)
 800084c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_TIM1_Init+0x98>)
 8000850:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000854:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_TIM1_Init+0x98>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_TIM1_Init+0x98>)
 800085e:	2214      	movs	r2, #20
 8000860:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_TIM1_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_TIM1_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_TIM1_Init+0x98>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000874:	4813      	ldr	r0, [pc, #76]	; (80008c4 <MX_TIM1_Init+0x98>)
 8000876:	f002 fb59 	bl	8002f2c <HAL_TIM_Base_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000880:	f000 f988 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000888:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	4619      	mov	r1, r3
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <MX_TIM1_Init+0x98>)
 8000892:	f002 fd23 	bl	80032dc <HAL_TIM_ConfigClockSource>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800089c:	f000 f97a 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008a8:	463b      	mov	r3, r7
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_TIM1_Init+0x98>)
 80008ae:	f002 fee9 	bl	8003684 <HAL_TIMEx_MasterConfigSynchronization>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008b8:	f000 f96c 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000584 	.word	0x20000584
 80008c8:	40012c00 	.word	0x40012c00

080008cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	463b      	mov	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_TIM2_Init+0x94>)
 80008ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_TIM2_Init+0x94>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_TIM2_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_TIM2_Init+0x94>)
 80008fe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000902:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000904:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_TIM2_Init+0x94>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_TIM2_Init+0x94>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000910:	4813      	ldr	r0, [pc, #76]	; (8000960 <MX_TIM2_Init+0x94>)
 8000912:	f002 fb0b 	bl	8002f2c <HAL_TIM_Base_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800091c:	f000 f93a 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	4619      	mov	r1, r3
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <MX_TIM2_Init+0x94>)
 800092e:	f002 fcd5 	bl	80032dc <HAL_TIM_ConfigClockSource>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000938:	f000 f92c 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_TIM2_Init+0x94>)
 800094a:	f002 fe9b 	bl	8003684 <HAL_TIMEx_MasterConfigSynchronization>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000954:	f000 f91e 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200005cc 	.word	0x200005cc

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000978:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <MX_GPIO_Init+0xe0>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a31      	ldr	r2, [pc, #196]	; (8000a44 <MX_GPIO_Init+0xe0>)
 800097e:	f043 0310 	orr.w	r3, r3, #16
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b2f      	ldr	r3, [pc, #188]	; (8000a44 <MX_GPIO_Init+0xe0>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0310 	and.w	r3, r3, #16
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000990:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <MX_GPIO_Init+0xe0>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a2b      	ldr	r2, [pc, #172]	; (8000a44 <MX_GPIO_Init+0xe0>)
 8000996:	f043 0320 	orr.w	r3, r3, #32
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <MX_GPIO_Init+0xe0>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0320 	and.w	r3, r3, #32
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <MX_GPIO_Init+0xe0>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a25      	ldr	r2, [pc, #148]	; (8000a44 <MX_GPIO_Init+0xe0>)
 80009ae:	f043 0304 	orr.w	r3, r3, #4
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <MX_GPIO_Init+0xe0>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c0:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <MX_GPIO_Init+0xe0>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <MX_GPIO_Init+0xe0>)
 80009c6:	f043 0308 	orr.w	r3, r3, #8
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_GPIO_Init+0xe0>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f003 0308 	and.w	r3, r3, #8
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009de:	481a      	ldr	r0, [pc, #104]	; (8000a48 <MX_GPIO_Init+0xe4>)
 80009e0:	f001 f9ca 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009e4:	2330      	movs	r3, #48	; 0x30
 80009e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_GPIO_Init+0xe8>)
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	4816      	ldr	r0, [pc, #88]	; (8000a50 <MX_GPIO_Init+0xec>)
 80009f8:	f000 ffa8 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	4619      	mov	r1, r3
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_GPIO_Init+0xe4>)
 8000a16:	f000 ff99 	bl	800194c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	200a      	movs	r0, #10
 8000a20:	f000 ff5d 	bl	80018de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a24:	200a      	movs	r0, #10
 8000a26:	f000 ff76 	bl	8001916 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2017      	movs	r0, #23
 8000a30:	f000 ff55 	bl	80018de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a34:	2017      	movs	r0, #23
 8000a36:	f000 ff6e 	bl	8001916 <HAL_NVIC_EnableIRQ>

}
 8000a3a:	bf00      	nop
 8000a3c:	3720      	adds	r7, #32
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40010c00 	.word	0x40010c00
 8000a4c:	10110000 	.word	0x10110000
 8000a50:	40010800 	.word	0x40010800

08000a54 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  if(htim == &htim1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a47      	ldr	r2, [pc, #284]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d106      	bne.n	8000a72 <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
		timer_durum = 1;
 8000a64:	4b46      	ldr	r3, [pc, #280]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 8000a6a:	4844      	ldr	r0, [pc, #272]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000a6c:	f002 fb00 	bl	8003070 <HAL_TIM_Base_Stop_IT>
//		  sistem_zamani._500Hz_bayrak = 1;
//	  }
		HAL_TIM_Base_Start_IT(&htim2);
  }

}
 8000a70:	e080      	b.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x120>
  else if (htim == &htim2)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a43      	ldr	r2, [pc, #268]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d17c      	bne.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x120>
	  HAL_TIM_Base_Stop_IT(&htim2);
 8000a7a:	4842      	ldr	r0, [pc, #264]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000a7c:	f002 faf8 	bl	8003070 <HAL_TIM_Base_Stop_IT>
	  sistem_zamani.clock_tick_1_ms++;
 8000a80:	4b41      	ldr	r3, [pc, #260]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	4a40      	ldr	r2, [pc, #256]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a88:	6013      	str	r3, [r2, #0]
	  if(sistem_zamani.clock_tick_1_ms % 1000 == 0 )
 8000a8a:	4b3f      	ldr	r3, [pc, #252]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	4b3f      	ldr	r3, [pc, #252]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a90:	fba3 1302 	umull	r1, r3, r3, r2
 8000a94:	099b      	lsrs	r3, r3, #6
 8000a96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a9a:	fb01 f303 	mul.w	r3, r1, r3
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d109      	bne.n	8000ab8 <HAL_TIM_PeriodElapsedCallback+0x64>
		  if(sistem_zamani._1Hz_bayrak == 1)
 8000aa4:	4b38      	ldr	r3, [pc, #224]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000aa6:	7a5b      	ldrb	r3, [r3, #9]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d102      	bne.n	8000ab2 <HAL_TIM_PeriodElapsedCallback+0x5e>
			  sistem_zamani.zaman_asimi = 1;
 8000aac:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	729a      	strb	r2, [r3, #10]
		  sistem_zamani._1Hz_bayrak= 1;
 8000ab2:	4b35      	ldr	r3, [pc, #212]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	725a      	strb	r2, [r3, #9]
	  if(sistem_zamani.clock_tick_1_ms % 500 == 0 )
 8000ab8:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b33      	ldr	r3, [pc, #204]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000abe:	fba3 1302 	umull	r1, r3, r3, r2
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ac8:	fb01 f303 	mul.w	r3, r1, r3
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d109      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x92>
		  if(sistem_zamani._2Hz_bayrak == 1)
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ad4:	7a1b      	ldrb	r3, [r3, #8]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d102      	bne.n	8000ae0 <HAL_TIM_PeriodElapsedCallback+0x8c>
			  sistem_zamani.zaman_asimi = 1;
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	729a      	strb	r2, [r3, #10]
		  sistem_zamani._2Hz_bayrak = 1;
 8000ae0:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	721a      	strb	r2, [r3, #8]
	  if(sistem_zamani.clock_tick_1_ms % 20 == 0 )
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ae8:	6819      	ldr	r1, [r3, #0]
 8000aea:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000aec:	fba3 2301 	umull	r2, r3, r3, r1
 8000af0:	091a      	lsrs	r2, r3, #4
 8000af2:	4613      	mov	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	1aca      	subs	r2, r1, r3
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	d109      	bne.n	8000b14 <HAL_TIM_PeriodElapsedCallback+0xc0>
		  if(sistem_zamani._50Hz_bayrak == 1)
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b02:	79db      	ldrb	r3, [r3, #7]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d102      	bne.n	8000b0e <HAL_TIM_PeriodElapsedCallback+0xba>
			  sistem_zamani.zaman_asimi = 1;
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	729a      	strb	r2, [r3, #10]
		  sistem_zamani._50Hz_bayrak = 1;
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	71da      	strb	r2, [r3, #7]
	  if(sistem_zamani.clock_tick_1_ms % 10 == 0)
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b16:	6819      	ldr	r1, [r3, #0]
 8000b18:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000b1a:	fba3 2301 	umull	r2, r3, r3, r1
 8000b1e:	08da      	lsrs	r2, r3, #3
 8000b20:	4613      	mov	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4413      	add	r3, r2
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	1aca      	subs	r2, r1, r3
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d109      	bne.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0xee>
		  if(sistem_zamani._100Hz_bayrak == 1)
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b30:	799b      	ldrb	r3, [r3, #6]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d102      	bne.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0xe8>
			  sistem_zamani.zaman_asimi = 1;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	729a      	strb	r2, [r3, #10]
		  sistem_zamani._100Hz_bayrak = 1;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	719a      	strb	r2, [r3, #6]
	  if(sistem_zamani.clock_tick_1_ms % 5 == 0)
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b44:	6819      	ldr	r1, [r3, #0]
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000b48:	fba3 2301 	umull	r2, r3, r3, r1
 8000b4c:	089a      	lsrs	r2, r3, #2
 8000b4e:	4613      	mov	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	1aca      	subs	r2, r1, r3
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	d109      	bne.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x11a>
		  if(sistem_zamani._200Hz_bayrak == 1)
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b5c:	795b      	ldrb	r3, [r3, #5]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d102      	bne.n	8000b68 <HAL_TIM_PeriodElapsedCallback+0x114>
			  sistem_zamani.zaman_asimi = 1;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	729a      	strb	r2, [r3, #10]
		  sistem_zamani._200Hz_bayrak = 1;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	715a      	strb	r2, [r3, #5]
		HAL_TIM_Base_Start_IT(&htim2);
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000b70:	f002 fa2c 	bl	8002fcc <HAL_TIM_Base_Start_IT>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000584 	.word	0x20000584
 8000b80:	200004ab 	.word	0x200004ab
 8000b84:	200005cc 	.word	0x200005cc
 8000b88:	20000520 	.word	0x20000520
 8000b8c:	10624dd3 	.word	0x10624dd3
 8000b90:	cccccccd 	.word	0xcccccccd

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <Error_Handler+0x6>

08000b9c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy
#include "main.h"
#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af04      	add	r7, sp, #16
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, 500);
 8000bb2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bb6:	9302      	str	r3, [sp, #8]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2178      	movs	r1, #120	; 0x78
 8000bc6:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <ssd1306_WriteCommand+0x2c>)
 8000bc8:	f001 fa92 	bl	80020f0 <HAL_I2C_Mem_Write>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000530 	.word	0x20000530

08000bd8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af04      	add	r7, sp, #16
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, 500);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000bea:	9202      	str	r2, [sp, #8]
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	2240      	movs	r2, #64	; 0x40
 8000bf6:	2178      	movs	r1, #120	; 0x78
 8000bf8:	4803      	ldr	r0, [pc, #12]	; (8000c08 <ssd1306_WriteData+0x30>)
 8000bfa:	f001 fa79 	bl	80020f0 <HAL_I2C_Mem_Write>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000530 	.word	0x20000530

08000c0c <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000c10:	f7ff ffc4 	bl	8000b9c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000c14:	2064      	movs	r0, #100	; 0x64
 8000c16:	f000 fd69 	bl	80016ec <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f000 f9e2 	bl	8000fe4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000c20:	2020      	movs	r0, #32
 8000c22:	f7ff ffc1 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff ffbe 	bl	8000ba8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c2c:	20b0      	movs	r0, #176	; 0xb0
 8000c2e:	f7ff ffbb 	bl	8000ba8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000c32:	20c8      	movs	r0, #200	; 0xc8
 8000c34:	f7ff ffb8 	bl	8000ba8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff ffb5 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000c3e:	2010      	movs	r0, #16
 8000c40:	f7ff ffb2 	bl	8000ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000c44:	2040      	movs	r0, #64	; 0x40
 8000c46:	f7ff ffaf 	bl	8000ba8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000c4a:	20ff      	movs	r0, #255	; 0xff
 8000c4c:	f000 f9b6 	bl	8000fbc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000c50:	20a1      	movs	r0, #161	; 0xa1
 8000c52:	f7ff ffa9 	bl	8000ba8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000c56:	20a6      	movs	r0, #166	; 0xa6
 8000c58:	f7ff ffa6 	bl	8000ba8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000c5c:	20a8      	movs	r0, #168	; 0xa8
 8000c5e:	f7ff ffa3 	bl	8000ba8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000c62:	203f      	movs	r0, #63	; 0x3f
 8000c64:	f7ff ffa0 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c68:	20a4      	movs	r0, #164	; 0xa4
 8000c6a:	f7ff ff9d 	bl	8000ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000c6e:	20d3      	movs	r0, #211	; 0xd3
 8000c70:	f7ff ff9a 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff ff97 	bl	8000ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c7a:	20d5      	movs	r0, #213	; 0xd5
 8000c7c:	f7ff ff94 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000c80:	20f0      	movs	r0, #240	; 0xf0
 8000c82:	f7ff ff91 	bl	8000ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000c86:	20d9      	movs	r0, #217	; 0xd9
 8000c88:	f7ff ff8e 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000c8c:	2022      	movs	r0, #34	; 0x22
 8000c8e:	f7ff ff8b 	bl	8000ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000c92:	20da      	movs	r0, #218	; 0xda
 8000c94:	f7ff ff88 	bl	8000ba8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000c98:	2012      	movs	r0, #18
 8000c9a:	f7ff ff85 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000c9e:	20db      	movs	r0, #219	; 0xdb
 8000ca0:	f7ff ff82 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000ca4:	2020      	movs	r0, #32
 8000ca6:	f7ff ff7f 	bl	8000ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000caa:	208d      	movs	r0, #141	; 0x8d
 8000cac:	f7ff ff7c 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000cb0:	2014      	movs	r0, #20
 8000cb2:	f7ff ff79 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f000 f994 	bl	8000fe4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f000 f80f 	bl	8000ce0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000cc2:	f000 f82f 	bl	8000d24 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <ssd1306_Init+0xd0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <ssd1306_Init+0xd0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000cd2:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <ssd1306_Init+0xd0>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	715a      	strb	r2, [r3, #5]
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000494 	.word	0x20000494

08000ce0 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	e00d      	b.n	8000d0c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <ssd1306_Fill+0x1a>
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	e000      	b.n	8000cfc <ssd1306_Fill+0x1c>
 8000cfa:	21ff      	movs	r1, #255	; 0xff
 8000cfc:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <ssd1306_Fill+0x40>)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4413      	add	r3, r2
 8000d02:	460a      	mov	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d12:	d3ed      	bcc.n	8000cf0 <ssd1306_Fill+0x10>
    }
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000094 	.word	0x20000094

08000d24 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	e016      	b.n	8000d5e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	3b50      	subs	r3, #80	; 0x50
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff36 	bl	8000ba8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff ff33 	bl	8000ba8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000d42:	2010      	movs	r0, #16
 8000d44:	f7ff ff30 	bl	8000ba8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	01db      	lsls	r3, r3, #7
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <ssd1306_UpdateScreen+0x48>)
 8000d4e:	4413      	add	r3, r2
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff40 	bl	8000bd8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	71fb      	strb	r3, [r7, #7]
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b07      	cmp	r3, #7
 8000d62:	d9e5      	bls.n	8000d30 <ssd1306_UpdateScreen+0xc>
    }
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000094 	.word	0x20000094

08000d70 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	71bb      	strb	r3, [r7, #6]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db48      	blt.n	8000e1c <ssd1306_DrawPixel+0xac>
 8000d8a:	79bb      	ldrb	r3, [r7, #6]
 8000d8c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d8e:	d845      	bhi.n	8000e1c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8000d90:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <ssd1306_DrawPixel+0xb8>)
 8000d92:	791b      	ldrb	r3, [r3, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d006      	beq.n	8000da6 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8000d98:	797b      	ldrb	r3, [r7, #5]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bf0c      	ite	eq
 8000d9e:	2301      	moveq	r3, #1
 8000da0:	2300      	movne	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8000da6:	797b      	ldrb	r3, [r7, #5]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d11a      	bne.n	8000de2 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000dac:	79fa      	ldrb	r2, [r7, #7]
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	08db      	lsrs	r3, r3, #3
 8000db2:	b2d8      	uxtb	r0, r3
 8000db4:	4603      	mov	r3, r0
 8000db6:	01db      	lsls	r3, r3, #7
 8000db8:	4413      	add	r3, r2
 8000dba:	4a1c      	ldr	r2, [pc, #112]	; (8000e2c <ssd1306_DrawPixel+0xbc>)
 8000dbc:	5cd3      	ldrb	r3, [r2, r3]
 8000dbe:	b25a      	sxtb	r2, r3
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b259      	sxtb	r1, r3
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	01db      	lsls	r3, r3, #7
 8000dd8:	4413      	add	r3, r2
 8000dda:	b2c9      	uxtb	r1, r1
 8000ddc:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <ssd1306_DrawPixel+0xbc>)
 8000dde:	54d1      	strb	r1, [r2, r3]
 8000de0:	e01d      	b.n	8000e1e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000de2:	79fa      	ldrb	r2, [r7, #7]
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	08db      	lsrs	r3, r3, #3
 8000de8:	b2d8      	uxtb	r0, r3
 8000dea:	4603      	mov	r3, r0
 8000dec:	01db      	lsls	r3, r3, #7
 8000dee:	4413      	add	r3, r2
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <ssd1306_DrawPixel+0xbc>)
 8000df2:	5cd3      	ldrb	r3, [r2, r3]
 8000df4:	b25a      	sxtb	r2, r3
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	4013      	ands	r3, r2
 8000e0a:	b259      	sxtb	r1, r3
 8000e0c:	79fa      	ldrb	r2, [r7, #7]
 8000e0e:	4603      	mov	r3, r0
 8000e10:	01db      	lsls	r3, r3, #7
 8000e12:	4413      	add	r3, r2
 8000e14:	b2c9      	uxtb	r1, r1
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <ssd1306_DrawPixel+0xbc>)
 8000e18:	54d1      	strb	r1, [r2, r3]
 8000e1a:	e000      	b.n	8000e1e <ssd1306_DrawPixel+0xae>
        return;
 8000e1c:	bf00      	nop
    }
}
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000494 	.word	0x20000494
 8000e2c:	20000094 	.word	0x20000094

08000e30 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4604      	mov	r4, r0
 8000e38:	1d38      	adds	r0, r7, #4
 8000e3a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4623      	mov	r3, r4
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	4613      	mov	r3, r2
 8000e46:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	2b1f      	cmp	r3, #31
 8000e4c:	d902      	bls.n	8000e54 <ssd1306_WriteChar+0x24>
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	2b7e      	cmp	r3, #126	; 0x7e
 8000e52:	d901      	bls.n	8000e58 <ssd1306_WriteChar+0x28>
        return 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	e06d      	b.n	8000f34 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000e58:	4b38      	ldr	r3, [pc, #224]	; (8000f3c <ssd1306_WriteChar+0x10c>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	793b      	ldrb	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	2b80      	cmp	r3, #128	; 0x80
 8000e64:	dc06      	bgt.n	8000e74 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000e66:	4b35      	ldr	r3, [pc, #212]	; (8000f3c <ssd1306_WriteChar+0x10c>)
 8000e68:	885b      	ldrh	r3, [r3, #2]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	797b      	ldrb	r3, [r7, #5]
 8000e6e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000e70:	2b40      	cmp	r3, #64	; 0x40
 8000e72:	dd01      	ble.n	8000e78 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e05d      	b.n	8000f34 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
 8000e7c:	e04c      	b.n	8000f18 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	3b20      	subs	r3, #32
 8000e84:	7979      	ldrb	r1, [r7, #5]
 8000e86:	fb01 f303 	mul.w	r3, r1, r3
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	440b      	add	r3, r1
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	4413      	add	r3, r2
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	e034      	b.n	8000f08 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d012      	beq.n	8000ed4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000eae:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <ssd1306_WriteChar+0x10c>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4413      	add	r3, r2
 8000eba:	b2d8      	uxtb	r0, r3
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <ssd1306_WriteChar+0x10c>)
 8000ebe:	885b      	ldrh	r3, [r3, #2]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	7bba      	ldrb	r2, [r7, #14]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f7ff ff4f 	bl	8000d70 <ssd1306_DrawPixel>
 8000ed2:	e016      	b.n	8000f02 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <ssd1306_WriteChar+0x10c>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	4413      	add	r3, r2
 8000ee0:	b2d8      	uxtb	r0, r3
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <ssd1306_WriteChar+0x10c>)
 8000ee4:	885b      	ldrh	r3, [r3, #2]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	4413      	add	r3, r2
 8000eee:	b2d9      	uxtb	r1, r3
 8000ef0:	7bbb      	ldrb	r3, [r7, #14]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	bf0c      	ite	eq
 8000ef6:	2301      	moveq	r3, #1
 8000ef8:	2300      	movne	r3, #0
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	f7ff ff37 	bl	8000d70 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61bb      	str	r3, [r7, #24]
 8000f08:	793b      	ldrb	r3, [r7, #4]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d3c5      	bcc.n	8000e9e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3301      	adds	r3, #1
 8000f16:	61fb      	str	r3, [r7, #28]
 8000f18:	797b      	ldrb	r3, [r7, #5]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d3ad      	bcc.n	8000e7e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <ssd1306_WriteChar+0x10c>)
 8000f24:	881a      	ldrh	r2, [r3, #0]
 8000f26:	793b      	ldrb	r3, [r7, #4]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <ssd1306_WriteChar+0x10c>)
 8000f30:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3724      	adds	r7, #36	; 0x24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd90      	pop	{r4, r7, pc}
 8000f3c:	20000494 	.word	0x20000494

08000f40 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	1d38      	adds	r0, r7, #4
 8000f4a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000f4e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000f50:	e012      	b.n	8000f78 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	7818      	ldrb	r0, [r3, #0]
 8000f56:	78fb      	ldrb	r3, [r7, #3]
 8000f58:	1d3a      	adds	r2, r7, #4
 8000f5a:	ca06      	ldmia	r2, {r1, r2}
 8000f5c:	f7ff ff68 	bl	8000e30 <ssd1306_WriteChar>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d002      	beq.n	8000f72 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	e008      	b.n	8000f84 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	3301      	adds	r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1e8      	bne.n	8000f52 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	781b      	ldrb	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	460a      	mov	r2, r1
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <ssd1306_SetCursor+0x2c>)
 8000fa2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <ssd1306_SetCursor+0x2c>)
 8000faa:	805a      	strh	r2, [r3, #2]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000494 	.word	0x20000494

08000fbc <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000fc6:	2381      	movs	r3, #129	; 0x81
 8000fc8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fdeb 	bl	8000ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fde7 	bl	8000ba8 <ssd1306_WriteCommand>
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d005      	beq.n	8001000 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000ff4:	23af      	movs	r3, #175	; 0xaf
 8000ff6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <ssd1306_SetDisplayOn+0x38>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	719a      	strb	r2, [r3, #6]
 8000ffe:	e004      	b.n	800100a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001000:	23ae      	movs	r3, #174	; 0xae
 8001002:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <ssd1306_SetDisplayOn+0x38>)
 8001006:	2200      	movs	r2, #0
 8001008:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fdcb 	bl	8000ba8 <ssd1306_WriteCommand>
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000494 	.word	0x20000494

08001020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_MspInit+0x5c>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	4a14      	ldr	r2, [pc, #80]	; (800107c <HAL_MspInit+0x5c>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6193      	str	r3, [r2, #24]
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_MspInit+0x5c>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_MspInit+0x5c>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a0e      	ldr	r2, [pc, #56]	; (800107c <HAL_MspInit+0x5c>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_MspInit+0x5c>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_MspInit+0x60>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_MspInit+0x60>)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	40021000 	.word	0x40021000
 8001080:	40010000 	.word	0x40010000

08001084 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <HAL_I2C_MspInit+0x70>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d123      	bne.n	80010ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HAL_I2C_MspInit+0x74>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <HAL_I2C_MspInit+0x74>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_I2C_MspInit+0x74>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010bc:	23c0      	movs	r3, #192	; 0xc0
 80010be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c0:	2312      	movs	r3, #18
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	480b      	ldr	r0, [pc, #44]	; (80010fc <HAL_I2C_MspInit+0x78>)
 80010d0:	f000 fc3c 	bl	800194c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_I2C_MspInit+0x74>)
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_I2C_MspInit+0x74>)
 80010da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010de:	61d3      	str	r3, [r2, #28]
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_I2C_MspInit+0x74>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40005400 	.word	0x40005400
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010c00 	.word	0x40010c00

08001100 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_I2C_MspDeInit+0x38>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d10d      	bne.n	800112e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_I2C_MspDeInit+0x3c>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a09      	ldr	r2, [pc, #36]	; (800113c <HAL_I2C_MspDeInit+0x3c>)
 8001118:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800111c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	4807      	ldr	r0, [pc, #28]	; (8001140 <HAL_I2C_MspDeInit+0x40>)
 8001122:	f000 fd6d 	bl	8001c00 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <HAL_I2C_MspDeInit+0x40>)
 800112a:	f000 fd69 	bl	8001c00 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40005400 	.word	0x40005400
 800113c:	40021000 	.word	0x40021000
 8001140:	40010c00 	.word	0x40010c00

08001144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a26      	ldr	r2, [pc, #152]	; (80011ec <HAL_TIM_Base_MspInit+0xa8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d12c      	bne.n	80011b0 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <HAL_TIM_Base_MspInit+0xac>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	4a25      	ldr	r2, [pc, #148]	; (80011f0 <HAL_TIM_Base_MspInit+0xac>)
 800115c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001160:	6193      	str	r3, [r2, #24]
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <HAL_TIM_Base_MspInit+0xac>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2018      	movs	r0, #24
 8001174:	f000 fbb3 	bl	80018de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001178:	2018      	movs	r0, #24
 800117a:	f000 fbcc 	bl	8001916 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2019      	movs	r0, #25
 8001184:	f000 fbab 	bl	80018de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001188:	2019      	movs	r0, #25
 800118a:	f000 fbc4 	bl	8001916 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	201a      	movs	r0, #26
 8001194:	f000 fba3 	bl	80018de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001198:	201a      	movs	r0, #26
 800119a:	f000 fbbc 	bl	8001916 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	201b      	movs	r0, #27
 80011a4:	f000 fb9b 	bl	80018de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80011a8:	201b      	movs	r0, #27
 80011aa:	f000 fbb4 	bl	8001916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011ae:	e018      	b.n	80011e2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011b8:	d113      	bne.n	80011e2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_TIM_Base_MspInit+0xac>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a0c      	ldr	r2, [pc, #48]	; (80011f0 <HAL_TIM_Base_MspInit+0xac>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_TIM_Base_MspInit+0xac>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	201c      	movs	r0, #28
 80011d8:	f000 fb81 	bl	80018de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011dc:	201c      	movs	r0, #28
 80011de:	f000 fb9a 	bl	8001916 <HAL_NVIC_EnableIRQ>
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40012c00 	.word	0x40012c00
 80011f0:	40021000 	.word	0x40021000

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123a:	f000 fa3b 	bl	80016b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001248:	2010      	movs	r0, #16
 800124a:	f000 fdc7 	bl	8001ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

	if(timer_durum == 1)
 800124e:	4b37      	ldr	r3, [pc, #220]	; (800132c <EXTI4_IRQHandler+0xe8>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d167      	bne.n	8001326 <EXTI4_IRQHandler+0xe2>
	{
		switch (lcd.menu)
 8001256:	4b36      	ldr	r3, [pc, #216]	; (8001330 <EXTI4_IRQHandler+0xec>)
 8001258:	789b      	ldrb	r3, [r3, #2]
 800125a:	2b04      	cmp	r3, #4
 800125c:	d85c      	bhi.n	8001318 <EXTI4_IRQHandler+0xd4>
 800125e:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <EXTI4_IRQHandler+0x20>)
 8001260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001264:	08001279 	.word	0x08001279
 8001268:	080012b9 	.word	0x080012b9
 800126c:	080012a3 	.word	0x080012a3
 8001270:	080012d7 	.word	0x080012d7
 8001274:	08001305 	.word	0x08001305
		{
		case ANA_SAYFA:
			if(lcd.secili == ANA_SAYFA_MAX_SATIR)
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <EXTI4_IRQHandler+0xec>)
 800127a:	785b      	ldrb	r3, [r3, #1]
 800127c:	2b06      	cmp	r3, #6
 800127e:	d103      	bne.n	8001288 <EXTI4_IRQHandler+0x44>
			{
				lcd.secili = 1;
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <EXTI4_IRQHandler+0xec>)
 8001282:	2201      	movs	r2, #1
 8001284:	705a      	strb	r2, [r3, #1]
 8001286:	e005      	b.n	8001294 <EXTI4_IRQHandler+0x50>
			}
			else
			{
				lcd.secili ++;
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <EXTI4_IRQHandler+0xec>)
 800128a:	785b      	ldrb	r3, [r3, #1]
 800128c:	3301      	adds	r3, #1
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <EXTI4_IRQHandler+0xec>)
 8001292:	705a      	strb	r2, [r3, #1]
			}
			menu_ac(ANA_SAYFA, lcd.secili);
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <EXTI4_IRQHandler+0xec>)
 8001296:	785b      	ldrb	r3, [r3, #1]
 8001298:	4619      	mov	r1, r3
 800129a:	2000      	movs	r0, #0
 800129c:	f7fe ff56 	bl	800014c <menu_ac>
			break;
 80012a0:	e03b      	b.n	800131a <EXTI4_IRQHandler+0xd6>
		case ADIM:
			lcd.menu = ADIM;
 80012a2:	4b23      	ldr	r3, [pc, #140]	; (8001330 <EXTI4_IRQHandler+0xec>)
 80012a4:	2202      	movs	r2, #2
 80012a6:	709a      	strb	r2, [r3, #2]
			lcd.secili = 1;
 80012a8:	4b21      	ldr	r3, [pc, #132]	; (8001330 <EXTI4_IRQHandler+0xec>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	705a      	strb	r2, [r3, #1]
			menu_ac(ADIM, 1);
 80012ae:	2101      	movs	r1, #1
 80012b0:	2002      	movs	r0, #2
 80012b2:	f7fe ff4b 	bl	800014c <menu_ac>
			break;
 80012b6:	e030      	b.n	800131a <EXTI4_IRQHandler+0xd6>
		case NABIZ:
			lcd.menu = NABIZ;
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <EXTI4_IRQHandler+0xec>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	709a      	strb	r2, [r3, #2]
			lcd.secili = 1;
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <EXTI4_IRQHandler+0xec>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	705a      	strb	r2, [r3, #1]
			menu_ac(lcd.menu, lcd.secili);
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <EXTI4_IRQHandler+0xec>)
 80012c6:	789a      	ldrb	r2, [r3, #2]
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <EXTI4_IRQHandler+0xec>)
 80012ca:	785b      	ldrb	r3, [r3, #1]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4610      	mov	r0, r2
 80012d0:	f7fe ff3c 	bl	800014c <menu_ac>
			break;
 80012d4:	e021      	b.n	800131a <EXTI4_IRQHandler+0xd6>
		case TELEFON:
			if(lcd.secili == TELEFON_MAX_SATIR)
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <EXTI4_IRQHandler+0xec>)
 80012d8:	785b      	ldrb	r3, [r3, #1]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d103      	bne.n	80012e6 <EXTI4_IRQHandler+0xa2>
			{
				lcd.secili = 1;
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <EXTI4_IRQHandler+0xec>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	705a      	strb	r2, [r3, #1]
 80012e4:	e005      	b.n	80012f2 <EXTI4_IRQHandler+0xae>
			}
			else
			{
				lcd.secili ++;
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <EXTI4_IRQHandler+0xec>)
 80012e8:	785b      	ldrb	r3, [r3, #1]
 80012ea:	3301      	adds	r3, #1
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <EXTI4_IRQHandler+0xec>)
 80012f0:	705a      	strb	r2, [r3, #1]
			}
			menu_ac(lcd.menu, lcd.secili);
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <EXTI4_IRQHandler+0xec>)
 80012f4:	789a      	ldrb	r2, [r3, #2]
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <EXTI4_IRQHandler+0xec>)
 80012f8:	785b      	ldrb	r3, [r3, #1]
 80012fa:	4619      	mov	r1, r3
 80012fc:	4610      	mov	r0, r2
 80012fe:	f7fe ff25 	bl	800014c <menu_ac>
			break;
 8001302:	e00a      	b.n	800131a <EXTI4_IRQHandler+0xd6>
		case SICAKLIK:
			lcd.secili = 1;
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <EXTI4_IRQHandler+0xec>)
 8001306:	2201      	movs	r2, #1
 8001308:	705a      	strb	r2, [r3, #1]
			menu_ac(lcd.menu, 1);
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <EXTI4_IRQHandler+0xec>)
 800130c:	789b      	ldrb	r3, [r3, #2]
 800130e:	2101      	movs	r1, #1
 8001310:	4618      	mov	r0, r3
 8001312:	f7fe ff1b 	bl	800014c <menu_ac>
			break;
 8001316:	e000      	b.n	800131a <EXTI4_IRQHandler+0xd6>
		default:
			break;
 8001318:	bf00      	nop
		}
		HAL_TIM_Base_Start_IT(&htim1);
 800131a:	4806      	ldr	r0, [pc, #24]	; (8001334 <EXTI4_IRQHandler+0xf0>)
 800131c:	f001 fe56 	bl	8002fcc <HAL_TIM_Base_Start_IT>
		timer_durum = 0;
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <EXTI4_IRQHandler+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	}
  /* USER CODE END EXTI4_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200004ab 	.word	0x200004ab
 8001330:	200004a8 	.word	0x200004a8
 8001334:	20000584 	.word	0x20000584

08001338 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800133c:	2020      	movs	r0, #32
 800133e:	f000 fd4d 	bl	8001ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
	if(timer_durum == 1)
 8001342:	4b6c      	ldr	r3, [pc, #432]	; (80014f4 <EXTI9_5_IRQHandler+0x1bc>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	f040 80d1 	bne.w	80014ee <EXTI9_5_IRQHandler+0x1b6>
	{
		switch (lcd.menu)
 800134c:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 800134e:	789b      	ldrb	r3, [r3, #2]
 8001350:	2b05      	cmp	r3, #5
 8001352:	f200 80c5 	bhi.w	80014e0 <EXTI9_5_IRQHandler+0x1a8>
 8001356:	a201      	add	r2, pc, #4	; (adr r2, 800135c <EXTI9_5_IRQHandler+0x24>)
 8001358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135c:	08001375 	.word	0x08001375
 8001360:	080014a5 	.word	0x080014a5
 8001364:	08001431 	.word	0x08001431
 8001368:	0800144f 	.word	0x0800144f
 800136c:	08001487 	.word	0x08001487
 8001370:	080014c3 	.word	0x080014c3
		{
		case ANA_SAYFA:
			switch(lcd.secili)
 8001374:	4b60      	ldr	r3, [pc, #384]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 8001376:	785b      	ldrb	r3, [r3, #1]
 8001378:	3b01      	subs	r3, #1
 800137a:	2b04      	cmp	r3, #4
 800137c:	d856      	bhi.n	800142c <EXTI9_5_IRQHandler+0xf4>
 800137e:	a201      	add	r2, pc, #4	; (adr r2, 8001384 <EXTI9_5_IRQHandler+0x4c>)
 8001380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001384:	08001399 	.word	0x08001399
 8001388:	080013b7 	.word	0x080013b7
 800138c:	080013d5 	.word	0x080013d5
 8001390:	080013f3 	.word	0x080013f3
 8001394:	08001411 	.word	0x08001411
			{
			case 1:				//nabiz
				lcd.menu = NABIZ;
 8001398:	4b57      	ldr	r3, [pc, #348]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 800139a:	2201      	movs	r2, #1
 800139c:	709a      	strb	r2, [r3, #2]
				lcd.secili = 1;
 800139e:	4b56      	ldr	r3, [pc, #344]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	705a      	strb	r2, [r3, #1]
				menu_ac(lcd.menu, lcd.secili);
 80013a4:	4b54      	ldr	r3, [pc, #336]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80013a6:	789a      	ldrb	r2, [r3, #2]
 80013a8:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80013aa:	785b      	ldrb	r3, [r3, #1]
 80013ac:	4619      	mov	r1, r3
 80013ae:	4610      	mov	r0, r2
 80013b0:	f7fe fecc 	bl	800014c <menu_ac>
				break;
 80013b4:	e03b      	b.n	800142e <EXTI9_5_IRQHandler+0xf6>
			case 2:				//adim
				lcd.menu = ADIM;
 80013b6:	4b50      	ldr	r3, [pc, #320]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80013b8:	2202      	movs	r2, #2
 80013ba:	709a      	strb	r2, [r3, #2]
				lcd.secili = 1;
 80013bc:	4b4e      	ldr	r3, [pc, #312]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80013be:	2201      	movs	r2, #1
 80013c0:	705a      	strb	r2, [r3, #1]
				menu_ac(lcd.menu, lcd.secili);
 80013c2:	4b4d      	ldr	r3, [pc, #308]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80013c4:	789a      	ldrb	r2, [r3, #2]
 80013c6:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	4619      	mov	r1, r3
 80013cc:	4610      	mov	r0, r2
 80013ce:	f7fe febd 	bl	800014c <menu_ac>
				break;
 80013d2:	e02c      	b.n	800142e <EXTI9_5_IRQHandler+0xf6>
			case 3:				//tel
				lcd.menu = TELEFON;
 80013d4:	4b48      	ldr	r3, [pc, #288]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80013d6:	2203      	movs	r2, #3
 80013d8:	709a      	strb	r2, [r3, #2]
				lcd.secili = 1;
 80013da:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80013dc:	2201      	movs	r2, #1
 80013de:	705a      	strb	r2, [r3, #1]
				menu_ac(lcd.menu, lcd.secili);
 80013e0:	4b45      	ldr	r3, [pc, #276]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80013e2:	789a      	ldrb	r2, [r3, #2]
 80013e4:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80013e6:	785b      	ldrb	r3, [r3, #1]
 80013e8:	4619      	mov	r1, r3
 80013ea:	4610      	mov	r0, r2
 80013ec:	f7fe feae 	bl	800014c <menu_ac>
				break;
 80013f0:	e01d      	b.n	800142e <EXTI9_5_IRQHandler+0xf6>
			case 4:			//sicaklik
				lcd.menu = SICAKLIK;
 80013f2:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80013f4:	2204      	movs	r2, #4
 80013f6:	709a      	strb	r2, [r3, #2]
				lcd.secili = 1;
 80013f8:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	705a      	strb	r2, [r3, #1]
				menu_ac(lcd.menu, lcd.secili);
 80013fe:	4b3e      	ldr	r3, [pc, #248]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 8001400:	789a      	ldrb	r2, [r3, #2]
 8001402:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	4619      	mov	r1, r3
 8001408:	4610      	mov	r0, r2
 800140a:	f7fe fe9f 	bl	800014c <menu_ac>
				break;
 800140e:	e00e      	b.n	800142e <EXTI9_5_IRQHandler+0xf6>
			case 5:
				lcd.menu = SAAT;
 8001410:	4b39      	ldr	r3, [pc, #228]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 8001412:	2205      	movs	r2, #5
 8001414:	709a      	strb	r2, [r3, #2]
				lcd.secili = 1;
 8001416:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 8001418:	2201      	movs	r2, #1
 800141a:	705a      	strb	r2, [r3, #1]
				menu_ac(lcd.menu, lcd.secili);
 800141c:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 800141e:	789a      	ldrb	r2, [r3, #2]
 8001420:	4b35      	ldr	r3, [pc, #212]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 8001422:	785b      	ldrb	r3, [r3, #1]
 8001424:	4619      	mov	r1, r3
 8001426:	4610      	mov	r0, r2
 8001428:	f7fe fe90 	bl	800014c <menu_ac>
			default:
				break;
 800142c:	bf00      	nop
			}
			break;
 800142e:	e058      	b.n	80014e2 <EXTI9_5_IRQHandler+0x1aa>
		case ADIM:
			lcd.menu = ANA_SAYFA;
 8001430:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 8001432:	2200      	movs	r2, #0
 8001434:	709a      	strb	r2, [r3, #2]
			lcd.secili = 1;
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 8001438:	2201      	movs	r2, #1
 800143a:	705a      	strb	r2, [r3, #1]
			menu_ac(lcd.menu, lcd.secili);
 800143c:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 800143e:	789a      	ldrb	r2, [r3, #2]
 8001440:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 8001442:	785b      	ldrb	r3, [r3, #1]
 8001444:	4619      	mov	r1, r3
 8001446:	4610      	mov	r0, r2
 8001448:	f7fe fe80 	bl	800014c <menu_ac>
			break;
 800144c:	e049      	b.n	80014e2 <EXTI9_5_IRQHandler+0x1aa>
		case TELEFON:
			switch(lcd.secili)
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 8001450:	785b      	ldrb	r3, [r3, #1]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d013      	beq.n	800147e <EXTI9_5_IRQHandler+0x146>
 8001456:	2b03      	cmp	r3, #3
 8001458:	d002      	beq.n	8001460 <EXTI9_5_IRQHandler+0x128>
 800145a:	2b01      	cmp	r3, #1
 800145c:	d011      	beq.n	8001482 <EXTI9_5_IRQHandler+0x14a>
				lcd.menu = ANA_SAYFA;
				lcd.secili = 1;
				menu_ac(lcd.menu, lcd.secili);
				break;
			default:
				break;
 800145e:	e011      	b.n	8001484 <EXTI9_5_IRQHandler+0x14c>
				lcd.menu = ANA_SAYFA;
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 8001462:	2200      	movs	r2, #0
 8001464:	709a      	strb	r2, [r3, #2]
				lcd.secili = 1;
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 8001468:	2201      	movs	r2, #1
 800146a:	705a      	strb	r2, [r3, #1]
				menu_ac(lcd.menu, lcd.secili);
 800146c:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 800146e:	789a      	ldrb	r2, [r3, #2]
 8001470:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	4619      	mov	r1, r3
 8001476:	4610      	mov	r0, r2
 8001478:	f7fe fe68 	bl	800014c <menu_ac>
				break;
 800147c:	e002      	b.n	8001484 <EXTI9_5_IRQHandler+0x14c>
				break;
 800147e:	bf00      	nop
 8001480:	e02f      	b.n	80014e2 <EXTI9_5_IRQHandler+0x1aa>
				break;
 8001482:	bf00      	nop
			}
			break;
 8001484:	e02d      	b.n	80014e2 <EXTI9_5_IRQHandler+0x1aa>
		case SICAKLIK:
			lcd.menu = ANA_SAYFA;
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 8001488:	2200      	movs	r2, #0
 800148a:	709a      	strb	r2, [r3, #2]
			lcd.secili = 1;
 800148c:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 800148e:	2201      	movs	r2, #1
 8001490:	705a      	strb	r2, [r3, #1]
			menu_ac(lcd.menu, lcd.secili);
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 8001494:	789a      	ldrb	r2, [r3, #2]
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 8001498:	785b      	ldrb	r3, [r3, #1]
 800149a:	4619      	mov	r1, r3
 800149c:	4610      	mov	r0, r2
 800149e:	f7fe fe55 	bl	800014c <menu_ac>
			break;
 80014a2:	e01e      	b.n	80014e2 <EXTI9_5_IRQHandler+0x1aa>
		case NABIZ:
			lcd.menu = ANA_SAYFA;
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	709a      	strb	r2, [r3, #2]
			lcd.secili = 1;
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	705a      	strb	r2, [r3, #1]
			menu_ac(lcd.menu, lcd.secili);
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80014b2:	789a      	ldrb	r2, [r3, #2]
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80014b6:	785b      	ldrb	r3, [r3, #1]
 80014b8:	4619      	mov	r1, r3
 80014ba:	4610      	mov	r0, r2
 80014bc:	f7fe fe46 	bl	800014c <menu_ac>
			break;
 80014c0:	e00f      	b.n	80014e2 <EXTI9_5_IRQHandler+0x1aa>
		case SAAT:
			lcd.menu = ANA_SAYFA;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	709a      	strb	r2, [r3, #2]
			lcd.secili = 1;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	705a      	strb	r2, [r3, #1]
			menu_ac(lcd.menu, lcd.secili);
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80014d0:	789a      	ldrb	r2, [r3, #2]
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <EXTI9_5_IRQHandler+0x1c0>)
 80014d4:	785b      	ldrb	r3, [r3, #1]
 80014d6:	4619      	mov	r1, r3
 80014d8:	4610      	mov	r0, r2
 80014da:	f7fe fe37 	bl	800014c <menu_ac>
			break;
 80014de:	e000      	b.n	80014e2 <EXTI9_5_IRQHandler+0x1aa>
		default:
			break;
 80014e0:	bf00      	nop
		}
		HAL_TIM_Base_Start_IT(&htim1);
 80014e2:	4806      	ldr	r0, [pc, #24]	; (80014fc <EXTI9_5_IRQHandler+0x1c4>)
 80014e4:	f001 fd72 	bl	8002fcc <HAL_TIM_Base_Start_IT>
		timer_durum = 0;
 80014e8:	4b02      	ldr	r3, [pc, #8]	; (80014f4 <EXTI9_5_IRQHandler+0x1bc>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	}
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200004ab 	.word	0x200004ab
 80014f8:	200004a8 	.word	0x200004a8
 80014fc:	20000584 	.word	0x20000584

08001500 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <TIM1_BRK_IRQHandler+0x10>)
 8001506:	f001 fde1 	bl	80030cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000584 	.word	0x20000584

08001514 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <TIM1_UP_IRQHandler+0x10>)
 800151a:	f001 fdd7 	bl	80030cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000584 	.word	0x20000584

08001528 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <TIM1_TRG_COM_IRQHandler+0x10>)
 800152e:	f001 fdcd 	bl	80030cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000584 	.word	0x20000584

0800153c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <TIM1_CC_IRQHandler+0x10>)
 8001542:	f001 fdc3 	bl	80030cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000584 	.word	0x20000584

08001550 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <TIM2_IRQHandler+0x10>)
 8001556:	f001 fdb9 	bl	80030cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200005cc 	.word	0x200005cc

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f002 f8e6 	bl	8003764 <__errno>
 8001598:	4602      	mov	r2, r0
 800159a:	230c      	movs	r3, #12
 800159c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <_sbrk+0x64>)
 80015b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20005000 	.word	0x20005000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	2000049c 	.word	0x2000049c
 80015cc:	20000620 	.word	0x20000620

080015d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015de:	e003      	b.n	80015e8 <LoopCopyDataInit>

080015e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015e6:	3104      	adds	r1, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015e8:	480a      	ldr	r0, [pc, #40]	; (8001614 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015f0:	d3f6      	bcc.n	80015e0 <CopyDataInit>
  ldr r2, =_sbss
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015f4:	e002      	b.n	80015fc <LoopFillZerobss>

080015f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015f8:	f842 3b04 	str.w	r3, [r2], #4

080015fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001600:	d3f9      	bcc.n	80015f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001602:	f7ff ffe5 	bl	80015d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001606:	f002 f8b3 	bl	8003770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160a:	f7ff f831 	bl	8000670 <main>
  bx lr
 800160e:	4770      	bx	lr
  ldr r3, =_sidata
 8001610:	08004ecc 	.word	0x08004ecc
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001618:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 800161c:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001620:	2000061c 	.word	0x2000061c

08001624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC1_2_IRQHandler>
	...

08001628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_Init+0x28>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_Init+0x28>)
 8001632:	f043 0310 	orr.w	r3, r3, #16
 8001636:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 f945 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163e:	2000      	movs	r0, #0
 8001640:	f000 f808 	bl	8001654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001644:	f7ff fcec 	bl	8001020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40022000 	.word	0x40022000

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x54>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x58>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166a:	fbb3 f3f1 	udiv	r3, r3, r1
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f95d 	bl	8001932 <HAL_SYSTICK_Config>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e00e      	b.n	80016a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d80a      	bhi.n	800169e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f000 f925 	bl	80018de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001694:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <HAL_InitTick+0x5c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e000      	b.n	80016a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000010 	.word	0x20000010
 80016b0:	2000000c 	.word	0x2000000c

080016b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_IncTick+0x1c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_IncTick+0x20>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a03      	ldr	r2, [pc, #12]	; (80016d4 <HAL_IncTick+0x20>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	20000010 	.word	0x20000010
 80016d4:	20000614 	.word	0x20000614

080016d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b02      	ldr	r3, [pc, #8]	; (80016e8 <HAL_GetTick+0x10>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	20000614 	.word	0x20000614

080016ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f4:	f7ff fff0 	bl	80016d8 <HAL_GetTick>
 80016f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001704:	d005      	beq.n	8001712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_Delay+0x40>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4413      	add	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001712:	bf00      	nop
 8001714:	f7ff ffe0 	bl	80016d8 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	429a      	cmp	r2, r3
 8001722:	d8f7      	bhi.n	8001714 <HAL_Delay+0x28>
  {
  }
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000010 	.word	0x20000010

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4906      	ldr	r1, [pc, #24]	; (80017c8 <__NVIC_EnableIRQ+0x34>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100

080017cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	6039      	str	r1, [r7, #0]
 80017d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	db0a      	blt.n	80017f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	490c      	ldr	r1, [pc, #48]	; (8001818 <__NVIC_SetPriority+0x4c>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	440b      	add	r3, r1
 80017f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f4:	e00a      	b.n	800180c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4908      	ldr	r1, [pc, #32]	; (800181c <__NVIC_SetPriority+0x50>)
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	3b04      	subs	r3, #4
 8001804:	0112      	lsls	r2, r2, #4
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	440b      	add	r3, r1
 800180a:	761a      	strb	r2, [r3, #24]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000e100 	.word	0xe000e100
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f1c3 0307 	rsb	r3, r3, #7
 800183a:	2b04      	cmp	r3, #4
 800183c:	bf28      	it	cs
 800183e:	2304      	movcs	r3, #4
 8001840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3304      	adds	r3, #4
 8001846:	2b06      	cmp	r3, #6
 8001848:	d902      	bls.n	8001850 <NVIC_EncodePriority+0x30>
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3b03      	subs	r3, #3
 800184e:	e000      	b.n	8001852 <NVIC_EncodePriority+0x32>
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	f04f 32ff 	mov.w	r2, #4294967295
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43da      	mvns	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	401a      	ands	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001868:	f04f 31ff 	mov.w	r1, #4294967295
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	43d9      	mvns	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	4313      	orrs	r3, r2
         );
}
 800187a:	4618      	mov	r0, r3
 800187c:	3724      	adds	r7, #36	; 0x24
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001894:	d301      	bcc.n	800189a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001896:	2301      	movs	r3, #1
 8001898:	e00f      	b.n	80018ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <SysTick_Config+0x40>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a2:	210f      	movs	r1, #15
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f7ff ff90 	bl	80017cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <SysTick_Config+0x40>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <SysTick_Config+0x40>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff2d 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f0:	f7ff ff42 	bl	8001778 <__NVIC_GetPriorityGrouping>
 80018f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	f7ff ff90 	bl	8001820 <NVIC_EncodePriority>
 8001900:	4602      	mov	r2, r0
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff5f 	bl	80017cc <__NVIC_SetPriority>
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff35 	bl	8001794 <__NVIC_EnableIRQ>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffa2 	bl	8001884 <SysTick_Config>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800194c:	b480      	push	{r7}
 800194e:	b08b      	sub	sp, #44	; 0x2c
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195e:	e127      	b.n	8001bb0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001960:	2201      	movs	r2, #1
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	429a      	cmp	r2, r3
 800197a:	f040 8116 	bne.w	8001baa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b12      	cmp	r3, #18
 8001984:	d034      	beq.n	80019f0 <HAL_GPIO_Init+0xa4>
 8001986:	2b12      	cmp	r3, #18
 8001988:	d80d      	bhi.n	80019a6 <HAL_GPIO_Init+0x5a>
 800198a:	2b02      	cmp	r3, #2
 800198c:	d02b      	beq.n	80019e6 <HAL_GPIO_Init+0x9a>
 800198e:	2b02      	cmp	r3, #2
 8001990:	d804      	bhi.n	800199c <HAL_GPIO_Init+0x50>
 8001992:	2b00      	cmp	r3, #0
 8001994:	d031      	beq.n	80019fa <HAL_GPIO_Init+0xae>
 8001996:	2b01      	cmp	r3, #1
 8001998:	d01c      	beq.n	80019d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800199a:	e048      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800199c:	2b03      	cmp	r3, #3
 800199e:	d043      	beq.n	8001a28 <HAL_GPIO_Init+0xdc>
 80019a0:	2b11      	cmp	r3, #17
 80019a2:	d01b      	beq.n	80019dc <HAL_GPIO_Init+0x90>
          break;
 80019a4:	e043      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019a6:	4a89      	ldr	r2, [pc, #548]	; (8001bcc <HAL_GPIO_Init+0x280>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d026      	beq.n	80019fa <HAL_GPIO_Init+0xae>
 80019ac:	4a87      	ldr	r2, [pc, #540]	; (8001bcc <HAL_GPIO_Init+0x280>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d806      	bhi.n	80019c0 <HAL_GPIO_Init+0x74>
 80019b2:	4a87      	ldr	r2, [pc, #540]	; (8001bd0 <HAL_GPIO_Init+0x284>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d020      	beq.n	80019fa <HAL_GPIO_Init+0xae>
 80019b8:	4a86      	ldr	r2, [pc, #536]	; (8001bd4 <HAL_GPIO_Init+0x288>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d01d      	beq.n	80019fa <HAL_GPIO_Init+0xae>
          break;
 80019be:	e036      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019c0:	4a85      	ldr	r2, [pc, #532]	; (8001bd8 <HAL_GPIO_Init+0x28c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d019      	beq.n	80019fa <HAL_GPIO_Init+0xae>
 80019c6:	4a85      	ldr	r2, [pc, #532]	; (8001bdc <HAL_GPIO_Init+0x290>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d016      	beq.n	80019fa <HAL_GPIO_Init+0xae>
 80019cc:	4a84      	ldr	r2, [pc, #528]	; (8001be0 <HAL_GPIO_Init+0x294>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <HAL_GPIO_Init+0xae>
          break;
 80019d2:	e02c      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	623b      	str	r3, [r7, #32]
          break;
 80019da:	e028      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	3304      	adds	r3, #4
 80019e2:	623b      	str	r3, [r7, #32]
          break;
 80019e4:	e023      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	3308      	adds	r3, #8
 80019ec:	623b      	str	r3, [r7, #32]
          break;
 80019ee:	e01e      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	330c      	adds	r3, #12
 80019f6:	623b      	str	r3, [r7, #32]
          break;
 80019f8:	e019      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a02:	2304      	movs	r3, #4
 8001a04:	623b      	str	r3, [r7, #32]
          break;
 8001a06:	e012      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d105      	bne.n	8001a1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a10:	2308      	movs	r3, #8
 8001a12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	611a      	str	r2, [r3, #16]
          break;
 8001a1a:	e008      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	615a      	str	r2, [r3, #20]
          break;
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
          break;
 8001a2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2bff      	cmp	r3, #255	; 0xff
 8001a32:	d801      	bhi.n	8001a38 <HAL_GPIO_Init+0xec>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	e001      	b.n	8001a3c <HAL_GPIO_Init+0xf0>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	2bff      	cmp	r3, #255	; 0xff
 8001a42:	d802      	bhi.n	8001a4a <HAL_GPIO_Init+0xfe>
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	e002      	b.n	8001a50 <HAL_GPIO_Init+0x104>
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	3b08      	subs	r3, #8
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	210f      	movs	r1, #15
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	401a      	ands	r2, r3
 8001a62:	6a39      	ldr	r1, [r7, #32]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 8096 	beq.w	8001baa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7e:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <HAL_GPIO_Init+0x298>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	4a58      	ldr	r2, [pc, #352]	; (8001be4 <HAL_GPIO_Init+0x298>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6193      	str	r3, [r2, #24]
 8001a8a:	4b56      	ldr	r3, [pc, #344]	; (8001be4 <HAL_GPIO_Init+0x298>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a96:	4a54      	ldr	r2, [pc, #336]	; (8001be8 <HAL_GPIO_Init+0x29c>)
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	220f      	movs	r2, #15
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4b      	ldr	r2, [pc, #300]	; (8001bec <HAL_GPIO_Init+0x2a0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0x19e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4a      	ldr	r2, [pc, #296]	; (8001bf0 <HAL_GPIO_Init+0x2a4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00d      	beq.n	8001ae6 <HAL_GPIO_Init+0x19a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a49      	ldr	r2, [pc, #292]	; (8001bf4 <HAL_GPIO_Init+0x2a8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d007      	beq.n	8001ae2 <HAL_GPIO_Init+0x196>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_GPIO_Init+0x2ac>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d101      	bne.n	8001ade <HAL_GPIO_Init+0x192>
 8001ada:	2303      	movs	r3, #3
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x1a0>
 8001ade:	2304      	movs	r3, #4
 8001ae0:	e004      	b.n	8001aec <HAL_GPIO_Init+0x1a0>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e002      	b.n	8001aec <HAL_GPIO_Init+0x1a0>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x1a0>
 8001aea:	2300      	movs	r3, #0
 8001aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aee:	f002 0203 	and.w	r2, r2, #3
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	4093      	lsls	r3, r2
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001afc:	493a      	ldr	r1, [pc, #232]	; (8001be8 <HAL_GPIO_Init+0x29c>)
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b16:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4938      	ldr	r1, [pc, #224]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
 8001b22:	e006      	b.n	8001b32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b24:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	4933      	ldr	r1, [pc, #204]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d006      	beq.n	8001b4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	492e      	ldr	r1, [pc, #184]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	604b      	str	r3, [r1, #4]
 8001b4a:	e006      	b.n	8001b5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b4c:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	4929      	ldr	r1, [pc, #164]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b66:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	4924      	ldr	r1, [pc, #144]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
 8001b72:	e006      	b.n	8001b82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	491f      	ldr	r1, [pc, #124]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d006      	beq.n	8001b9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	491a      	ldr	r1, [pc, #104]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60cb      	str	r3, [r1, #12]
 8001b9a:	e006      	b.n	8001baa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	4915      	ldr	r1, [pc, #84]	; (8001bfc <HAL_GPIO_Init+0x2b0>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	3301      	adds	r3, #1
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f47f aed0 	bne.w	8001960 <HAL_GPIO_Init+0x14>
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	372c      	adds	r7, #44	; 0x2c
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	10210000 	.word	0x10210000
 8001bd0:	10110000 	.word	0x10110000
 8001bd4:	10120000 	.word	0x10120000
 8001bd8:	10310000 	.word	0x10310000
 8001bdc:	10320000 	.word	0x10320000
 8001be0:	10220000 	.word	0x10220000
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010000 	.word	0x40010000
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	40010c00 	.word	0x40010c00
 8001bf4:	40011000 	.word	0x40011000
 8001bf8:	40011400 	.word	0x40011400
 8001bfc:	40010400 	.word	0x40010400

08001c00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001c0e:	e09a      	b.n	8001d46 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001c10:	2201      	movs	r2, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 808d 	beq.w	8001d40 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001c26:	4a4e      	ldr	r2, [pc, #312]	; (8001d60 <HAL_GPIO_DeInit+0x160>)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c32:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4013      	ands	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a46      	ldr	r2, [pc, #280]	; (8001d64 <HAL_GPIO_DeInit+0x164>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d013      	beq.n	8001c78 <HAL_GPIO_DeInit+0x78>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a45      	ldr	r2, [pc, #276]	; (8001d68 <HAL_GPIO_DeInit+0x168>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d00d      	beq.n	8001c74 <HAL_GPIO_DeInit+0x74>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a44      	ldr	r2, [pc, #272]	; (8001d6c <HAL_GPIO_DeInit+0x16c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d007      	beq.n	8001c70 <HAL_GPIO_DeInit+0x70>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a43      	ldr	r2, [pc, #268]	; (8001d70 <HAL_GPIO_DeInit+0x170>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_GPIO_DeInit+0x6c>
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e006      	b.n	8001c7a <HAL_GPIO_DeInit+0x7a>
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	e004      	b.n	8001c7a <HAL_GPIO_DeInit+0x7a>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e002      	b.n	8001c7a <HAL_GPIO_DeInit+0x7a>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <HAL_GPIO_DeInit+0x7a>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	f002 0203 	and.w	r2, r2, #3
 8001c80:	0092      	lsls	r2, r2, #2
 8001c82:	4093      	lsls	r3, r2
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d132      	bne.n	8001cf0 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	220f      	movs	r2, #15
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001c9a:	4a31      	ldr	r2, [pc, #196]	; (8001d60 <HAL_GPIO_DeInit+0x160>)
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	43da      	mvns	r2, r3
 8001caa:	482d      	ldr	r0, [pc, #180]	; (8001d60 <HAL_GPIO_DeInit+0x160>)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <HAL_GPIO_DeInit+0x174>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	492c      	ldr	r1, [pc, #176]	; (8001d74 <HAL_GPIO_DeInit+0x174>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001cc6:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <HAL_GPIO_DeInit+0x174>)
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	4929      	ldr	r1, [pc, #164]	; (8001d74 <HAL_GPIO_DeInit+0x174>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001cd4:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <HAL_GPIO_DeInit+0x174>)
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	4925      	ldr	r1, [pc, #148]	; (8001d74 <HAL_GPIO_DeInit+0x174>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001ce2:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <HAL_GPIO_DeInit+0x174>)
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	4922      	ldr	r1, [pc, #136]	; (8001d74 <HAL_GPIO_DeInit+0x174>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2bff      	cmp	r3, #255	; 0xff
 8001cf4:	d801      	bhi.n	8001cfa <HAL_GPIO_DeInit+0xfa>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	e001      	b.n	8001cfe <HAL_GPIO_DeInit+0xfe>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	2bff      	cmp	r3, #255	; 0xff
 8001d04:	d802      	bhi.n	8001d0c <HAL_GPIO_DeInit+0x10c>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	e002      	b.n	8001d12 <HAL_GPIO_DeInit+0x112>
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	3b08      	subs	r3, #8
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	210f      	movs	r1, #15
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	401a      	ands	r2, r3
 8001d24:	2104      	movs	r1, #4
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	3301      	adds	r3, #1
 8001d44:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f47f af5e 	bne.w	8001c10 <HAL_GPIO_DeInit+0x10>
  }
}
 8001d54:	bf00      	nop
 8001d56:	3724      	adds	r7, #36	; 0x24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40010000 	.word	0x40010000
 8001d64:	40010800 	.word	0x40010800
 8001d68:	40010c00 	.word	0x40010c00
 8001d6c:	40011000 	.word	0x40011000
 8001d70:	40011400 	.word	0x40011400
 8001d74:	40010400 	.word	0x40010400

08001d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
 8001d84:	4613      	mov	r3, r2
 8001d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d88:	787b      	ldrb	r3, [r7, #1]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d94:	e003      	b.n	8001d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	041a      	lsls	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	611a      	str	r2, [r3, #16]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	041a      	lsls	r2, r3, #16
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	43d9      	mvns	r1, r3
 8001dc6:	887b      	ldrh	r3, [r7, #2]
 8001dc8:	400b      	ands	r3, r1
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	611a      	str	r2, [r3, #16]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
	...

08001ddc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d006      	beq.n	8001e00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f806 	bl	8001e0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40010400 	.word	0x40010400

08001e0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e11f      	b.n	8002072 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff f91c 	bl	8001084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2224      	movs	r2, #36	; 0x24
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e84:	f001 f820 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8001e88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4a7b      	ldr	r2, [pc, #492]	; (800207c <HAL_I2C_Init+0x25c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d807      	bhi.n	8001ea4 <HAL_I2C_Init+0x84>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4a7a      	ldr	r2, [pc, #488]	; (8002080 <HAL_I2C_Init+0x260>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	bf94      	ite	ls
 8001e9c:	2301      	movls	r3, #1
 8001e9e:	2300      	movhi	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	e006      	b.n	8001eb2 <HAL_I2C_Init+0x92>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a77      	ldr	r2, [pc, #476]	; (8002084 <HAL_I2C_Init+0x264>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	bf94      	ite	ls
 8001eac:	2301      	movls	r3, #1
 8001eae:	2300      	movhi	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e0db      	b.n	8002072 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4a72      	ldr	r2, [pc, #456]	; (8002088 <HAL_I2C_Init+0x268>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	0c9b      	lsrs	r3, r3, #18
 8001ec4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a64      	ldr	r2, [pc, #400]	; (800207c <HAL_I2C_Init+0x25c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d802      	bhi.n	8001ef4 <HAL_I2C_Init+0xd4>
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	e009      	b.n	8001f08 <HAL_I2C_Init+0xe8>
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	4a63      	ldr	r2, [pc, #396]	; (800208c <HAL_I2C_Init+0x26c>)
 8001f00:	fba2 2303 	umull	r2, r3, r2, r3
 8001f04:	099b      	lsrs	r3, r3, #6
 8001f06:	3301      	adds	r3, #1
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4956      	ldr	r1, [pc, #344]	; (800207c <HAL_I2C_Init+0x25c>)
 8001f24:	428b      	cmp	r3, r1
 8001f26:	d80d      	bhi.n	8001f44 <HAL_I2C_Init+0x124>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1e59      	subs	r1, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	bf38      	it	cc
 8001f40:	2304      	movcc	r3, #4
 8001f42:	e04f      	b.n	8001fe4 <HAL_I2C_Init+0x1c4>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d111      	bne.n	8001f70 <HAL_I2C_Init+0x150>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1e58      	subs	r0, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6859      	ldr	r1, [r3, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	440b      	add	r3, r1
 8001f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf0c      	ite	eq
 8001f68:	2301      	moveq	r3, #1
 8001f6a:	2300      	movne	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	e012      	b.n	8001f96 <HAL_I2C_Init+0x176>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e58      	subs	r0, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	0099      	lsls	r1, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f86:	3301      	adds	r3, #1
 8001f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf0c      	ite	eq
 8001f90:	2301      	moveq	r3, #1
 8001f92:	2300      	movne	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_Init+0x17e>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e022      	b.n	8001fe4 <HAL_I2C_Init+0x1c4>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_I2C_Init+0x1a4>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1e58      	subs	r0, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6859      	ldr	r1, [r3, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	440b      	add	r3, r1
 8001fb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fc2:	e00f      	b.n	8001fe4 <HAL_I2C_Init+0x1c4>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1e58      	subs	r0, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	0099      	lsls	r1, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	6809      	ldr	r1, [r1, #0]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69da      	ldr	r2, [r3, #28]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002012:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6911      	ldr	r1, [r2, #16]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68d2      	ldr	r2, [r2, #12]
 800201e:	4311      	orrs	r1, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	430b      	orrs	r3, r1
 8002026:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	000186a0 	.word	0x000186a0
 8002080:	001e847f 	.word	0x001e847f
 8002084:	003d08ff 	.word	0x003d08ff
 8002088:	431bde83 	.word	0x431bde83
 800208c:	10624dd3 	.word	0x10624dd3

08002090 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e021      	b.n	80020e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2224      	movs	r2, #36	; 0x24
 80020a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0201 	bic.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff f820 	bl	8001100 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	4608      	mov	r0, r1
 80020fa:	4611      	mov	r1, r2
 80020fc:	461a      	mov	r2, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	817b      	strh	r3, [r7, #10]
 8002102:	460b      	mov	r3, r1
 8002104:	813b      	strh	r3, [r7, #8]
 8002106:	4613      	mov	r3, r2
 8002108:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800210a:	f7ff fae5 	bl	80016d8 <HAL_GetTick>
 800210e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b20      	cmp	r3, #32
 800211a:	f040 80d9 	bne.w	80022d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2319      	movs	r3, #25
 8002124:	2201      	movs	r2, #1
 8002126:	496d      	ldr	r1, [pc, #436]	; (80022dc <HAL_I2C_Mem_Write+0x1ec>)
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 f971 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002134:	2302      	movs	r3, #2
 8002136:	e0cc      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_I2C_Mem_Write+0x56>
 8002142:	2302      	movs	r3, #2
 8002144:	e0c5      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d007      	beq.n	800216c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800217a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2221      	movs	r2, #33	; 0x21
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2240      	movs	r2, #64	; 0x40
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a3a      	ldr	r2, [r7, #32]
 8002196:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800219c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4a4d      	ldr	r2, [pc, #308]	; (80022e0 <HAL_I2C_Mem_Write+0x1f0>)
 80021ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021ae:	88f8      	ldrh	r0, [r7, #6]
 80021b0:	893a      	ldrh	r2, [r7, #8]
 80021b2:	8979      	ldrh	r1, [r7, #10]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	4603      	mov	r3, r0
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f890 	bl	80022e4 <I2C_RequestMemoryWrite>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d052      	beq.n	8002270 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e081      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f9f2 	bl	80025bc <I2C_WaitOnTXEFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d107      	bne.n	80021f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e06b      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002220:	b29b      	uxth	r3, r3
 8002222:	3b01      	subs	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b04      	cmp	r3, #4
 8002236:	d11b      	bne.n	8002270 <HAL_I2C_Mem_Write+0x180>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	d017      	beq.n	8002270 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1aa      	bne.n	80021ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f9de 	bl	800263e <I2C_WaitOnBTFFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00d      	beq.n	80022a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	2b04      	cmp	r3, #4
 800228e:	d107      	bne.n	80022a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e016      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e000      	b.n	80022d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
  }
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	00100002 	.word	0x00100002
 80022e0:	ffff0000 	.word	0xffff0000

080022e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	4608      	mov	r0, r1
 80022ee:	4611      	mov	r1, r2
 80022f0:	461a      	mov	r2, r3
 80022f2:	4603      	mov	r3, r0
 80022f4:	817b      	strh	r3, [r7, #10]
 80022f6:	460b      	mov	r3, r1
 80022f8:	813b      	strh	r3, [r7, #8]
 80022fa:	4613      	mov	r3, r2
 80022fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800230c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	2200      	movs	r2, #0
 8002316:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f878 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00d      	beq.n	8002342 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002334:	d103      	bne.n	800233e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e05f      	b.n	8002402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002342:	897b      	ldrh	r3, [r7, #10]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002350:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	6a3a      	ldr	r2, [r7, #32]
 8002356:	492d      	ldr	r1, [pc, #180]	; (800240c <I2C_RequestMemoryWrite+0x128>)
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f8b0 	bl	80024be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e04c      	b.n	8002402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800237e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002380:	6a39      	ldr	r1, [r7, #32]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f91a 	bl	80025bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00d      	beq.n	80023aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	2b04      	cmp	r3, #4
 8002394:	d107      	bne.n	80023a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e02b      	b.n	8002402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023b0:	893b      	ldrh	r3, [r7, #8]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	611a      	str	r2, [r3, #16]
 80023ba:	e021      	b.n	8002400 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023bc:	893b      	ldrh	r3, [r7, #8]
 80023be:	0a1b      	lsrs	r3, r3, #8
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023cc:	6a39      	ldr	r1, [r7, #32]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f8f4 	bl	80025bc <I2C_WaitOnTXEFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00d      	beq.n	80023f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d107      	bne.n	80023f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e005      	b.n	8002402 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023f6:	893b      	ldrh	r3, [r7, #8]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	00010002 	.word	0x00010002

08002410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002420:	e025      	b.n	800246e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d021      	beq.n	800246e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7ff f955 	bl	80016d8 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d116      	bne.n	800246e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f043 0220 	orr.w	r2, r3, #32
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e023      	b.n	80024b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d10d      	bne.n	8002494 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4013      	ands	r3, r2
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	bf0c      	ite	eq
 800248a:	2301      	moveq	r3, #1
 800248c:	2300      	movne	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	e00c      	b.n	80024ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	43da      	mvns	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4013      	ands	r3, r2
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bf0c      	ite	eq
 80024a6:	2301      	moveq	r3, #1
 80024a8:	2300      	movne	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d0b6      	beq.n	8002422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024cc:	e051      	b.n	8002572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024dc:	d123      	bne.n	8002526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f043 0204 	orr.w	r2, r3, #4
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e046      	b.n	80025b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d021      	beq.n	8002572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252e:	f7ff f8d3 	bl	80016d8 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	429a      	cmp	r2, r3
 800253c:	d302      	bcc.n	8002544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d116      	bne.n	8002572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f043 0220 	orr.w	r2, r3, #32
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e020      	b.n	80025b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d10c      	bne.n	8002596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	43da      	mvns	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4013      	ands	r3, r2
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	bf14      	ite	ne
 800258e:	2301      	movne	r3, #1
 8002590:	2300      	moveq	r3, #0
 8002592:	b2db      	uxtb	r3, r3
 8002594:	e00b      	b.n	80025ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	43da      	mvns	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	4013      	ands	r3, r2
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf14      	ite	ne
 80025a8:	2301      	movne	r3, #1
 80025aa:	2300      	moveq	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d18d      	bne.n	80024ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025c8:	e02d      	b.n	8002626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f878 	bl	80026c0 <I2C_IsAcknowledgeFailed>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e02d      	b.n	8002636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d021      	beq.n	8002626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e2:	f7ff f879 	bl	80016d8 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d302      	bcc.n	80025f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d116      	bne.n	8002626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f043 0220 	orr.w	r2, r3, #32
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e007      	b.n	8002636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002630:	2b80      	cmp	r3, #128	; 0x80
 8002632:	d1ca      	bne.n	80025ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800264a:	e02d      	b.n	80026a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f837 	bl	80026c0 <I2C_IsAcknowledgeFailed>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e02d      	b.n	80026b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002662:	d021      	beq.n	80026a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002664:	f7ff f838 	bl	80016d8 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	429a      	cmp	r2, r3
 8002672:	d302      	bcc.n	800267a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d116      	bne.n	80026a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f043 0220 	orr.w	r2, r3, #32
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e007      	b.n	80026b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d1ca      	bne.n	800264c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d6:	d11b      	bne.n	8002710 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f043 0204 	orr.w	r2, r3, #4
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e26c      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 8087 	beq.w	800284a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800273c:	4b92      	ldr	r3, [pc, #584]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b04      	cmp	r3, #4
 8002746:	d00c      	beq.n	8002762 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002748:	4b8f      	ldr	r3, [pc, #572]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b08      	cmp	r3, #8
 8002752:	d112      	bne.n	800277a <HAL_RCC_OscConfig+0x5e>
 8002754:	4b8c      	ldr	r3, [pc, #560]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002760:	d10b      	bne.n	800277a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002762:	4b89      	ldr	r3, [pc, #548]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d06c      	beq.n	8002848 <HAL_RCC_OscConfig+0x12c>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d168      	bne.n	8002848 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e246      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002782:	d106      	bne.n	8002792 <HAL_RCC_OscConfig+0x76>
 8002784:	4b80      	ldr	r3, [pc, #512]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a7f      	ldr	r2, [pc, #508]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 800278a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	e02e      	b.n	80027f0 <HAL_RCC_OscConfig+0xd4>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x98>
 800279a:	4b7b      	ldr	r3, [pc, #492]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a7a      	ldr	r2, [pc, #488]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	4b78      	ldr	r3, [pc, #480]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a77      	ldr	r2, [pc, #476]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e01d      	b.n	80027f0 <HAL_RCC_OscConfig+0xd4>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0xbc>
 80027be:	4b72      	ldr	r3, [pc, #456]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a71      	ldr	r2, [pc, #452]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b6f      	ldr	r3, [pc, #444]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a6e      	ldr	r2, [pc, #440]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e00b      	b.n	80027f0 <HAL_RCC_OscConfig+0xd4>
 80027d8:	4b6b      	ldr	r3, [pc, #428]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a6a      	ldr	r2, [pc, #424]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b68      	ldr	r3, [pc, #416]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a67      	ldr	r2, [pc, #412]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80027ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe ff6e 	bl	80016d8 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe ff6a 	bl	80016d8 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1fa      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	4b5d      	ldr	r3, [pc, #372]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0xe4>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe ff5a 	bl	80016d8 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002828:	f7fe ff56 	bl	80016d8 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e1e6      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283a:	4b53      	ldr	r3, [pc, #332]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x10c>
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d063      	beq.n	800291e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002856:	4b4c      	ldr	r3, [pc, #304]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002862:	4b49      	ldr	r3, [pc, #292]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b08      	cmp	r3, #8
 800286c:	d11c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x18c>
 800286e:	4b46      	ldr	r3, [pc, #280]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d116      	bne.n	80028a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	4b43      	ldr	r3, [pc, #268]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_RCC_OscConfig+0x176>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e1ba      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	4b3d      	ldr	r3, [pc, #244]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4939      	ldr	r1, [pc, #228]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	e03a      	b.n	800291e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b0:	4b36      	ldr	r3, [pc, #216]	; (800298c <HAL_RCC_OscConfig+0x270>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7fe ff0f 	bl	80016d8 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028be:	f7fe ff0b 	bl	80016d8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e19b      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d0:	4b2d      	ldr	r3, [pc, #180]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b2a      	ldr	r3, [pc, #168]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4927      	ldr	r1, [pc, #156]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	e015      	b.n	800291e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f2:	4b26      	ldr	r3, [pc, #152]	; (800298c <HAL_RCC_OscConfig+0x270>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fe feee 	bl	80016d8 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002900:	f7fe feea 	bl	80016d8 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e17a      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d03a      	beq.n	80029a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d019      	beq.n	8002966 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <HAL_RCC_OscConfig+0x274>)
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002938:	f7fe fece 	bl	80016d8 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe feca 	bl	80016d8 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e15a      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <HAL_RCC_OscConfig+0x26c>)
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800295e:	2001      	movs	r0, #1
 8002960:	f000 fac6 	bl	8002ef0 <RCC_Delay>
 8002964:	e01c      	b.n	80029a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_RCC_OscConfig+0x274>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296c:	f7fe feb4 	bl	80016d8 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002972:	e00f      	b.n	8002994 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002974:	f7fe feb0 	bl	80016d8 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d908      	bls.n	8002994 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e140      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	42420000 	.word	0x42420000
 8002990:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002994:	4b9e      	ldr	r3, [pc, #632]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e9      	bne.n	8002974 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a6 	beq.w	8002afa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b2:	4b97      	ldr	r3, [pc, #604]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10d      	bne.n	80029da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	4b94      	ldr	r3, [pc, #592]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	4a93      	ldr	r2, [pc, #588]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c8:	61d3      	str	r3, [r2, #28]
 80029ca:	4b91      	ldr	r3, [pc, #580]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d6:	2301      	movs	r3, #1
 80029d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029da:	4b8e      	ldr	r3, [pc, #568]	; (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d118      	bne.n	8002a18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e6:	4b8b      	ldr	r3, [pc, #556]	; (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a8a      	ldr	r2, [pc, #552]	; (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 80029ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f2:	f7fe fe71 	bl	80016d8 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fa:	f7fe fe6d 	bl	80016d8 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b64      	cmp	r3, #100	; 0x64
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e0fd      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	4b81      	ldr	r3, [pc, #516]	; (8002c14 <HAL_RCC_OscConfig+0x4f8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCC_OscConfig+0x312>
 8002a20:	4b7b      	ldr	r3, [pc, #492]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4a7a      	ldr	r2, [pc, #488]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6213      	str	r3, [r2, #32]
 8002a2c:	e02d      	b.n	8002a8a <HAL_RCC_OscConfig+0x36e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x334>
 8002a36:	4b76      	ldr	r3, [pc, #472]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4a75      	ldr	r2, [pc, #468]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	6213      	str	r3, [r2, #32]
 8002a42:	4b73      	ldr	r3, [pc, #460]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4a72      	ldr	r2, [pc, #456]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	6213      	str	r3, [r2, #32]
 8002a4e:	e01c      	b.n	8002a8a <HAL_RCC_OscConfig+0x36e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d10c      	bne.n	8002a72 <HAL_RCC_OscConfig+0x356>
 8002a58:	4b6d      	ldr	r3, [pc, #436]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	4a6c      	ldr	r2, [pc, #432]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	6213      	str	r3, [r2, #32]
 8002a64:	4b6a      	ldr	r3, [pc, #424]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4a69      	ldr	r2, [pc, #420]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	6213      	str	r3, [r2, #32]
 8002a70:	e00b      	b.n	8002a8a <HAL_RCC_OscConfig+0x36e>
 8002a72:	4b67      	ldr	r3, [pc, #412]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	4a66      	ldr	r2, [pc, #408]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	6213      	str	r3, [r2, #32]
 8002a7e:	4b64      	ldr	r3, [pc, #400]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	4a63      	ldr	r2, [pc, #396]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002a84:	f023 0304 	bic.w	r3, r3, #4
 8002a88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d015      	beq.n	8002abe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a92:	f7fe fe21 	bl	80016d8 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a98:	e00a      	b.n	8002ab0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9a:	f7fe fe1d 	bl	80016d8 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e0ab      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab0:	4b57      	ldr	r3, [pc, #348]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0ee      	beq.n	8002a9a <HAL_RCC_OscConfig+0x37e>
 8002abc:	e014      	b.n	8002ae8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7fe fe0b 	bl	80016d8 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fe fe07 	bl	80016d8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e095      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002adc:	4b4c      	ldr	r3, [pc, #304]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1ee      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d105      	bne.n	8002afa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aee:	4b48      	ldr	r3, [pc, #288]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	4a47      	ldr	r2, [pc, #284]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 8081 	beq.w	8002c06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b04:	4b42      	ldr	r3, [pc, #264]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d061      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d146      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b18:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <HAL_RCC_OscConfig+0x4fc>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fddb 	bl	80016d8 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b26:	f7fe fdd7 	bl	80016d8 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e067      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b38:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f0      	bne.n	8002b26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4c:	d108      	bne.n	8002b60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b4e:	4b30      	ldr	r3, [pc, #192]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	492d      	ldr	r1, [pc, #180]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b60:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a19      	ldr	r1, [r3, #32]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	430b      	orrs	r3, r1
 8002b72:	4927      	ldr	r1, [pc, #156]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b78:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <HAL_RCC_OscConfig+0x4fc>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fdab 	bl	80016d8 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b86:	f7fe fda7 	bl	80016d8 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e037      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b98:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x46a>
 8002ba4:	e02f      	b.n	8002c06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <HAL_RCC_OscConfig+0x4fc>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7fe fd94 	bl	80016d8 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fe fd90 	bl	80016d8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e020      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x498>
 8002bd2:	e018      	b.n	8002c06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e013      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_OscConfig+0x4f4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d001      	beq.n	8002c06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40007000 	.word	0x40007000
 8002c18:	42420060 	.word	0x42420060

08002c1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0d0      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c30:	4b6a      	ldr	r3, [pc, #424]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d910      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b67      	ldr	r3, [pc, #412]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 0207 	bic.w	r2, r3, #7
 8002c46:	4965      	ldr	r1, [pc, #404]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b63      	ldr	r3, [pc, #396]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0b8      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d020      	beq.n	8002cae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c78:	4b59      	ldr	r3, [pc, #356]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4a58      	ldr	r2, [pc, #352]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c90:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4a52      	ldr	r2, [pc, #328]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9c:	4b50      	ldr	r3, [pc, #320]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	494d      	ldr	r1, [pc, #308]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d040      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d115      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e07f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cda:	4b41      	ldr	r3, [pc, #260]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e073      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cea:	4b3d      	ldr	r3, [pc, #244]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e06b      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfa:	4b39      	ldr	r3, [pc, #228]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f023 0203 	bic.w	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	4936      	ldr	r1, [pc, #216]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d0c:	f7fe fce4 	bl	80016d8 <HAL_GetTick>
 8002d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d14:	f7fe fce0 	bl	80016d8 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e053      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 020c 	and.w	r2, r3, #12
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d1eb      	bne.n	8002d14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d3c:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d210      	bcs.n	8002d6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 0207 	bic.w	r2, r3, #7
 8002d52:	4922      	ldr	r1, [pc, #136]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e032      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4916      	ldr	r1, [pc, #88]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	490e      	ldr	r1, [pc, #56]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002daa:	f000 f821 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002dae:	4601      	mov	r1, r0
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dbc:	5cd3      	ldrb	r3, [r2, r3]
 8002dbe:	fa21 f303 	lsr.w	r3, r1, r3
 8002dc2:	4a09      	ldr	r2, [pc, #36]	; (8002de8 <HAL_RCC_ClockConfig+0x1cc>)
 8002dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_RCC_ClockConfig+0x1d0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe fc42 	bl	8001654 <HAL_InitTick>

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40022000 	.word	0x40022000
 8002de0:	40021000 	.word	0x40021000
 8002de4:	08004e78 	.word	0x08004e78
 8002de8:	20000008 	.word	0x20000008
 8002dec:	2000000c 	.word	0x2000000c

08002df0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df0:	b490      	push	{r4, r7}
 8002df2:	b08a      	sub	sp, #40	; 0x28
 8002df4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002df6:	4b2a      	ldr	r3, [pc, #168]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002df8:	1d3c      	adds	r4, r7, #4
 8002dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e00:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e1a:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d002      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x40>
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d003      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x46>
 8002e2e:	e02d      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e30:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e32:	623b      	str	r3, [r7, #32]
      break;
 8002e34:	e02d      	b.n	8002e92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	0c9b      	lsrs	r3, r3, #18
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e42:	4413      	add	r3, r2
 8002e44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d013      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e54:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	0c5b      	lsrs	r3, r3, #17
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e62:	4413      	add	r3, r2
 8002e64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	4a0f      	ldr	r2, [pc, #60]	; (8002eac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e6e:	fb02 f203 	mul.w	r2, r2, r3
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	e004      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	4a0c      	ldr	r2, [pc, #48]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e80:	fb02 f303 	mul.w	r3, r2, r3
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	623b      	str	r3, [r7, #32]
      break;
 8002e8a:	e002      	b.n	8002e92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e8c:	4b07      	ldr	r3, [pc, #28]	; (8002eac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e8e:	623b      	str	r3, [r7, #32]
      break;
 8002e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e92:	6a3b      	ldr	r3, [r7, #32]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3728      	adds	r7, #40	; 0x28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc90      	pop	{r4, r7}
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	08004108 	.word	0x08004108
 8002ea4:	08004118 	.word	0x08004118
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	007a1200 	.word	0x007a1200
 8002eb0:	003d0900 	.word	0x003d0900

08002eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb8:	4b02      	ldr	r3, [pc, #8]	; (8002ec4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr
 8002ec4:	20000008 	.word	0x20000008

08002ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ecc:	f7ff fff2 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4601      	mov	r1, r0
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4a03      	ldr	r2, [pc, #12]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ede:	5cd3      	ldrb	r3, [r2, r3]
 8002ee0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	08004e88 	.word	0x08004e88

08002ef0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <RCC_Delay+0x34>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <RCC_Delay+0x38>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	0a5b      	lsrs	r3, r3, #9
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	fb02 f303 	mul.w	r3, r2, r3
 8002f0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f0c:	bf00      	nop
  }
  while (Delay --);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1e5a      	subs	r2, r3, #1
 8002f12:	60fa      	str	r2, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f9      	bne.n	8002f0c <RCC_Delay+0x1c>
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000008 	.word	0x20000008
 8002f28:	10624dd3 	.word	0x10624dd3

08002f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e041      	b.n	8002fc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fe f8f6 	bl	8001144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3304      	adds	r3, #4
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	f000 fa92 	bl	8003494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d001      	beq.n	8002fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e03a      	b.n	800305a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a18      	ldr	r2, [pc, #96]	; (8003064 <HAL_TIM_Base_Start_IT+0x98>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00e      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x58>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300e:	d009      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x58>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <HAL_TIM_Base_Start_IT+0x9c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x58>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a13      	ldr	r2, [pc, #76]	; (800306c <HAL_TIM_Base_Start_IT+0xa0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d111      	bne.n	8003048 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b06      	cmp	r3, #6
 8003034:	d010      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0201 	orr.w	r2, r2, #1
 8003044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003046:	e007      	b.n	8003058 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40000400 	.word	0x40000400
 800306c:	40000800 	.word	0x40000800

08003070 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6a1a      	ldr	r2, [r3, #32]
 800308e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10f      	bne.n	80030b8 <HAL_TIM_Base_Stop_IT+0x48>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6a1a      	ldr	r2, [r3, #32]
 800309e:	f240 4344 	movw	r3, #1092	; 0x444
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d107      	bne.n	80030b8 <HAL_TIM_Base_Stop_IT+0x48>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d122      	bne.n	8003128 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d11b      	bne.n	8003128 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0202 	mvn.w	r2, #2
 80030f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f9a4 	bl	800345c <HAL_TIM_IC_CaptureCallback>
 8003114:	e005      	b.n	8003122 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f997 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f9a6 	bl	800346e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b04      	cmp	r3, #4
 8003134:	d122      	bne.n	800317c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b04      	cmp	r3, #4
 8003142:	d11b      	bne.n	800317c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0204 	mvn.w	r2, #4
 800314c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2202      	movs	r2, #2
 8003152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f97a 	bl	800345c <HAL_TIM_IC_CaptureCallback>
 8003168:	e005      	b.n	8003176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f96d 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f97c 	bl	800346e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b08      	cmp	r3, #8
 8003188:	d122      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b08      	cmp	r3, #8
 8003196:	d11b      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0208 	mvn.w	r2, #8
 80031a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2204      	movs	r2, #4
 80031a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f950 	bl	800345c <HAL_TIM_IC_CaptureCallback>
 80031bc:	e005      	b.n	80031ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f943 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f952 	bl	800346e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b10      	cmp	r3, #16
 80031dc:	d122      	bne.n	8003224 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d11b      	bne.n	8003224 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0210 	mvn.w	r2, #16
 80031f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2208      	movs	r2, #8
 80031fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f926 	bl	800345c <HAL_TIM_IC_CaptureCallback>
 8003210:	e005      	b.n	800321e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f919 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f928 	bl	800346e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b01      	cmp	r3, #1
 8003230:	d10e      	bne.n	8003250 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b01      	cmp	r3, #1
 800323e:	d107      	bne.n	8003250 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0201 	mvn.w	r2, #1
 8003248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fd fc02 	bl	8000a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325a:	2b80      	cmp	r3, #128	; 0x80
 800325c:	d10e      	bne.n	800327c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003268:	2b80      	cmp	r3, #128	; 0x80
 800326a:	d107      	bne.n	800327c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fa6b 	bl	8003752 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003286:	2b40      	cmp	r3, #64	; 0x40
 8003288:	d10e      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003294:	2b40      	cmp	r3, #64	; 0x40
 8003296:	d107      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8ec 	bl	8003480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d10e      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d107      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0220 	mvn.w	r2, #32
 80032cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fa36 	bl	8003740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_TIM_ConfigClockSource+0x18>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e0a6      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x166>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003312:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800331a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d067      	beq.n	80033fc <HAL_TIM_ConfigClockSource+0x120>
 800332c:	2b40      	cmp	r3, #64	; 0x40
 800332e:	d80b      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x6c>
 8003330:	2b10      	cmp	r3, #16
 8003332:	d073      	beq.n	800341c <HAL_TIM_ConfigClockSource+0x140>
 8003334:	2b10      	cmp	r3, #16
 8003336:	d802      	bhi.n	800333e <HAL_TIM_ConfigClockSource+0x62>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d06f      	beq.n	800341c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800333c:	e078      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800333e:	2b20      	cmp	r3, #32
 8003340:	d06c      	beq.n	800341c <HAL_TIM_ConfigClockSource+0x140>
 8003342:	2b30      	cmp	r3, #48	; 0x30
 8003344:	d06a      	beq.n	800341c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003346:	e073      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003348:	2b70      	cmp	r3, #112	; 0x70
 800334a:	d00d      	beq.n	8003368 <HAL_TIM_ConfigClockSource+0x8c>
 800334c:	2b70      	cmp	r3, #112	; 0x70
 800334e:	d804      	bhi.n	800335a <HAL_TIM_ConfigClockSource+0x7e>
 8003350:	2b50      	cmp	r3, #80	; 0x50
 8003352:	d033      	beq.n	80033bc <HAL_TIM_ConfigClockSource+0xe0>
 8003354:	2b60      	cmp	r3, #96	; 0x60
 8003356:	d041      	beq.n	80033dc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003358:	e06a      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800335a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335e:	d066      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x152>
 8003360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003364:	d017      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003366:	e063      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	6899      	ldr	r1, [r3, #8]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f000 f965 	bl	8003646 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800338a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	609a      	str	r2, [r3, #8]
      break;
 8003394:	e04c      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6899      	ldr	r1, [r3, #8]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f000 f94e 	bl	8003646 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033b8:	609a      	str	r2, [r3, #8]
      break;
 80033ba:	e039      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	461a      	mov	r2, r3
 80033ca:	f000 f8c5 	bl	8003558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2150      	movs	r1, #80	; 0x50
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f91c 	bl	8003612 <TIM_ITRx_SetConfig>
      break;
 80033da:	e029      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	461a      	mov	r2, r3
 80033ea:	f000 f8e3 	bl	80035b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2160      	movs	r1, #96	; 0x60
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f90c 	bl	8003612 <TIM_ITRx_SetConfig>
      break;
 80033fa:	e019      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	461a      	mov	r2, r3
 800340a:	f000 f8a5 	bl	8003558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2140      	movs	r1, #64	; 0x40
 8003414:	4618      	mov	r0, r3
 8003416:	f000 f8fc 	bl	8003612 <TIM_ITRx_SetConfig>
      break;
 800341a:	e009      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4619      	mov	r1, r3
 8003426:	4610      	mov	r0, r2
 8003428:	f000 f8f3 	bl	8003612 <TIM_ITRx_SetConfig>
        break;
 800342c:	e000      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800342e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr

0800346e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
	...

08003494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a29      	ldr	r2, [pc, #164]	; (800354c <TIM_Base_SetConfig+0xb8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00b      	beq.n	80034c4 <TIM_Base_SetConfig+0x30>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b2:	d007      	beq.n	80034c4 <TIM_Base_SetConfig+0x30>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a26      	ldr	r2, [pc, #152]	; (8003550 <TIM_Base_SetConfig+0xbc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d003      	beq.n	80034c4 <TIM_Base_SetConfig+0x30>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a25      	ldr	r2, [pc, #148]	; (8003554 <TIM_Base_SetConfig+0xc0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d108      	bne.n	80034d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a1c      	ldr	r2, [pc, #112]	; (800354c <TIM_Base_SetConfig+0xb8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00b      	beq.n	80034f6 <TIM_Base_SetConfig+0x62>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e4:	d007      	beq.n	80034f6 <TIM_Base_SetConfig+0x62>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a19      	ldr	r2, [pc, #100]	; (8003550 <TIM_Base_SetConfig+0xbc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d003      	beq.n	80034f6 <TIM_Base_SetConfig+0x62>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a18      	ldr	r2, [pc, #96]	; (8003554 <TIM_Base_SetConfig+0xc0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d108      	bne.n	8003508 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a07      	ldr	r2, [pc, #28]	; (800354c <TIM_Base_SetConfig+0xb8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d103      	bne.n	800353c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	615a      	str	r2, [r3, #20]
}
 8003542:	bf00      	nop
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800

08003558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f023 0201 	bic.w	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f023 030a 	bic.w	r3, r3, #10
 8003594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f023 0210 	bic.w	r2, r3, #16
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	031b      	lsls	r3, r3, #12
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	621a      	str	r2, [r3, #32]
}
 8003608:	bf00      	nop
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr

08003612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003612:	b480      	push	{r7}
 8003614:	b085      	sub	sp, #20
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	f043 0307 	orr.w	r3, r3, #7
 8003634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	609a      	str	r2, [r3, #8]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr

08003646 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003646:	b480      	push	{r7}
 8003648:	b087      	sub	sp, #28
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003660:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	021a      	lsls	r2, r3, #8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	431a      	orrs	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4313      	orrs	r3, r2
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	609a      	str	r2, [r3, #8]
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003698:	2302      	movs	r3, #2
 800369a:	e046      	b.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a16      	ldr	r2, [pc, #88]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00e      	beq.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e8:	d009      	beq.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a12      	ldr	r2, [pc, #72]	; (8003738 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a10      	ldr	r2, [pc, #64]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d10c      	bne.n	8003718 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	4313      	orrs	r3, r2
 800370e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr
 8003734:	40012c00 	.word	0x40012c00
 8003738:	40000400 	.word	0x40000400
 800373c:	40000800 	.word	0x40000800

08003740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <__errno>:
 8003764:	4b01      	ldr	r3, [pc, #4]	; (800376c <__errno+0x8>)
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	20000014 	.word	0x20000014

08003770 <__libc_init_array>:
 8003770:	b570      	push	{r4, r5, r6, lr}
 8003772:	2500      	movs	r5, #0
 8003774:	4e0c      	ldr	r6, [pc, #48]	; (80037a8 <__libc_init_array+0x38>)
 8003776:	4c0d      	ldr	r4, [pc, #52]	; (80037ac <__libc_init_array+0x3c>)
 8003778:	1ba4      	subs	r4, r4, r6
 800377a:	10a4      	asrs	r4, r4, #2
 800377c:	42a5      	cmp	r5, r4
 800377e:	d109      	bne.n	8003794 <__libc_init_array+0x24>
 8003780:	f000 fc34 	bl	8003fec <_init>
 8003784:	2500      	movs	r5, #0
 8003786:	4e0a      	ldr	r6, [pc, #40]	; (80037b0 <__libc_init_array+0x40>)
 8003788:	4c0a      	ldr	r4, [pc, #40]	; (80037b4 <__libc_init_array+0x44>)
 800378a:	1ba4      	subs	r4, r4, r6
 800378c:	10a4      	asrs	r4, r4, #2
 800378e:	42a5      	cmp	r5, r4
 8003790:	d105      	bne.n	800379e <__libc_init_array+0x2e>
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003798:	4798      	blx	r3
 800379a:	3501      	adds	r5, #1
 800379c:	e7ee      	b.n	800377c <__libc_init_array+0xc>
 800379e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037a2:	4798      	blx	r3
 80037a4:	3501      	adds	r5, #1
 80037a6:	e7f2      	b.n	800378e <__libc_init_array+0x1e>
 80037a8:	08004ec4 	.word	0x08004ec4
 80037ac:	08004ec4 	.word	0x08004ec4
 80037b0:	08004ec4 	.word	0x08004ec4
 80037b4:	08004ec8 	.word	0x08004ec8

080037b8 <memcpy>:
 80037b8:	b510      	push	{r4, lr}
 80037ba:	1e43      	subs	r3, r0, #1
 80037bc:	440a      	add	r2, r1
 80037be:	4291      	cmp	r1, r2
 80037c0:	d100      	bne.n	80037c4 <memcpy+0xc>
 80037c2:	bd10      	pop	{r4, pc}
 80037c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037cc:	e7f7      	b.n	80037be <memcpy+0x6>

080037ce <memmove>:
 80037ce:	4288      	cmp	r0, r1
 80037d0:	b510      	push	{r4, lr}
 80037d2:	eb01 0302 	add.w	r3, r1, r2
 80037d6:	d807      	bhi.n	80037e8 <memmove+0x1a>
 80037d8:	1e42      	subs	r2, r0, #1
 80037da:	4299      	cmp	r1, r3
 80037dc:	d00a      	beq.n	80037f4 <memmove+0x26>
 80037de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80037e6:	e7f8      	b.n	80037da <memmove+0xc>
 80037e8:	4283      	cmp	r3, r0
 80037ea:	d9f5      	bls.n	80037d8 <memmove+0xa>
 80037ec:	1881      	adds	r1, r0, r2
 80037ee:	1ad2      	subs	r2, r2, r3
 80037f0:	42d3      	cmn	r3, r2
 80037f2:	d100      	bne.n	80037f6 <memmove+0x28>
 80037f4:	bd10      	pop	{r4, pc}
 80037f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80037fe:	e7f7      	b.n	80037f0 <memmove+0x22>

08003800 <memset>:
 8003800:	4603      	mov	r3, r0
 8003802:	4402      	add	r2, r0
 8003804:	4293      	cmp	r3, r2
 8003806:	d100      	bne.n	800380a <memset+0xa>
 8003808:	4770      	bx	lr
 800380a:	f803 1b01 	strb.w	r1, [r3], #1
 800380e:	e7f9      	b.n	8003804 <memset+0x4>

08003810 <siprintf>:
 8003810:	b40e      	push	{r1, r2, r3}
 8003812:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003816:	b500      	push	{lr}
 8003818:	b09c      	sub	sp, #112	; 0x70
 800381a:	ab1d      	add	r3, sp, #116	; 0x74
 800381c:	9002      	str	r0, [sp, #8]
 800381e:	9006      	str	r0, [sp, #24]
 8003820:	9107      	str	r1, [sp, #28]
 8003822:	9104      	str	r1, [sp, #16]
 8003824:	4808      	ldr	r0, [pc, #32]	; (8003848 <siprintf+0x38>)
 8003826:	4909      	ldr	r1, [pc, #36]	; (800384c <siprintf+0x3c>)
 8003828:	f853 2b04 	ldr.w	r2, [r3], #4
 800382c:	9105      	str	r1, [sp, #20]
 800382e:	6800      	ldr	r0, [r0, #0]
 8003830:	a902      	add	r1, sp, #8
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	f000 f866 	bl	8003904 <_svfiprintf_r>
 8003838:	2200      	movs	r2, #0
 800383a:	9b02      	ldr	r3, [sp, #8]
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	b01c      	add	sp, #112	; 0x70
 8003840:	f85d eb04 	ldr.w	lr, [sp], #4
 8003844:	b003      	add	sp, #12
 8003846:	4770      	bx	lr
 8003848:	20000014 	.word	0x20000014
 800384c:	ffff0208 	.word	0xffff0208

08003850 <__ssputs_r>:
 8003850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003854:	688e      	ldr	r6, [r1, #8]
 8003856:	4682      	mov	sl, r0
 8003858:	429e      	cmp	r6, r3
 800385a:	460c      	mov	r4, r1
 800385c:	4690      	mov	r8, r2
 800385e:	4699      	mov	r9, r3
 8003860:	d837      	bhi.n	80038d2 <__ssputs_r+0x82>
 8003862:	898a      	ldrh	r2, [r1, #12]
 8003864:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003868:	d031      	beq.n	80038ce <__ssputs_r+0x7e>
 800386a:	2302      	movs	r3, #2
 800386c:	6825      	ldr	r5, [r4, #0]
 800386e:	6909      	ldr	r1, [r1, #16]
 8003870:	1a6f      	subs	r7, r5, r1
 8003872:	6965      	ldr	r5, [r4, #20]
 8003874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003878:	fb95 f5f3 	sdiv	r5, r5, r3
 800387c:	f109 0301 	add.w	r3, r9, #1
 8003880:	443b      	add	r3, r7
 8003882:	429d      	cmp	r5, r3
 8003884:	bf38      	it	cc
 8003886:	461d      	movcc	r5, r3
 8003888:	0553      	lsls	r3, r2, #21
 800388a:	d530      	bpl.n	80038ee <__ssputs_r+0x9e>
 800388c:	4629      	mov	r1, r5
 800388e:	f000 fb13 	bl	8003eb8 <_malloc_r>
 8003892:	4606      	mov	r6, r0
 8003894:	b950      	cbnz	r0, 80038ac <__ssputs_r+0x5c>
 8003896:	230c      	movs	r3, #12
 8003898:	f04f 30ff 	mov.w	r0, #4294967295
 800389c:	f8ca 3000 	str.w	r3, [sl]
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a6:	81a3      	strh	r3, [r4, #12]
 80038a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ac:	463a      	mov	r2, r7
 80038ae:	6921      	ldr	r1, [r4, #16]
 80038b0:	f7ff ff82 	bl	80037b8 <memcpy>
 80038b4:	89a3      	ldrh	r3, [r4, #12]
 80038b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038be:	81a3      	strh	r3, [r4, #12]
 80038c0:	6126      	str	r6, [r4, #16]
 80038c2:	443e      	add	r6, r7
 80038c4:	6026      	str	r6, [r4, #0]
 80038c6:	464e      	mov	r6, r9
 80038c8:	6165      	str	r5, [r4, #20]
 80038ca:	1bed      	subs	r5, r5, r7
 80038cc:	60a5      	str	r5, [r4, #8]
 80038ce:	454e      	cmp	r6, r9
 80038d0:	d900      	bls.n	80038d4 <__ssputs_r+0x84>
 80038d2:	464e      	mov	r6, r9
 80038d4:	4632      	mov	r2, r6
 80038d6:	4641      	mov	r1, r8
 80038d8:	6820      	ldr	r0, [r4, #0]
 80038da:	f7ff ff78 	bl	80037ce <memmove>
 80038de:	68a3      	ldr	r3, [r4, #8]
 80038e0:	2000      	movs	r0, #0
 80038e2:	1b9b      	subs	r3, r3, r6
 80038e4:	60a3      	str	r3, [r4, #8]
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	441e      	add	r6, r3
 80038ea:	6026      	str	r6, [r4, #0]
 80038ec:	e7dc      	b.n	80038a8 <__ssputs_r+0x58>
 80038ee:	462a      	mov	r2, r5
 80038f0:	f000 fb3c 	bl	8003f6c <_realloc_r>
 80038f4:	4606      	mov	r6, r0
 80038f6:	2800      	cmp	r0, #0
 80038f8:	d1e2      	bne.n	80038c0 <__ssputs_r+0x70>
 80038fa:	6921      	ldr	r1, [r4, #16]
 80038fc:	4650      	mov	r0, sl
 80038fe:	f000 fa8f 	bl	8003e20 <_free_r>
 8003902:	e7c8      	b.n	8003896 <__ssputs_r+0x46>

08003904 <_svfiprintf_r>:
 8003904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003908:	461d      	mov	r5, r3
 800390a:	898b      	ldrh	r3, [r1, #12]
 800390c:	b09d      	sub	sp, #116	; 0x74
 800390e:	061f      	lsls	r7, r3, #24
 8003910:	4680      	mov	r8, r0
 8003912:	460c      	mov	r4, r1
 8003914:	4616      	mov	r6, r2
 8003916:	d50f      	bpl.n	8003938 <_svfiprintf_r+0x34>
 8003918:	690b      	ldr	r3, [r1, #16]
 800391a:	b96b      	cbnz	r3, 8003938 <_svfiprintf_r+0x34>
 800391c:	2140      	movs	r1, #64	; 0x40
 800391e:	f000 facb 	bl	8003eb8 <_malloc_r>
 8003922:	6020      	str	r0, [r4, #0]
 8003924:	6120      	str	r0, [r4, #16]
 8003926:	b928      	cbnz	r0, 8003934 <_svfiprintf_r+0x30>
 8003928:	230c      	movs	r3, #12
 800392a:	f8c8 3000 	str.w	r3, [r8]
 800392e:	f04f 30ff 	mov.w	r0, #4294967295
 8003932:	e0c8      	b.n	8003ac6 <_svfiprintf_r+0x1c2>
 8003934:	2340      	movs	r3, #64	; 0x40
 8003936:	6163      	str	r3, [r4, #20]
 8003938:	2300      	movs	r3, #0
 800393a:	9309      	str	r3, [sp, #36]	; 0x24
 800393c:	2320      	movs	r3, #32
 800393e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003942:	2330      	movs	r3, #48	; 0x30
 8003944:	f04f 0b01 	mov.w	fp, #1
 8003948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800394c:	9503      	str	r5, [sp, #12]
 800394e:	4637      	mov	r7, r6
 8003950:	463d      	mov	r5, r7
 8003952:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003956:	b10b      	cbz	r3, 800395c <_svfiprintf_r+0x58>
 8003958:	2b25      	cmp	r3, #37	; 0x25
 800395a:	d13e      	bne.n	80039da <_svfiprintf_r+0xd6>
 800395c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003960:	d00b      	beq.n	800397a <_svfiprintf_r+0x76>
 8003962:	4653      	mov	r3, sl
 8003964:	4632      	mov	r2, r6
 8003966:	4621      	mov	r1, r4
 8003968:	4640      	mov	r0, r8
 800396a:	f7ff ff71 	bl	8003850 <__ssputs_r>
 800396e:	3001      	adds	r0, #1
 8003970:	f000 80a4 	beq.w	8003abc <_svfiprintf_r+0x1b8>
 8003974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003976:	4453      	add	r3, sl
 8003978:	9309      	str	r3, [sp, #36]	; 0x24
 800397a:	783b      	ldrb	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 809d 	beq.w	8003abc <_svfiprintf_r+0x1b8>
 8003982:	2300      	movs	r3, #0
 8003984:	f04f 32ff 	mov.w	r2, #4294967295
 8003988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800398c:	9304      	str	r3, [sp, #16]
 800398e:	9307      	str	r3, [sp, #28]
 8003990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003994:	931a      	str	r3, [sp, #104]	; 0x68
 8003996:	462f      	mov	r7, r5
 8003998:	2205      	movs	r2, #5
 800399a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800399e:	4850      	ldr	r0, [pc, #320]	; (8003ae0 <_svfiprintf_r+0x1dc>)
 80039a0:	f000 fa30 	bl	8003e04 <memchr>
 80039a4:	9b04      	ldr	r3, [sp, #16]
 80039a6:	b9d0      	cbnz	r0, 80039de <_svfiprintf_r+0xda>
 80039a8:	06d9      	lsls	r1, r3, #27
 80039aa:	bf44      	itt	mi
 80039ac:	2220      	movmi	r2, #32
 80039ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039b2:	071a      	lsls	r2, r3, #28
 80039b4:	bf44      	itt	mi
 80039b6:	222b      	movmi	r2, #43	; 0x2b
 80039b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039bc:	782a      	ldrb	r2, [r5, #0]
 80039be:	2a2a      	cmp	r2, #42	; 0x2a
 80039c0:	d015      	beq.n	80039ee <_svfiprintf_r+0xea>
 80039c2:	462f      	mov	r7, r5
 80039c4:	2000      	movs	r0, #0
 80039c6:	250a      	movs	r5, #10
 80039c8:	9a07      	ldr	r2, [sp, #28]
 80039ca:	4639      	mov	r1, r7
 80039cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039d0:	3b30      	subs	r3, #48	; 0x30
 80039d2:	2b09      	cmp	r3, #9
 80039d4:	d94d      	bls.n	8003a72 <_svfiprintf_r+0x16e>
 80039d6:	b1b8      	cbz	r0, 8003a08 <_svfiprintf_r+0x104>
 80039d8:	e00f      	b.n	80039fa <_svfiprintf_r+0xf6>
 80039da:	462f      	mov	r7, r5
 80039dc:	e7b8      	b.n	8003950 <_svfiprintf_r+0x4c>
 80039de:	4a40      	ldr	r2, [pc, #256]	; (8003ae0 <_svfiprintf_r+0x1dc>)
 80039e0:	463d      	mov	r5, r7
 80039e2:	1a80      	subs	r0, r0, r2
 80039e4:	fa0b f000 	lsl.w	r0, fp, r0
 80039e8:	4318      	orrs	r0, r3
 80039ea:	9004      	str	r0, [sp, #16]
 80039ec:	e7d3      	b.n	8003996 <_svfiprintf_r+0x92>
 80039ee:	9a03      	ldr	r2, [sp, #12]
 80039f0:	1d11      	adds	r1, r2, #4
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	9103      	str	r1, [sp, #12]
 80039f6:	2a00      	cmp	r2, #0
 80039f8:	db01      	blt.n	80039fe <_svfiprintf_r+0xfa>
 80039fa:	9207      	str	r2, [sp, #28]
 80039fc:	e004      	b.n	8003a08 <_svfiprintf_r+0x104>
 80039fe:	4252      	negs	r2, r2
 8003a00:	f043 0302 	orr.w	r3, r3, #2
 8003a04:	9207      	str	r2, [sp, #28]
 8003a06:	9304      	str	r3, [sp, #16]
 8003a08:	783b      	ldrb	r3, [r7, #0]
 8003a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a0c:	d10c      	bne.n	8003a28 <_svfiprintf_r+0x124>
 8003a0e:	787b      	ldrb	r3, [r7, #1]
 8003a10:	2b2a      	cmp	r3, #42	; 0x2a
 8003a12:	d133      	bne.n	8003a7c <_svfiprintf_r+0x178>
 8003a14:	9b03      	ldr	r3, [sp, #12]
 8003a16:	3702      	adds	r7, #2
 8003a18:	1d1a      	adds	r2, r3, #4
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	9203      	str	r2, [sp, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	bfb8      	it	lt
 8003a22:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a26:	9305      	str	r3, [sp, #20]
 8003a28:	4d2e      	ldr	r5, [pc, #184]	; (8003ae4 <_svfiprintf_r+0x1e0>)
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	7839      	ldrb	r1, [r7, #0]
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f000 f9e8 	bl	8003e04 <memchr>
 8003a34:	b138      	cbz	r0, 8003a46 <_svfiprintf_r+0x142>
 8003a36:	2340      	movs	r3, #64	; 0x40
 8003a38:	1b40      	subs	r0, r0, r5
 8003a3a:	fa03 f000 	lsl.w	r0, r3, r0
 8003a3e:	9b04      	ldr	r3, [sp, #16]
 8003a40:	3701      	adds	r7, #1
 8003a42:	4303      	orrs	r3, r0
 8003a44:	9304      	str	r3, [sp, #16]
 8003a46:	7839      	ldrb	r1, [r7, #0]
 8003a48:	2206      	movs	r2, #6
 8003a4a:	4827      	ldr	r0, [pc, #156]	; (8003ae8 <_svfiprintf_r+0x1e4>)
 8003a4c:	1c7e      	adds	r6, r7, #1
 8003a4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a52:	f000 f9d7 	bl	8003e04 <memchr>
 8003a56:	2800      	cmp	r0, #0
 8003a58:	d038      	beq.n	8003acc <_svfiprintf_r+0x1c8>
 8003a5a:	4b24      	ldr	r3, [pc, #144]	; (8003aec <_svfiprintf_r+0x1e8>)
 8003a5c:	bb13      	cbnz	r3, 8003aa4 <_svfiprintf_r+0x1a0>
 8003a5e:	9b03      	ldr	r3, [sp, #12]
 8003a60:	3307      	adds	r3, #7
 8003a62:	f023 0307 	bic.w	r3, r3, #7
 8003a66:	3308      	adds	r3, #8
 8003a68:	9303      	str	r3, [sp, #12]
 8003a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a6c:	444b      	add	r3, r9
 8003a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a70:	e76d      	b.n	800394e <_svfiprintf_r+0x4a>
 8003a72:	fb05 3202 	mla	r2, r5, r2, r3
 8003a76:	2001      	movs	r0, #1
 8003a78:	460f      	mov	r7, r1
 8003a7a:	e7a6      	b.n	80039ca <_svfiprintf_r+0xc6>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	250a      	movs	r5, #10
 8003a80:	4619      	mov	r1, r3
 8003a82:	3701      	adds	r7, #1
 8003a84:	9305      	str	r3, [sp, #20]
 8003a86:	4638      	mov	r0, r7
 8003a88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a8c:	3a30      	subs	r2, #48	; 0x30
 8003a8e:	2a09      	cmp	r2, #9
 8003a90:	d903      	bls.n	8003a9a <_svfiprintf_r+0x196>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0c8      	beq.n	8003a28 <_svfiprintf_r+0x124>
 8003a96:	9105      	str	r1, [sp, #20]
 8003a98:	e7c6      	b.n	8003a28 <_svfiprintf_r+0x124>
 8003a9a:	fb05 2101 	mla	r1, r5, r1, r2
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	4607      	mov	r7, r0
 8003aa2:	e7f0      	b.n	8003a86 <_svfiprintf_r+0x182>
 8003aa4:	ab03      	add	r3, sp, #12
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	4622      	mov	r2, r4
 8003aaa:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <_svfiprintf_r+0x1ec>)
 8003aac:	a904      	add	r1, sp, #16
 8003aae:	4640      	mov	r0, r8
 8003ab0:	f3af 8000 	nop.w
 8003ab4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ab8:	4681      	mov	r9, r0
 8003aba:	d1d6      	bne.n	8003a6a <_svfiprintf_r+0x166>
 8003abc:	89a3      	ldrh	r3, [r4, #12]
 8003abe:	065b      	lsls	r3, r3, #25
 8003ac0:	f53f af35 	bmi.w	800392e <_svfiprintf_r+0x2a>
 8003ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ac6:	b01d      	add	sp, #116	; 0x74
 8003ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003acc:	ab03      	add	r3, sp, #12
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	4622      	mov	r2, r4
 8003ad2:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <_svfiprintf_r+0x1ec>)
 8003ad4:	a904      	add	r1, sp, #16
 8003ad6:	4640      	mov	r0, r8
 8003ad8:	f000 f882 	bl	8003be0 <_printf_i>
 8003adc:	e7ea      	b.n	8003ab4 <_svfiprintf_r+0x1b0>
 8003ade:	bf00      	nop
 8003ae0:	08004e90 	.word	0x08004e90
 8003ae4:	08004e96 	.word	0x08004e96
 8003ae8:	08004e9a 	.word	0x08004e9a
 8003aec:	00000000 	.word	0x00000000
 8003af0:	08003851 	.word	0x08003851

08003af4 <_printf_common>:
 8003af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003af8:	4691      	mov	r9, r2
 8003afa:	461f      	mov	r7, r3
 8003afc:	688a      	ldr	r2, [r1, #8]
 8003afe:	690b      	ldr	r3, [r1, #16]
 8003b00:	4606      	mov	r6, r0
 8003b02:	4293      	cmp	r3, r2
 8003b04:	bfb8      	it	lt
 8003b06:	4613      	movlt	r3, r2
 8003b08:	f8c9 3000 	str.w	r3, [r9]
 8003b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b10:	460c      	mov	r4, r1
 8003b12:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b16:	b112      	cbz	r2, 8003b1e <_printf_common+0x2a>
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f8c9 3000 	str.w	r3, [r9]
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	0699      	lsls	r1, r3, #26
 8003b22:	bf42      	ittt	mi
 8003b24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b28:	3302      	addmi	r3, #2
 8003b2a:	f8c9 3000 	strmi.w	r3, [r9]
 8003b2e:	6825      	ldr	r5, [r4, #0]
 8003b30:	f015 0506 	ands.w	r5, r5, #6
 8003b34:	d107      	bne.n	8003b46 <_printf_common+0x52>
 8003b36:	f104 0a19 	add.w	sl, r4, #25
 8003b3a:	68e3      	ldr	r3, [r4, #12]
 8003b3c:	f8d9 2000 	ldr.w	r2, [r9]
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	42ab      	cmp	r3, r5
 8003b44:	dc29      	bgt.n	8003b9a <_printf_common+0xa6>
 8003b46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b4a:	6822      	ldr	r2, [r4, #0]
 8003b4c:	3300      	adds	r3, #0
 8003b4e:	bf18      	it	ne
 8003b50:	2301      	movne	r3, #1
 8003b52:	0692      	lsls	r2, r2, #26
 8003b54:	d42e      	bmi.n	8003bb4 <_printf_common+0xc0>
 8003b56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b5a:	4639      	mov	r1, r7
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	47c0      	blx	r8
 8003b60:	3001      	adds	r0, #1
 8003b62:	d021      	beq.n	8003ba8 <_printf_common+0xb4>
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	68e5      	ldr	r5, [r4, #12]
 8003b68:	f003 0306 	and.w	r3, r3, #6
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	bf18      	it	ne
 8003b70:	2500      	movne	r5, #0
 8003b72:	f8d9 2000 	ldr.w	r2, [r9]
 8003b76:	f04f 0900 	mov.w	r9, #0
 8003b7a:	bf08      	it	eq
 8003b7c:	1aad      	subeq	r5, r5, r2
 8003b7e:	68a3      	ldr	r3, [r4, #8]
 8003b80:	6922      	ldr	r2, [r4, #16]
 8003b82:	bf08      	it	eq
 8003b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	bfc4      	itt	gt
 8003b8c:	1a9b      	subgt	r3, r3, r2
 8003b8e:	18ed      	addgt	r5, r5, r3
 8003b90:	341a      	adds	r4, #26
 8003b92:	454d      	cmp	r5, r9
 8003b94:	d11a      	bne.n	8003bcc <_printf_common+0xd8>
 8003b96:	2000      	movs	r0, #0
 8003b98:	e008      	b.n	8003bac <_printf_common+0xb8>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	4652      	mov	r2, sl
 8003b9e:	4639      	mov	r1, r7
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	47c0      	blx	r8
 8003ba4:	3001      	adds	r0, #1
 8003ba6:	d103      	bne.n	8003bb0 <_printf_common+0xbc>
 8003ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb0:	3501      	adds	r5, #1
 8003bb2:	e7c2      	b.n	8003b3a <_printf_common+0x46>
 8003bb4:	2030      	movs	r0, #48	; 0x30
 8003bb6:	18e1      	adds	r1, r4, r3
 8003bb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bc2:	4422      	add	r2, r4
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bca:	e7c4      	b.n	8003b56 <_printf_common+0x62>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	4622      	mov	r2, r4
 8003bd0:	4639      	mov	r1, r7
 8003bd2:	4630      	mov	r0, r6
 8003bd4:	47c0      	blx	r8
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	d0e6      	beq.n	8003ba8 <_printf_common+0xb4>
 8003bda:	f109 0901 	add.w	r9, r9, #1
 8003bde:	e7d8      	b.n	8003b92 <_printf_common+0x9e>

08003be0 <_printf_i>:
 8003be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003be4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003be8:	460c      	mov	r4, r1
 8003bea:	7e09      	ldrb	r1, [r1, #24]
 8003bec:	b085      	sub	sp, #20
 8003bee:	296e      	cmp	r1, #110	; 0x6e
 8003bf0:	4617      	mov	r7, r2
 8003bf2:	4606      	mov	r6, r0
 8003bf4:	4698      	mov	r8, r3
 8003bf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bf8:	f000 80b3 	beq.w	8003d62 <_printf_i+0x182>
 8003bfc:	d822      	bhi.n	8003c44 <_printf_i+0x64>
 8003bfe:	2963      	cmp	r1, #99	; 0x63
 8003c00:	d036      	beq.n	8003c70 <_printf_i+0x90>
 8003c02:	d80a      	bhi.n	8003c1a <_printf_i+0x3a>
 8003c04:	2900      	cmp	r1, #0
 8003c06:	f000 80b9 	beq.w	8003d7c <_printf_i+0x19c>
 8003c0a:	2958      	cmp	r1, #88	; 0x58
 8003c0c:	f000 8083 	beq.w	8003d16 <_printf_i+0x136>
 8003c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c18:	e032      	b.n	8003c80 <_printf_i+0xa0>
 8003c1a:	2964      	cmp	r1, #100	; 0x64
 8003c1c:	d001      	beq.n	8003c22 <_printf_i+0x42>
 8003c1e:	2969      	cmp	r1, #105	; 0x69
 8003c20:	d1f6      	bne.n	8003c10 <_printf_i+0x30>
 8003c22:	6820      	ldr	r0, [r4, #0]
 8003c24:	6813      	ldr	r3, [r2, #0]
 8003c26:	0605      	lsls	r5, r0, #24
 8003c28:	f103 0104 	add.w	r1, r3, #4
 8003c2c:	d52a      	bpl.n	8003c84 <_printf_i+0xa4>
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6011      	str	r1, [r2, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	da03      	bge.n	8003c3e <_printf_i+0x5e>
 8003c36:	222d      	movs	r2, #45	; 0x2d
 8003c38:	425b      	negs	r3, r3
 8003c3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c3e:	486f      	ldr	r0, [pc, #444]	; (8003dfc <_printf_i+0x21c>)
 8003c40:	220a      	movs	r2, #10
 8003c42:	e039      	b.n	8003cb8 <_printf_i+0xd8>
 8003c44:	2973      	cmp	r1, #115	; 0x73
 8003c46:	f000 809d 	beq.w	8003d84 <_printf_i+0x1a4>
 8003c4a:	d808      	bhi.n	8003c5e <_printf_i+0x7e>
 8003c4c:	296f      	cmp	r1, #111	; 0x6f
 8003c4e:	d020      	beq.n	8003c92 <_printf_i+0xb2>
 8003c50:	2970      	cmp	r1, #112	; 0x70
 8003c52:	d1dd      	bne.n	8003c10 <_printf_i+0x30>
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	f043 0320 	orr.w	r3, r3, #32
 8003c5a:	6023      	str	r3, [r4, #0]
 8003c5c:	e003      	b.n	8003c66 <_printf_i+0x86>
 8003c5e:	2975      	cmp	r1, #117	; 0x75
 8003c60:	d017      	beq.n	8003c92 <_printf_i+0xb2>
 8003c62:	2978      	cmp	r1, #120	; 0x78
 8003c64:	d1d4      	bne.n	8003c10 <_printf_i+0x30>
 8003c66:	2378      	movs	r3, #120	; 0x78
 8003c68:	4865      	ldr	r0, [pc, #404]	; (8003e00 <_printf_i+0x220>)
 8003c6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c6e:	e055      	b.n	8003d1c <_printf_i+0x13c>
 8003c70:	6813      	ldr	r3, [r2, #0]
 8003c72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c76:	1d19      	adds	r1, r3, #4
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6011      	str	r1, [r2, #0]
 8003c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c80:	2301      	movs	r3, #1
 8003c82:	e08c      	b.n	8003d9e <_printf_i+0x1be>
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c8a:	6011      	str	r1, [r2, #0]
 8003c8c:	bf18      	it	ne
 8003c8e:	b21b      	sxthne	r3, r3
 8003c90:	e7cf      	b.n	8003c32 <_printf_i+0x52>
 8003c92:	6813      	ldr	r3, [r2, #0]
 8003c94:	6825      	ldr	r5, [r4, #0]
 8003c96:	1d18      	adds	r0, r3, #4
 8003c98:	6010      	str	r0, [r2, #0]
 8003c9a:	0628      	lsls	r0, r5, #24
 8003c9c:	d501      	bpl.n	8003ca2 <_printf_i+0xc2>
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	e002      	b.n	8003ca8 <_printf_i+0xc8>
 8003ca2:	0668      	lsls	r0, r5, #25
 8003ca4:	d5fb      	bpl.n	8003c9e <_printf_i+0xbe>
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	296f      	cmp	r1, #111	; 0x6f
 8003caa:	bf14      	ite	ne
 8003cac:	220a      	movne	r2, #10
 8003cae:	2208      	moveq	r2, #8
 8003cb0:	4852      	ldr	r0, [pc, #328]	; (8003dfc <_printf_i+0x21c>)
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cb8:	6865      	ldr	r5, [r4, #4]
 8003cba:	2d00      	cmp	r5, #0
 8003cbc:	60a5      	str	r5, [r4, #8]
 8003cbe:	f2c0 8095 	blt.w	8003dec <_printf_i+0x20c>
 8003cc2:	6821      	ldr	r1, [r4, #0]
 8003cc4:	f021 0104 	bic.w	r1, r1, #4
 8003cc8:	6021      	str	r1, [r4, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d13d      	bne.n	8003d4a <_printf_i+0x16a>
 8003cce:	2d00      	cmp	r5, #0
 8003cd0:	f040 808e 	bne.w	8003df0 <_printf_i+0x210>
 8003cd4:	4665      	mov	r5, ip
 8003cd6:	2a08      	cmp	r2, #8
 8003cd8:	d10b      	bne.n	8003cf2 <_printf_i+0x112>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	07db      	lsls	r3, r3, #31
 8003cde:	d508      	bpl.n	8003cf2 <_printf_i+0x112>
 8003ce0:	6923      	ldr	r3, [r4, #16]
 8003ce2:	6862      	ldr	r2, [r4, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	bfde      	ittt	le
 8003ce8:	2330      	movle	r3, #48	; 0x30
 8003cea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cf2:	ebac 0305 	sub.w	r3, ip, r5
 8003cf6:	6123      	str	r3, [r4, #16]
 8003cf8:	f8cd 8000 	str.w	r8, [sp]
 8003cfc:	463b      	mov	r3, r7
 8003cfe:	aa03      	add	r2, sp, #12
 8003d00:	4621      	mov	r1, r4
 8003d02:	4630      	mov	r0, r6
 8003d04:	f7ff fef6 	bl	8003af4 <_printf_common>
 8003d08:	3001      	adds	r0, #1
 8003d0a:	d14d      	bne.n	8003da8 <_printf_i+0x1c8>
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d10:	b005      	add	sp, #20
 8003d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d16:	4839      	ldr	r0, [pc, #228]	; (8003dfc <_printf_i+0x21c>)
 8003d18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d1c:	6813      	ldr	r3, [r2, #0]
 8003d1e:	6821      	ldr	r1, [r4, #0]
 8003d20:	1d1d      	adds	r5, r3, #4
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6015      	str	r5, [r2, #0]
 8003d26:	060a      	lsls	r2, r1, #24
 8003d28:	d50b      	bpl.n	8003d42 <_printf_i+0x162>
 8003d2a:	07ca      	lsls	r2, r1, #31
 8003d2c:	bf44      	itt	mi
 8003d2e:	f041 0120 	orrmi.w	r1, r1, #32
 8003d32:	6021      	strmi	r1, [r4, #0]
 8003d34:	b91b      	cbnz	r3, 8003d3e <_printf_i+0x15e>
 8003d36:	6822      	ldr	r2, [r4, #0]
 8003d38:	f022 0220 	bic.w	r2, r2, #32
 8003d3c:	6022      	str	r2, [r4, #0]
 8003d3e:	2210      	movs	r2, #16
 8003d40:	e7b7      	b.n	8003cb2 <_printf_i+0xd2>
 8003d42:	064d      	lsls	r5, r1, #25
 8003d44:	bf48      	it	mi
 8003d46:	b29b      	uxthmi	r3, r3
 8003d48:	e7ef      	b.n	8003d2a <_printf_i+0x14a>
 8003d4a:	4665      	mov	r5, ip
 8003d4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d50:	fb02 3311 	mls	r3, r2, r1, r3
 8003d54:	5cc3      	ldrb	r3, [r0, r3]
 8003d56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	d1f5      	bne.n	8003d4c <_printf_i+0x16c>
 8003d60:	e7b9      	b.n	8003cd6 <_printf_i+0xf6>
 8003d62:	6813      	ldr	r3, [r2, #0]
 8003d64:	6825      	ldr	r5, [r4, #0]
 8003d66:	1d18      	adds	r0, r3, #4
 8003d68:	6961      	ldr	r1, [r4, #20]
 8003d6a:	6010      	str	r0, [r2, #0]
 8003d6c:	0628      	lsls	r0, r5, #24
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	d501      	bpl.n	8003d76 <_printf_i+0x196>
 8003d72:	6019      	str	r1, [r3, #0]
 8003d74:	e002      	b.n	8003d7c <_printf_i+0x19c>
 8003d76:	066a      	lsls	r2, r5, #25
 8003d78:	d5fb      	bpl.n	8003d72 <_printf_i+0x192>
 8003d7a:	8019      	strh	r1, [r3, #0]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	4665      	mov	r5, ip
 8003d80:	6123      	str	r3, [r4, #16]
 8003d82:	e7b9      	b.n	8003cf8 <_printf_i+0x118>
 8003d84:	6813      	ldr	r3, [r2, #0]
 8003d86:	1d19      	adds	r1, r3, #4
 8003d88:	6011      	str	r1, [r2, #0]
 8003d8a:	681d      	ldr	r5, [r3, #0]
 8003d8c:	6862      	ldr	r2, [r4, #4]
 8003d8e:	2100      	movs	r1, #0
 8003d90:	4628      	mov	r0, r5
 8003d92:	f000 f837 	bl	8003e04 <memchr>
 8003d96:	b108      	cbz	r0, 8003d9c <_printf_i+0x1bc>
 8003d98:	1b40      	subs	r0, r0, r5
 8003d9a:	6060      	str	r0, [r4, #4]
 8003d9c:	6863      	ldr	r3, [r4, #4]
 8003d9e:	6123      	str	r3, [r4, #16]
 8003da0:	2300      	movs	r3, #0
 8003da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003da6:	e7a7      	b.n	8003cf8 <_printf_i+0x118>
 8003da8:	6923      	ldr	r3, [r4, #16]
 8003daa:	462a      	mov	r2, r5
 8003dac:	4639      	mov	r1, r7
 8003dae:	4630      	mov	r0, r6
 8003db0:	47c0      	blx	r8
 8003db2:	3001      	adds	r0, #1
 8003db4:	d0aa      	beq.n	8003d0c <_printf_i+0x12c>
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	079b      	lsls	r3, r3, #30
 8003dba:	d413      	bmi.n	8003de4 <_printf_i+0x204>
 8003dbc:	68e0      	ldr	r0, [r4, #12]
 8003dbe:	9b03      	ldr	r3, [sp, #12]
 8003dc0:	4298      	cmp	r0, r3
 8003dc2:	bfb8      	it	lt
 8003dc4:	4618      	movlt	r0, r3
 8003dc6:	e7a3      	b.n	8003d10 <_printf_i+0x130>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	464a      	mov	r2, r9
 8003dcc:	4639      	mov	r1, r7
 8003dce:	4630      	mov	r0, r6
 8003dd0:	47c0      	blx	r8
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	d09a      	beq.n	8003d0c <_printf_i+0x12c>
 8003dd6:	3501      	adds	r5, #1
 8003dd8:	68e3      	ldr	r3, [r4, #12]
 8003dda:	9a03      	ldr	r2, [sp, #12]
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	42ab      	cmp	r3, r5
 8003de0:	dcf2      	bgt.n	8003dc8 <_printf_i+0x1e8>
 8003de2:	e7eb      	b.n	8003dbc <_printf_i+0x1dc>
 8003de4:	2500      	movs	r5, #0
 8003de6:	f104 0919 	add.w	r9, r4, #25
 8003dea:	e7f5      	b.n	8003dd8 <_printf_i+0x1f8>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ac      	bne.n	8003d4a <_printf_i+0x16a>
 8003df0:	7803      	ldrb	r3, [r0, #0]
 8003df2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003df6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dfa:	e76c      	b.n	8003cd6 <_printf_i+0xf6>
 8003dfc:	08004ea1 	.word	0x08004ea1
 8003e00:	08004eb2 	.word	0x08004eb2

08003e04 <memchr>:
 8003e04:	b510      	push	{r4, lr}
 8003e06:	b2c9      	uxtb	r1, r1
 8003e08:	4402      	add	r2, r0
 8003e0a:	4290      	cmp	r0, r2
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	d101      	bne.n	8003e14 <memchr+0x10>
 8003e10:	2300      	movs	r3, #0
 8003e12:	e003      	b.n	8003e1c <memchr+0x18>
 8003e14:	781c      	ldrb	r4, [r3, #0]
 8003e16:	3001      	adds	r0, #1
 8003e18:	428c      	cmp	r4, r1
 8003e1a:	d1f6      	bne.n	8003e0a <memchr+0x6>
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd10      	pop	{r4, pc}

08003e20 <_free_r>:
 8003e20:	b538      	push	{r3, r4, r5, lr}
 8003e22:	4605      	mov	r5, r0
 8003e24:	2900      	cmp	r1, #0
 8003e26:	d043      	beq.n	8003eb0 <_free_r+0x90>
 8003e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e2c:	1f0c      	subs	r4, r1, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	bfb8      	it	lt
 8003e32:	18e4      	addlt	r4, r4, r3
 8003e34:	f000 f8d0 	bl	8003fd8 <__malloc_lock>
 8003e38:	4a1e      	ldr	r2, [pc, #120]	; (8003eb4 <_free_r+0x94>)
 8003e3a:	6813      	ldr	r3, [r2, #0]
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	b933      	cbnz	r3, 8003e4e <_free_r+0x2e>
 8003e40:	6063      	str	r3, [r4, #4]
 8003e42:	6014      	str	r4, [r2, #0]
 8003e44:	4628      	mov	r0, r5
 8003e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e4a:	f000 b8c6 	b.w	8003fda <__malloc_unlock>
 8003e4e:	42a3      	cmp	r3, r4
 8003e50:	d90b      	bls.n	8003e6a <_free_r+0x4a>
 8003e52:	6821      	ldr	r1, [r4, #0]
 8003e54:	1862      	adds	r2, r4, r1
 8003e56:	4293      	cmp	r3, r2
 8003e58:	bf01      	itttt	eq
 8003e5a:	681a      	ldreq	r2, [r3, #0]
 8003e5c:	685b      	ldreq	r3, [r3, #4]
 8003e5e:	1852      	addeq	r2, r2, r1
 8003e60:	6022      	streq	r2, [r4, #0]
 8003e62:	6063      	str	r3, [r4, #4]
 8003e64:	6004      	str	r4, [r0, #0]
 8003e66:	e7ed      	b.n	8003e44 <_free_r+0x24>
 8003e68:	4613      	mov	r3, r2
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	b10a      	cbz	r2, 8003e72 <_free_r+0x52>
 8003e6e:	42a2      	cmp	r2, r4
 8003e70:	d9fa      	bls.n	8003e68 <_free_r+0x48>
 8003e72:	6819      	ldr	r1, [r3, #0]
 8003e74:	1858      	adds	r0, r3, r1
 8003e76:	42a0      	cmp	r0, r4
 8003e78:	d10b      	bne.n	8003e92 <_free_r+0x72>
 8003e7a:	6820      	ldr	r0, [r4, #0]
 8003e7c:	4401      	add	r1, r0
 8003e7e:	1858      	adds	r0, r3, r1
 8003e80:	4282      	cmp	r2, r0
 8003e82:	6019      	str	r1, [r3, #0]
 8003e84:	d1de      	bne.n	8003e44 <_free_r+0x24>
 8003e86:	6810      	ldr	r0, [r2, #0]
 8003e88:	6852      	ldr	r2, [r2, #4]
 8003e8a:	4401      	add	r1, r0
 8003e8c:	6019      	str	r1, [r3, #0]
 8003e8e:	605a      	str	r2, [r3, #4]
 8003e90:	e7d8      	b.n	8003e44 <_free_r+0x24>
 8003e92:	d902      	bls.n	8003e9a <_free_r+0x7a>
 8003e94:	230c      	movs	r3, #12
 8003e96:	602b      	str	r3, [r5, #0]
 8003e98:	e7d4      	b.n	8003e44 <_free_r+0x24>
 8003e9a:	6820      	ldr	r0, [r4, #0]
 8003e9c:	1821      	adds	r1, r4, r0
 8003e9e:	428a      	cmp	r2, r1
 8003ea0:	bf01      	itttt	eq
 8003ea2:	6811      	ldreq	r1, [r2, #0]
 8003ea4:	6852      	ldreq	r2, [r2, #4]
 8003ea6:	1809      	addeq	r1, r1, r0
 8003ea8:	6021      	streq	r1, [r4, #0]
 8003eaa:	6062      	str	r2, [r4, #4]
 8003eac:	605c      	str	r4, [r3, #4]
 8003eae:	e7c9      	b.n	8003e44 <_free_r+0x24>
 8003eb0:	bd38      	pop	{r3, r4, r5, pc}
 8003eb2:	bf00      	nop
 8003eb4:	200004a0 	.word	0x200004a0

08003eb8 <_malloc_r>:
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	1ccd      	adds	r5, r1, #3
 8003ebc:	f025 0503 	bic.w	r5, r5, #3
 8003ec0:	3508      	adds	r5, #8
 8003ec2:	2d0c      	cmp	r5, #12
 8003ec4:	bf38      	it	cc
 8003ec6:	250c      	movcc	r5, #12
 8003ec8:	2d00      	cmp	r5, #0
 8003eca:	4606      	mov	r6, r0
 8003ecc:	db01      	blt.n	8003ed2 <_malloc_r+0x1a>
 8003ece:	42a9      	cmp	r1, r5
 8003ed0:	d903      	bls.n	8003eda <_malloc_r+0x22>
 8003ed2:	230c      	movs	r3, #12
 8003ed4:	6033      	str	r3, [r6, #0]
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	bd70      	pop	{r4, r5, r6, pc}
 8003eda:	f000 f87d 	bl	8003fd8 <__malloc_lock>
 8003ede:	4a21      	ldr	r2, [pc, #132]	; (8003f64 <_malloc_r+0xac>)
 8003ee0:	6814      	ldr	r4, [r2, #0]
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	b991      	cbnz	r1, 8003f0c <_malloc_r+0x54>
 8003ee6:	4c20      	ldr	r4, [pc, #128]	; (8003f68 <_malloc_r+0xb0>)
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	b91b      	cbnz	r3, 8003ef4 <_malloc_r+0x3c>
 8003eec:	4630      	mov	r0, r6
 8003eee:	f000 f863 	bl	8003fb8 <_sbrk_r>
 8003ef2:	6020      	str	r0, [r4, #0]
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	f000 f85e 	bl	8003fb8 <_sbrk_r>
 8003efc:	1c43      	adds	r3, r0, #1
 8003efe:	d124      	bne.n	8003f4a <_malloc_r+0x92>
 8003f00:	230c      	movs	r3, #12
 8003f02:	4630      	mov	r0, r6
 8003f04:	6033      	str	r3, [r6, #0]
 8003f06:	f000 f868 	bl	8003fda <__malloc_unlock>
 8003f0a:	e7e4      	b.n	8003ed6 <_malloc_r+0x1e>
 8003f0c:	680b      	ldr	r3, [r1, #0]
 8003f0e:	1b5b      	subs	r3, r3, r5
 8003f10:	d418      	bmi.n	8003f44 <_malloc_r+0x8c>
 8003f12:	2b0b      	cmp	r3, #11
 8003f14:	d90f      	bls.n	8003f36 <_malloc_r+0x7e>
 8003f16:	600b      	str	r3, [r1, #0]
 8003f18:	18cc      	adds	r4, r1, r3
 8003f1a:	50cd      	str	r5, [r1, r3]
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	f000 f85c 	bl	8003fda <__malloc_unlock>
 8003f22:	f104 000b 	add.w	r0, r4, #11
 8003f26:	1d23      	adds	r3, r4, #4
 8003f28:	f020 0007 	bic.w	r0, r0, #7
 8003f2c:	1ac3      	subs	r3, r0, r3
 8003f2e:	d0d3      	beq.n	8003ed8 <_malloc_r+0x20>
 8003f30:	425a      	negs	r2, r3
 8003f32:	50e2      	str	r2, [r4, r3]
 8003f34:	e7d0      	b.n	8003ed8 <_malloc_r+0x20>
 8003f36:	684b      	ldr	r3, [r1, #4]
 8003f38:	428c      	cmp	r4, r1
 8003f3a:	bf16      	itet	ne
 8003f3c:	6063      	strne	r3, [r4, #4]
 8003f3e:	6013      	streq	r3, [r2, #0]
 8003f40:	460c      	movne	r4, r1
 8003f42:	e7eb      	b.n	8003f1c <_malloc_r+0x64>
 8003f44:	460c      	mov	r4, r1
 8003f46:	6849      	ldr	r1, [r1, #4]
 8003f48:	e7cc      	b.n	8003ee4 <_malloc_r+0x2c>
 8003f4a:	1cc4      	adds	r4, r0, #3
 8003f4c:	f024 0403 	bic.w	r4, r4, #3
 8003f50:	42a0      	cmp	r0, r4
 8003f52:	d005      	beq.n	8003f60 <_malloc_r+0xa8>
 8003f54:	1a21      	subs	r1, r4, r0
 8003f56:	4630      	mov	r0, r6
 8003f58:	f000 f82e 	bl	8003fb8 <_sbrk_r>
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	d0cf      	beq.n	8003f00 <_malloc_r+0x48>
 8003f60:	6025      	str	r5, [r4, #0]
 8003f62:	e7db      	b.n	8003f1c <_malloc_r+0x64>
 8003f64:	200004a0 	.word	0x200004a0
 8003f68:	200004a4 	.word	0x200004a4

08003f6c <_realloc_r>:
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	4607      	mov	r7, r0
 8003f70:	4614      	mov	r4, r2
 8003f72:	460e      	mov	r6, r1
 8003f74:	b921      	cbnz	r1, 8003f80 <_realloc_r+0x14>
 8003f76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	f7ff bf9c 	b.w	8003eb8 <_malloc_r>
 8003f80:	b922      	cbnz	r2, 8003f8c <_realloc_r+0x20>
 8003f82:	f7ff ff4d 	bl	8003e20 <_free_r>
 8003f86:	4625      	mov	r5, r4
 8003f88:	4628      	mov	r0, r5
 8003f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f8c:	f000 f826 	bl	8003fdc <_malloc_usable_size_r>
 8003f90:	42a0      	cmp	r0, r4
 8003f92:	d20f      	bcs.n	8003fb4 <_realloc_r+0x48>
 8003f94:	4621      	mov	r1, r4
 8003f96:	4638      	mov	r0, r7
 8003f98:	f7ff ff8e 	bl	8003eb8 <_malloc_r>
 8003f9c:	4605      	mov	r5, r0
 8003f9e:	2800      	cmp	r0, #0
 8003fa0:	d0f2      	beq.n	8003f88 <_realloc_r+0x1c>
 8003fa2:	4631      	mov	r1, r6
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	f7ff fc07 	bl	80037b8 <memcpy>
 8003faa:	4631      	mov	r1, r6
 8003fac:	4638      	mov	r0, r7
 8003fae:	f7ff ff37 	bl	8003e20 <_free_r>
 8003fb2:	e7e9      	b.n	8003f88 <_realloc_r+0x1c>
 8003fb4:	4635      	mov	r5, r6
 8003fb6:	e7e7      	b.n	8003f88 <_realloc_r+0x1c>

08003fb8 <_sbrk_r>:
 8003fb8:	b538      	push	{r3, r4, r5, lr}
 8003fba:	2300      	movs	r3, #0
 8003fbc:	4c05      	ldr	r4, [pc, #20]	; (8003fd4 <_sbrk_r+0x1c>)
 8003fbe:	4605      	mov	r5, r0
 8003fc0:	4608      	mov	r0, r1
 8003fc2:	6023      	str	r3, [r4, #0]
 8003fc4:	f7fd face 	bl	8001564 <_sbrk>
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	d102      	bne.n	8003fd2 <_sbrk_r+0x1a>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	b103      	cbz	r3, 8003fd2 <_sbrk_r+0x1a>
 8003fd0:	602b      	str	r3, [r5, #0]
 8003fd2:	bd38      	pop	{r3, r4, r5, pc}
 8003fd4:	20000618 	.word	0x20000618

08003fd8 <__malloc_lock>:
 8003fd8:	4770      	bx	lr

08003fda <__malloc_unlock>:
 8003fda:	4770      	bx	lr

08003fdc <_malloc_usable_size_r>:
 8003fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fe0:	1f18      	subs	r0, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bfbc      	itt	lt
 8003fe6:	580b      	ldrlt	r3, [r1, r0]
 8003fe8:	18c0      	addlt	r0, r0, r3
 8003fea:	4770      	bx	lr

08003fec <_init>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	bf00      	nop
 8003ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff2:	bc08      	pop	{r3}
 8003ff4:	469e      	mov	lr, r3
 8003ff6:	4770      	bx	lr

08003ff8 <_fini>:
 8003ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffa:	bf00      	nop
 8003ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffe:	bc08      	pop	{r3}
 8004000:	469e      	mov	lr, r3
 8004002:	4770      	bx	lr
