
smart_watch_v_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004058  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f40  08004164  08004164  00014164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050a4  080050a4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080050a4  080050a4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050a4  080050a4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050a4  080050a4  000150a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050a8  080050a8  000150a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080050ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  20000078  08005124  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  08005124  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7e2  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000211e  00000000  00000000  0002f883  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e08  00000000  00000000  000319a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  000327b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c66  00000000  00000000  000334d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b3a9  00000000  00000000  0004c136  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c36b  00000000  00000000  000574df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e384a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004194  00000000  00000000  000e38c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	0800414c 	.word	0x0800414c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	0800414c 	.word	0x0800414c

0800014c <menu_ac>:




void menu_ac(uint8_t menu, uint8_t secili)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	switch(menu)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	2b04      	cmp	r3, #4
 8000160:	d836      	bhi.n	80001d0 <menu_ac+0x84>
 8000162:	a201      	add	r2, pc, #4	; (adr r2, 8000168 <menu_ac+0x1c>)
 8000164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000168:	0800017d 	.word	0x0800017d
 800016c:	08000187 	.word	0x08000187
 8000170:	08000191 	.word	0x08000191
 8000174:	08000199 	.word	0x08000199
 8000178:	080001c9 	.word	0x080001c9
	{
		case ANA_SAYFA:
			anasayfa_ac(secili);
 800017c:	79bb      	ldrb	r3, [r7, #6]
 800017e:	4618      	mov	r0, r3
 8000180:	f000 f862 	bl	8000248 <anasayfa_ac>
			break;
 8000184:	e025      	b.n	80001d2 <menu_ac+0x86>
		case NABIZ:
			nabiz_menu_ac(secili);
 8000186:	79bb      	ldrb	r3, [r7, #6]
 8000188:	4618      	mov	r0, r3
 800018a:	f000 f835 	bl	80001f8 <nabiz_menu_ac>
			break;
 800018e:	e020      	b.n	80001d2 <menu_ac+0x86>
		case ADIM:
			printf("Bugün attıgınız adım sayisi 12\n");
 8000190:	4812      	ldr	r0, [pc, #72]	; (80001dc <menu_ac+0x90>)
 8000192:	f003 f8fd 	bl	8003390 <puts>
			break;
 8000196:	e01c      	b.n	80001d2 <menu_ac+0x86>
		case TELEFON:
			printf("Telefona baglan");
 8000198:	4811      	ldr	r0, [pc, #68]	; (80001e0 <menu_ac+0x94>)
 800019a:	f003 f885 	bl	80032a8 <iprintf>
			switch (secili)
 800019e:	79bb      	ldrb	r3, [r7, #6]
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	d002      	beq.n	80001aa <menu_ac+0x5e>
 80001a4:	2b02      	cmp	r3, #2
 80001a6:	d007      	beq.n	80001b8 <menu_ac+0x6c>
			case 2:
				printf("Baglantiyi kes\n");
				printf("->Baglan");
				break;
			default:
				break;
 80001a8:	e00d      	b.n	80001c6 <menu_ac+0x7a>
				printf("->Baglantiyi kes\n");
 80001aa:	480e      	ldr	r0, [pc, #56]	; (80001e4 <menu_ac+0x98>)
 80001ac:	f003 f8f0 	bl	8003390 <puts>
				printf("Baglan");
 80001b0:	480d      	ldr	r0, [pc, #52]	; (80001e8 <menu_ac+0x9c>)
 80001b2:	f003 f879 	bl	80032a8 <iprintf>
				break;
 80001b6:	e006      	b.n	80001c6 <menu_ac+0x7a>
				printf("Baglantiyi kes\n");
 80001b8:	480c      	ldr	r0, [pc, #48]	; (80001ec <menu_ac+0xa0>)
 80001ba:	f003 f8e9 	bl	8003390 <puts>
				printf("->Baglan");
 80001be:	480c      	ldr	r0, [pc, #48]	; (80001f0 <menu_ac+0xa4>)
 80001c0:	f003 f872 	bl	80032a8 <iprintf>
				break;
 80001c4:	bf00      	nop
			}
			break;
 80001c6:	e004      	b.n	80001d2 <menu_ac+0x86>
		case SICAKLIK:
			printf("Anlik ortam sicakligi: 25");
 80001c8:	480a      	ldr	r0, [pc, #40]	; (80001f4 <menu_ac+0xa8>)
 80001ca:	f003 f86d 	bl	80032a8 <iprintf>
			break;
 80001ce:	e000      	b.n	80001d2 <menu_ac+0x86>
		default:
			break;
 80001d0:	bf00      	nop
	}
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	08004164 	.word	0x08004164
 80001e0:	08004188 	.word	0x08004188
 80001e4:	08004198 	.word	0x08004198
 80001e8:	080041ac 	.word	0x080041ac
 80001ec:	080041b4 	.word	0x080041b4
 80001f0:	080041c4 	.word	0x080041c4
 80001f4:	080041d0 	.word	0x080041d0

080001f8 <nabiz_menu_ac>:

void nabiz_menu_ac(uint8_t secili)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	71fb      	strb	r3, [r7, #7]
	ssd1306_Fill(Black);
 8000202:	2000      	movs	r0, #0
 8000204:	f000 fb48 	bl	8000898 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 8000208:	2100      	movs	r1, #0
 800020a:	2002      	movs	r0, #2
 800020c:	f000 fc9a 	bl	8000b44 <ssd1306_SetCursor>
	ssd1306_WriteString("Nabiz : 90", Font_11x18, White);
 8000210:	4a0a      	ldr	r2, [pc, #40]	; (800023c <nabiz_menu_ac+0x44>)
 8000212:	2301      	movs	r3, #1
 8000214:	ca06      	ldmia	r2, {r1, r2}
 8000216:	480a      	ldr	r0, [pc, #40]	; (8000240 <nabiz_menu_ac+0x48>)
 8000218:	f000 fc6e 	bl	8000af8 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 19);
 800021c:	2113      	movs	r1, #19
 800021e:	2002      	movs	r0, #2
 8000220:	f000 fc90 	bl	8000b44 <ssd1306_SetCursor>
	ssd1306_WriteString("->Geri don", Font_11x18, White);
 8000224:	4a05      	ldr	r2, [pc, #20]	; (800023c <nabiz_menu_ac+0x44>)
 8000226:	2301      	movs	r3, #1
 8000228:	ca06      	ldmia	r2, {r1, r2}
 800022a:	4806      	ldr	r0, [pc, #24]	; (8000244 <nabiz_menu_ac+0x4c>)
 800022c:	f000 fc64 	bl	8000af8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000230:	f000 fb54 	bl	80008dc <ssd1306_UpdateScreen>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000000 	.word	0x20000000
 8000240:	080041ec 	.word	0x080041ec
 8000244:	080041f8 	.word	0x080041f8

08000248 <anasayfa_ac>:

void anasayfa_ac(uint8_t secili)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
	ssd1306_Fill(Black);
 8000252:	2000      	movs	r0, #0
 8000254:	f000 fb20 	bl	8000898 <ssd1306_Fill>
	switch(secili)
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	3b01      	subs	r3, #1
 800025c:	2b05      	cmp	r3, #5
 800025e:	f200 80d5 	bhi.w	800040c <anasayfa_ac+0x1c4>
 8000262:	a201      	add	r2, pc, #4	; (adr r2, 8000268 <anasayfa_ac+0x20>)
 8000264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000268:	08000281 	.word	0x08000281
 800026c:	080002c3 	.word	0x080002c3
 8000270:	08000305 	.word	0x08000305
 8000274:	08000347 	.word	0x08000347
 8000278:	08000389 	.word	0x08000389
 800027c:	080003cb 	.word	0x080003cb
	{
	case 1:
		ssd1306_SetCursor(2, 0);
 8000280:	2100      	movs	r1, #0
 8000282:	2002      	movs	r0, #2
 8000284:	f000 fc5e 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("->Nabiz", Font_11x18, White);
 8000288:	4a63      	ldr	r2, [pc, #396]	; (8000418 <anasayfa_ac+0x1d0>)
 800028a:	2301      	movs	r3, #1
 800028c:	ca06      	ldmia	r2, {r1, r2}
 800028e:	4863      	ldr	r0, [pc, #396]	; (800041c <anasayfa_ac+0x1d4>)
 8000290:	f000 fc32 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 8000294:	2113      	movs	r1, #19
 8000296:	2002      	movs	r0, #2
 8000298:	f000 fc54 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("Adim", Font_11x18, White);
 800029c:	4a5e      	ldr	r2, [pc, #376]	; (8000418 <anasayfa_ac+0x1d0>)
 800029e:	2301      	movs	r3, #1
 80002a0:	ca06      	ldmia	r2, {r1, r2}
 80002a2:	485f      	ldr	r0, [pc, #380]	; (8000420 <anasayfa_ac+0x1d8>)
 80002a4:	f000 fc28 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 80002a8:	2126      	movs	r1, #38	; 0x26
 80002aa:	2002      	movs	r0, #2
 80002ac:	f000 fc4a 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 80002b0:	4a59      	ldr	r2, [pc, #356]	; (8000418 <anasayfa_ac+0x1d0>)
 80002b2:	2301      	movs	r3, #1
 80002b4:	ca06      	ldmia	r2, {r1, r2}
 80002b6:	485b      	ldr	r0, [pc, #364]	; (8000424 <anasayfa_ac+0x1dc>)
 80002b8:	f000 fc1e 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80002bc:	f000 fb0e 	bl	80008dc <ssd1306_UpdateScreen>
		break;
 80002c0:	e0a5      	b.n	800040e <anasayfa_ac+0x1c6>
	case 2:
		ssd1306_SetCursor(2, 0);
 80002c2:	2100      	movs	r1, #0
 80002c4:	2002      	movs	r0, #2
 80002c6:	f000 fc3d 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("Nabiz", Font_11x18, White);
 80002ca:	4a53      	ldr	r2, [pc, #332]	; (8000418 <anasayfa_ac+0x1d0>)
 80002cc:	2301      	movs	r3, #1
 80002ce:	ca06      	ldmia	r2, {r1, r2}
 80002d0:	4855      	ldr	r0, [pc, #340]	; (8000428 <anasayfa_ac+0x1e0>)
 80002d2:	f000 fc11 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 80002d6:	2113      	movs	r1, #19
 80002d8:	2002      	movs	r0, #2
 80002da:	f000 fc33 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("->Adim", Font_11x18, White);
 80002de:	4a4e      	ldr	r2, [pc, #312]	; (8000418 <anasayfa_ac+0x1d0>)
 80002e0:	2301      	movs	r3, #1
 80002e2:	ca06      	ldmia	r2, {r1, r2}
 80002e4:	4851      	ldr	r0, [pc, #324]	; (800042c <anasayfa_ac+0x1e4>)
 80002e6:	f000 fc07 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 80002ea:	2126      	movs	r1, #38	; 0x26
 80002ec:	2002      	movs	r0, #2
 80002ee:	f000 fc29 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 80002f2:	4a49      	ldr	r2, [pc, #292]	; (8000418 <anasayfa_ac+0x1d0>)
 80002f4:	2301      	movs	r3, #1
 80002f6:	ca06      	ldmia	r2, {r1, r2}
 80002f8:	484a      	ldr	r0, [pc, #296]	; (8000424 <anasayfa_ac+0x1dc>)
 80002fa:	f000 fbfd 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80002fe:	f000 faed 	bl	80008dc <ssd1306_UpdateScreen>
		break;
 8000302:	e084      	b.n	800040e <anasayfa_ac+0x1c6>
	case 3:
		ssd1306_SetCursor(2, 0);
 8000304:	2100      	movs	r1, #0
 8000306:	2002      	movs	r0, #2
 8000308:	f000 fc1c 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("Nabiz", Font_11x18, White);
 800030c:	4a42      	ldr	r2, [pc, #264]	; (8000418 <anasayfa_ac+0x1d0>)
 800030e:	2301      	movs	r3, #1
 8000310:	ca06      	ldmia	r2, {r1, r2}
 8000312:	4845      	ldr	r0, [pc, #276]	; (8000428 <anasayfa_ac+0x1e0>)
 8000314:	f000 fbf0 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 8000318:	2113      	movs	r1, #19
 800031a:	2002      	movs	r0, #2
 800031c:	f000 fc12 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("Adim", Font_11x18, White);
 8000320:	4a3d      	ldr	r2, [pc, #244]	; (8000418 <anasayfa_ac+0x1d0>)
 8000322:	2301      	movs	r3, #1
 8000324:	ca06      	ldmia	r2, {r1, r2}
 8000326:	483e      	ldr	r0, [pc, #248]	; (8000420 <anasayfa_ac+0x1d8>)
 8000328:	f000 fbe6 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 800032c:	2126      	movs	r1, #38	; 0x26
 800032e:	2002      	movs	r0, #2
 8000330:	f000 fc08 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("->Telefon", Font_11x18, White);
 8000334:	4a38      	ldr	r2, [pc, #224]	; (8000418 <anasayfa_ac+0x1d0>)
 8000336:	2301      	movs	r3, #1
 8000338:	ca06      	ldmia	r2, {r1, r2}
 800033a:	483d      	ldr	r0, [pc, #244]	; (8000430 <anasayfa_ac+0x1e8>)
 800033c:	f000 fbdc 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000340:	f000 facc 	bl	80008dc <ssd1306_UpdateScreen>
		break;
 8000344:	e063      	b.n	800040e <anasayfa_ac+0x1c6>
	case 4:
		ssd1306_SetCursor(2, 0);
 8000346:	2100      	movs	r1, #0
 8000348:	2002      	movs	r0, #2
 800034a:	f000 fbfb 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("Adim", Font_11x18, White);
 800034e:	4a32      	ldr	r2, [pc, #200]	; (8000418 <anasayfa_ac+0x1d0>)
 8000350:	2301      	movs	r3, #1
 8000352:	ca06      	ldmia	r2, {r1, r2}
 8000354:	4832      	ldr	r0, [pc, #200]	; (8000420 <anasayfa_ac+0x1d8>)
 8000356:	f000 fbcf 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 800035a:	2113      	movs	r1, #19
 800035c:	2002      	movs	r0, #2
 800035e:	f000 fbf1 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 8000362:	4a2d      	ldr	r2, [pc, #180]	; (8000418 <anasayfa_ac+0x1d0>)
 8000364:	2301      	movs	r3, #1
 8000366:	ca06      	ldmia	r2, {r1, r2}
 8000368:	482e      	ldr	r0, [pc, #184]	; (8000424 <anasayfa_ac+0x1dc>)
 800036a:	f000 fbc5 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 800036e:	2126      	movs	r1, #38	; 0x26
 8000370:	2002      	movs	r0, #2
 8000372:	f000 fbe7 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("->Sicaklik", Font_11x18, White);
 8000376:	4a28      	ldr	r2, [pc, #160]	; (8000418 <anasayfa_ac+0x1d0>)
 8000378:	2301      	movs	r3, #1
 800037a:	ca06      	ldmia	r2, {r1, r2}
 800037c:	482d      	ldr	r0, [pc, #180]	; (8000434 <anasayfa_ac+0x1ec>)
 800037e:	f000 fbbb 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000382:	f000 faab 	bl	80008dc <ssd1306_UpdateScreen>
		break;
 8000386:	e042      	b.n	800040e <anasayfa_ac+0x1c6>
	case 5:
		ssd1306_SetCursor(2, 0);
 8000388:	2100      	movs	r1, #0
 800038a:	2002      	movs	r0, #2
 800038c:	f000 fbda 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 8000390:	4a21      	ldr	r2, [pc, #132]	; (8000418 <anasayfa_ac+0x1d0>)
 8000392:	2301      	movs	r3, #1
 8000394:	ca06      	ldmia	r2, {r1, r2}
 8000396:	4823      	ldr	r0, [pc, #140]	; (8000424 <anasayfa_ac+0x1dc>)
 8000398:	f000 fbae 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 800039c:	2113      	movs	r1, #19
 800039e:	2002      	movs	r0, #2
 80003a0:	f000 fbd0 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("Sicaklik", Font_11x18, White);
 80003a4:	4a1c      	ldr	r2, [pc, #112]	; (8000418 <anasayfa_ac+0x1d0>)
 80003a6:	2301      	movs	r3, #1
 80003a8:	ca06      	ldmia	r2, {r1, r2}
 80003aa:	4823      	ldr	r0, [pc, #140]	; (8000438 <anasayfa_ac+0x1f0>)
 80003ac:	f000 fba4 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 80003b0:	2126      	movs	r1, #38	; 0x26
 80003b2:	2002      	movs	r0, #2
 80003b4:	f000 fbc6 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("->Saat Yuzu", Font_11x18, White);
 80003b8:	4a17      	ldr	r2, [pc, #92]	; (8000418 <anasayfa_ac+0x1d0>)
 80003ba:	2301      	movs	r3, #1
 80003bc:	ca06      	ldmia	r2, {r1, r2}
 80003be:	481f      	ldr	r0, [pc, #124]	; (800043c <anasayfa_ac+0x1f4>)
 80003c0:	f000 fb9a 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80003c4:	f000 fa8a 	bl	80008dc <ssd1306_UpdateScreen>
		break;
 80003c8:	e021      	b.n	800040e <anasayfa_ac+0x1c6>
	case 6:
		ssd1306_SetCursor(2, 0);
 80003ca:	2100      	movs	r1, #0
 80003cc:	2002      	movs	r0, #2
 80003ce:	f000 fbb9 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("Sicaklik", Font_11x18, White);
 80003d2:	4a11      	ldr	r2, [pc, #68]	; (8000418 <anasayfa_ac+0x1d0>)
 80003d4:	2301      	movs	r3, #1
 80003d6:	ca06      	ldmia	r2, {r1, r2}
 80003d8:	4817      	ldr	r0, [pc, #92]	; (8000438 <anasayfa_ac+0x1f0>)
 80003da:	f000 fb8d 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 80003de:	2113      	movs	r1, #19
 80003e0:	2002      	movs	r0, #2
 80003e2:	f000 fbaf 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("Saat Yuzu", Font_11x18, White);
 80003e6:	4a0c      	ldr	r2, [pc, #48]	; (8000418 <anasayfa_ac+0x1d0>)
 80003e8:	2301      	movs	r3, #1
 80003ea:	ca06      	ldmia	r2, {r1, r2}
 80003ec:	4814      	ldr	r0, [pc, #80]	; (8000440 <anasayfa_ac+0x1f8>)
 80003ee:	f000 fb83 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 80003f2:	2126      	movs	r1, #38	; 0x26
 80003f4:	2002      	movs	r0, #2
 80003f6:	f000 fba5 	bl	8000b44 <ssd1306_SetCursor>
		ssd1306_WriteString("->Saat Ayarla", Font_11x18, White);
 80003fa:	4a07      	ldr	r2, [pc, #28]	; (8000418 <anasayfa_ac+0x1d0>)
 80003fc:	2301      	movs	r3, #1
 80003fe:	ca06      	ldmia	r2, {r1, r2}
 8000400:	4810      	ldr	r0, [pc, #64]	; (8000444 <anasayfa_ac+0x1fc>)
 8000402:	f000 fb79 	bl	8000af8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000406:	f000 fa69 	bl	80008dc <ssd1306_UpdateScreen>
		break;
 800040a:	e000      	b.n	800040e <anasayfa_ac+0x1c6>
	default:
		break;
 800040c:	bf00      	nop
	}

}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000000 	.word	0x20000000
 800041c:	08004204 	.word	0x08004204
 8000420:	0800420c 	.word	0x0800420c
 8000424:	08004214 	.word	0x08004214
 8000428:	0800421c 	.word	0x0800421c
 800042c:	08004224 	.word	0x08004224
 8000430:	0800422c 	.word	0x0800422c
 8000434:	08004238 	.word	0x08004238
 8000438:	08004244 	.word	0x08004244
 800043c:	08004250 	.word	0x08004250
 8000440:	0800425c 	.word	0x0800425c
 8000444:	08004268 	.word	0x08004268

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 fe76 	bl	800113c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f83a 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 f8f0 	bl	8000638 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000458:	f000 f870 	bl	800053c <MX_I2C1_Init>
  MX_TIM1_Init();
 800045c:	f000 f89c 	bl	8000598 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	ssd1306_Init();
 8000460:	f000 f9b0 	bl	80007c4 <ssd1306_Init>

	ssd1306_Fill(Black);
 8000464:	2000      	movs	r0, #0
 8000466:	f000 fa17 	bl	8000898 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 800046a:	f000 fa37 	bl	80008dc <ssd1306_UpdateScreen>

	ds3231_cfg.ay = 12;
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <main+0x70>)
 8000470:	220c      	movs	r2, #12
 8000472:	705a      	strb	r2, [r3, #1]
	ds3231_cfg.gun = 1;
 8000474:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <main+0x70>)
 8000476:	2201      	movs	r2, #1
 8000478:	709a      	strb	r2, [r3, #2]
	ds3231_cfg.ay_gun = 28;
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <main+0x70>)
 800047c:	221c      	movs	r2, #28
 800047e:	70da      	strb	r2, [r3, #3]
	ds3231_cfg.yil = 20;
 8000480:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <main+0x70>)
 8000482:	2214      	movs	r2, #20
 8000484:	701a      	strb	r2, [r3, #0]
	ds3231_cfg.saat = 18;
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <main+0x70>)
 8000488:	2212      	movs	r2, #18
 800048a:	711a      	strb	r2, [r3, #4]
	ds3231_cfg.dakika = 49;
 800048c:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <main+0x70>)
 800048e:	2231      	movs	r2, #49	; 0x31
 8000490:	715a      	strb	r2, [r3, #5]
	ds3231_cfg.saniye = 50;
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <main+0x70>)
 8000494:	2232      	movs	r2, #50	; 0x32
 8000496:	719a      	strb	r2, [r3, #6]

	timer_durum = 1;
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <main+0x74>)
 800049a:	2201      	movs	r2, #1
 800049c:	701a      	strb	r2, [r3, #0]
	lcd.secili = 1;
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <main+0x78>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	705a      	strb	r2, [r3, #1]
	lcd.menu = ANA_SAYFA;
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <main+0x78>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	709a      	strb	r2, [r3, #2]
	HAL_I2C_DeInit(&hi2c1);
 80004aa:	4806      	ldr	r0, [pc, #24]	; (80004c4 <main+0x7c>)
 80004ac:	f001 fb60 	bl	8001b70 <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c1);
 80004b0:	4804      	ldr	r0, [pc, #16]	; (80004c4 <main+0x7c>)
 80004b2:	f001 fa25 	bl	8001900 <HAL_I2C_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b6:	e7fe      	b.n	80004b6 <main+0x6e>
 80004b8:	200004fc 	.word	0x200004fc
 80004bc:	200004ab 	.word	0x200004ab
 80004c0:	200004a8 	.word	0x200004a8
 80004c4:	20000524 	.word	0x20000524

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b090      	sub	sp, #64	; 0x40
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0318 	add.w	r3, r7, #24
 80004d2:	2228      	movs	r2, #40	; 0x28
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 fede 	bl	8003298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ea:	2301      	movs	r3, #1
 80004ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f8:	f107 0318 	add.w	r3, r7, #24
 80004fc:	4618      	mov	r0, r3
 80004fe:	f001 fe7d 	bl	80021fc <HAL_RCC_OscConfig>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000508:	f000 f920 	bl	800074c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050c:	230f      	movs	r3, #15
 800050e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000510:	2301      	movs	r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f002 f8e9 	bl	80026fc <HAL_RCC_ClockConfig>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000530:	f000 f90c 	bl	800074c <Error_Handler>
  }
}
 8000534:	bf00      	nop
 8000536:	3740      	adds	r7, #64	; 0x40
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <MX_I2C1_Init+0x50>)
 8000542:	4a13      	ldr	r2, [pc, #76]	; (8000590 <MX_I2C1_Init+0x54>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <MX_I2C1_Init+0x50>)
 8000548:	4a12      	ldr	r2, [pc, #72]	; (8000594 <MX_I2C1_Init+0x58>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <MX_I2C1_Init+0x50>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MX_I2C1_Init+0x50>)
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <MX_I2C1_Init+0x50>)
 800055a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800055e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <MX_I2C1_Init+0x50>)
 8000562:	2200      	movs	r2, #0
 8000564:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <MX_I2C1_Init+0x50>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <MX_I2C1_Init+0x50>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <MX_I2C1_Init+0x50>)
 8000574:	2200      	movs	r2, #0
 8000576:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <MX_I2C1_Init+0x50>)
 800057a:	f001 f9c1 	bl	8001900 <HAL_I2C_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000584:	f000 f8e2 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000524 	.word	0x20000524
 8000590:	40005400 	.word	0x40005400
 8000594:	000186a0 	.word	0x000186a0

08000598 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ac:	463b      	mov	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <MX_TIM1_Init+0x98>)
 80005b6:	4a1f      	ldr	r2, [pc, #124]	; (8000634 <MX_TIM1_Init+0x9c>)
 80005b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 80005ba:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <MX_TIM1_Init+0x98>)
 80005bc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80005c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_TIM1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <MX_TIM1_Init+0x98>)
 80005ca:	2214      	movs	r2, #20
 80005cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_TIM1_Init+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <MX_TIM1_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <MX_TIM1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005e0:	4813      	ldr	r0, [pc, #76]	; (8000630 <MX_TIM1_Init+0x98>)
 80005e2:	f002 fa13 	bl	8002a0c <HAL_TIM_Base_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80005ec:	f000 f8ae 	bl	800074c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	4619      	mov	r1, r3
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <MX_TIM1_Init+0x98>)
 80005fe:	f002 fbdd 	bl	8002dbc <HAL_TIM_ConfigClockSource>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000608:	f000 f8a0 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060c:	2300      	movs	r3, #0
 800060e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_TIM1_Init+0x98>)
 800061a:	f002 fda3 	bl	8003164 <HAL_TIMEx_MasterConfigSynchronization>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000624:	f000 f892 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000578 	.word	0x20000578
 8000634:	40012c00 	.word	0x40012c00

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b32      	ldr	r3, [pc, #200]	; (8000718 <MX_GPIO_Init+0xe0>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a31      	ldr	r2, [pc, #196]	; (8000718 <MX_GPIO_Init+0xe0>)
 8000652:	f043 0310 	orr.w	r3, r3, #16
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <MX_GPIO_Init+0xe0>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0310 	and.w	r3, r3, #16
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <MX_GPIO_Init+0xe0>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a2b      	ldr	r2, [pc, #172]	; (8000718 <MX_GPIO_Init+0xe0>)
 800066a:	f043 0320 	orr.w	r3, r3, #32
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <MX_GPIO_Init+0xe0>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0320 	and.w	r3, r3, #32
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <MX_GPIO_Init+0xe0>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a25      	ldr	r2, [pc, #148]	; (8000718 <MX_GPIO_Init+0xe0>)
 8000682:	f043 0304 	orr.w	r3, r3, #4
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <MX_GPIO_Init+0xe0>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0304 	and.w	r3, r3, #4
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <MX_GPIO_Init+0xe0>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a1f      	ldr	r2, [pc, #124]	; (8000718 <MX_GPIO_Init+0xe0>)
 800069a:	f043 0308 	orr.w	r3, r3, #8
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <MX_GPIO_Init+0xe0>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b2:	481a      	ldr	r0, [pc, #104]	; (800071c <MX_GPIO_Init+0xe4>)
 80006b4:	f001 f8ea 	bl	800188c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006b8:	2330      	movs	r3, #48	; 0x30
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_GPIO_Init+0xe8>)
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	4816      	ldr	r0, [pc, #88]	; (8000724 <MX_GPIO_Init+0xec>)
 80006cc:	f000 fec8 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2302      	movs	r3, #2
 80006e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	4619      	mov	r1, r3
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <MX_GPIO_Init+0xe4>)
 80006ea:	f000 feb9 	bl	8001460 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	200a      	movs	r0, #10
 80006f4:	f000 fe7d 	bl	80013f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80006f8:	200a      	movs	r0, #10
 80006fa:	f000 fe96 	bl	800142a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2017      	movs	r0, #23
 8000704:	f000 fe75 	bl	80013f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000708:	2017      	movs	r0, #23
 800070a:	f000 fe8e 	bl	800142a <HAL_NVIC_EnableIRQ>

}
 800070e:	bf00      	nop
 8000710:	3720      	adds	r7, #32
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000
 800071c:	40010c00 	.word	0x40010c00
 8000720:	10110000 	.word	0x10110000
 8000724:	40010800 	.word	0x40010800

08000728 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
	timer_durum = 1;
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim1);
 8000736:	4804      	ldr	r0, [pc, #16]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000738:	f002 fa0a 	bl	8002b50 <HAL_TIM_Base_Stop_IT>

}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200004ab 	.word	0x200004ab
 8000748:	20000578 	.word	0x20000578

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000752:	e7fe      	b.n	8000752 <Error_Handler+0x6>

08000754 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy
#include "main.h"
#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af04      	add	r7, sp, #16
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, 500);
 800076a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800076e:	9302      	str	r3, [sp, #8]
 8000770:	2301      	movs	r3, #1
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	2301      	movs	r3, #1
 800077a:	2200      	movs	r2, #0
 800077c:	2178      	movs	r1, #120	; 0x78
 800077e:	4803      	ldr	r0, [pc, #12]	; (800078c <ssd1306_WriteCommand+0x2c>)
 8000780:	f001 fa26 	bl	8001bd0 <HAL_I2C_Mem_Write>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000524 	.word	0x20000524

08000790 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af04      	add	r7, sp, #16
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, 500);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	b29b      	uxth	r3, r3
 800079e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007a2:	9202      	str	r2, [sp, #8]
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2301      	movs	r3, #1
 80007ac:	2240      	movs	r2, #64	; 0x40
 80007ae:	2178      	movs	r1, #120	; 0x78
 80007b0:	4803      	ldr	r0, [pc, #12]	; (80007c0 <ssd1306_WriteData+0x30>)
 80007b2:	f001 fa0d 	bl	8001bd0 <HAL_I2C_Mem_Write>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000524 	.word	0x20000524

080007c4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80007c8:	f7ff ffc4 	bl	8000754 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80007cc:	2064      	movs	r0, #100	; 0x64
 80007ce:	f000 fd17 	bl	8001200 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 f9e2 	bl	8000b9c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80007d8:	2020      	movs	r0, #32
 80007da:	f7ff ffc1 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff ffbe 	bl	8000760 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80007e4:	20b0      	movs	r0, #176	; 0xb0
 80007e6:	f7ff ffbb 	bl	8000760 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80007ea:	20c8      	movs	r0, #200	; 0xc8
 80007ec:	f7ff ffb8 	bl	8000760 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80007f0:	2000      	movs	r0, #0
 80007f2:	f7ff ffb5 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80007f6:	2010      	movs	r0, #16
 80007f8:	f7ff ffb2 	bl	8000760 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80007fc:	2040      	movs	r0, #64	; 0x40
 80007fe:	f7ff ffaf 	bl	8000760 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000802:	20ff      	movs	r0, #255	; 0xff
 8000804:	f000 f9b6 	bl	8000b74 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000808:	20a1      	movs	r0, #161	; 0xa1
 800080a:	f7ff ffa9 	bl	8000760 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800080e:	20a6      	movs	r0, #166	; 0xa6
 8000810:	f7ff ffa6 	bl	8000760 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000814:	20a8      	movs	r0, #168	; 0xa8
 8000816:	f7ff ffa3 	bl	8000760 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800081a:	203f      	movs	r0, #63	; 0x3f
 800081c:	f7ff ffa0 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000820:	20a4      	movs	r0, #164	; 0xa4
 8000822:	f7ff ff9d 	bl	8000760 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000826:	20d3      	movs	r0, #211	; 0xd3
 8000828:	f7ff ff9a 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff ff97 	bl	8000760 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000832:	20d5      	movs	r0, #213	; 0xd5
 8000834:	f7ff ff94 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000838:	20f0      	movs	r0, #240	; 0xf0
 800083a:	f7ff ff91 	bl	8000760 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800083e:	20d9      	movs	r0, #217	; 0xd9
 8000840:	f7ff ff8e 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000844:	2022      	movs	r0, #34	; 0x22
 8000846:	f7ff ff8b 	bl	8000760 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800084a:	20da      	movs	r0, #218	; 0xda
 800084c:	f7ff ff88 	bl	8000760 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000850:	2012      	movs	r0, #18
 8000852:	f7ff ff85 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000856:	20db      	movs	r0, #219	; 0xdb
 8000858:	f7ff ff82 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800085c:	2020      	movs	r0, #32
 800085e:	f7ff ff7f 	bl	8000760 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000862:	208d      	movs	r0, #141	; 0x8d
 8000864:	f7ff ff7c 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000868:	2014      	movs	r0, #20
 800086a:	f7ff ff79 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800086e:	2001      	movs	r0, #1
 8000870:	f000 f994 	bl	8000b9c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000874:	2000      	movs	r0, #0
 8000876:	f000 f80f 	bl	8000898 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800087a:	f000 f82f 	bl	80008dc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <ssd1306_Init+0xd0>)
 8000880:	2200      	movs	r2, #0
 8000882:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <ssd1306_Init+0xd0>)
 8000886:	2200      	movs	r2, #0
 8000888:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800088a:	4b02      	ldr	r3, [pc, #8]	; (8000894 <ssd1306_Init+0xd0>)
 800088c:	2201      	movs	r2, #1
 800088e:	715a      	strb	r2, [r3, #5]
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000494 	.word	0x20000494

08000898 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	e00d      	b.n	80008c4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d101      	bne.n	80008b2 <ssd1306_Fill+0x1a>
 80008ae:	2100      	movs	r1, #0
 80008b0:	e000      	b.n	80008b4 <ssd1306_Fill+0x1c>
 80008b2:	21ff      	movs	r1, #255	; 0xff
 80008b4:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <ssd1306_Fill+0x40>)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4413      	add	r3, r2
 80008ba:	460a      	mov	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	3301      	adds	r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008ca:	d3ed      	bcc.n	80008a8 <ssd1306_Fill+0x10>
    }
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20000094 	.word	0x20000094

080008dc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	71fb      	strb	r3, [r7, #7]
 80008e6:	e016      	b.n	8000916 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	3b50      	subs	r3, #80	; 0x50
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff36 	bl	8000760 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff ff33 	bl	8000760 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80008fa:	2010      	movs	r0, #16
 80008fc:	f7ff ff30 	bl	8000760 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	01db      	lsls	r3, r3, #7
 8000904:	4a07      	ldr	r2, [pc, #28]	; (8000924 <ssd1306_UpdateScreen+0x48>)
 8000906:	4413      	add	r3, r2
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff40 	bl	8000790 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	3301      	adds	r3, #1
 8000914:	71fb      	strb	r3, [r7, #7]
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b07      	cmp	r3, #7
 800091a:	d9e5      	bls.n	80008e8 <ssd1306_UpdateScreen+0xc>
    }
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000094 	.word	0x20000094

08000928 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
 8000932:	460b      	mov	r3, r1
 8000934:	71bb      	strb	r3, [r7, #6]
 8000936:	4613      	mov	r3, r2
 8000938:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	2b00      	cmp	r3, #0
 8000940:	db48      	blt.n	80009d4 <ssd1306_DrawPixel+0xac>
 8000942:	79bb      	ldrb	r3, [r7, #6]
 8000944:	2b3f      	cmp	r3, #63	; 0x3f
 8000946:	d845      	bhi.n	80009d4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8000948:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <ssd1306_DrawPixel+0xb8>)
 800094a:	791b      	ldrb	r3, [r3, #4]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d006      	beq.n	800095e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8000950:	797b      	ldrb	r3, [r7, #5]
 8000952:	2b00      	cmp	r3, #0
 8000954:	bf0c      	ite	eq
 8000956:	2301      	moveq	r3, #1
 8000958:	2300      	movne	r3, #0
 800095a:	b2db      	uxtb	r3, r3
 800095c:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 800095e:	797b      	ldrb	r3, [r7, #5]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d11a      	bne.n	800099a <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	79bb      	ldrb	r3, [r7, #6]
 8000968:	08db      	lsrs	r3, r3, #3
 800096a:	b2d8      	uxtb	r0, r3
 800096c:	4603      	mov	r3, r0
 800096e:	01db      	lsls	r3, r3, #7
 8000970:	4413      	add	r3, r2
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <ssd1306_DrawPixel+0xbc>)
 8000974:	5cd3      	ldrb	r3, [r2, r3]
 8000976:	b25a      	sxtb	r2, r3
 8000978:	79bb      	ldrb	r3, [r7, #6]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	2101      	movs	r1, #1
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	b25b      	sxtb	r3, r3
 8000986:	4313      	orrs	r3, r2
 8000988:	b259      	sxtb	r1, r3
 800098a:	79fa      	ldrb	r2, [r7, #7]
 800098c:	4603      	mov	r3, r0
 800098e:	01db      	lsls	r3, r3, #7
 8000990:	4413      	add	r3, r2
 8000992:	b2c9      	uxtb	r1, r1
 8000994:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <ssd1306_DrawPixel+0xbc>)
 8000996:	54d1      	strb	r1, [r2, r3]
 8000998:	e01d      	b.n	80009d6 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800099a:	79fa      	ldrb	r2, [r7, #7]
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	08db      	lsrs	r3, r3, #3
 80009a0:	b2d8      	uxtb	r0, r3
 80009a2:	4603      	mov	r3, r0
 80009a4:	01db      	lsls	r3, r3, #7
 80009a6:	4413      	add	r3, r2
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <ssd1306_DrawPixel+0xbc>)
 80009aa:	5cd3      	ldrb	r3, [r2, r3]
 80009ac:	b25a      	sxtb	r2, r3
 80009ae:	79bb      	ldrb	r3, [r7, #6]
 80009b0:	f003 0307 	and.w	r3, r3, #7
 80009b4:	2101      	movs	r1, #1
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	b25b      	sxtb	r3, r3
 80009c0:	4013      	ands	r3, r2
 80009c2:	b259      	sxtb	r1, r3
 80009c4:	79fa      	ldrb	r2, [r7, #7]
 80009c6:	4603      	mov	r3, r0
 80009c8:	01db      	lsls	r3, r3, #7
 80009ca:	4413      	add	r3, r2
 80009cc:	b2c9      	uxtb	r1, r1
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <ssd1306_DrawPixel+0xbc>)
 80009d0:	54d1      	strb	r1, [r2, r3]
 80009d2:	e000      	b.n	80009d6 <ssd1306_DrawPixel+0xae>
        return;
 80009d4:	bf00      	nop
    }
}
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000494 	.word	0x20000494
 80009e4:	20000094 	.word	0x20000094

080009e8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4604      	mov	r4, r0
 80009f0:	1d38      	adds	r0, r7, #4
 80009f2:	e880 0006 	stmia.w	r0, {r1, r2}
 80009f6:	461a      	mov	r2, r3
 80009f8:	4623      	mov	r3, r4
 80009fa:	73fb      	strb	r3, [r7, #15]
 80009fc:	4613      	mov	r3, r2
 80009fe:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	2b1f      	cmp	r3, #31
 8000a04:	d902      	bls.n	8000a0c <ssd1306_WriteChar+0x24>
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	2b7e      	cmp	r3, #126	; 0x7e
 8000a0a:	d901      	bls.n	8000a10 <ssd1306_WriteChar+0x28>
        return 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e06d      	b.n	8000aec <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000a10:	4b38      	ldr	r3, [pc, #224]	; (8000af4 <ssd1306_WriteChar+0x10c>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	793b      	ldrb	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	2b80      	cmp	r3, #128	; 0x80
 8000a1c:	dc06      	bgt.n	8000a2c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000a1e:	4b35      	ldr	r3, [pc, #212]	; (8000af4 <ssd1306_WriteChar+0x10c>)
 8000a20:	885b      	ldrh	r3, [r3, #2]
 8000a22:	461a      	mov	r2, r3
 8000a24:	797b      	ldrb	r3, [r7, #5]
 8000a26:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000a28:	2b40      	cmp	r3, #64	; 0x40
 8000a2a:	dd01      	ble.n	8000a30 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	e05d      	b.n	8000aec <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
 8000a34:	e04c      	b.n	8000ad0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	3b20      	subs	r3, #32
 8000a3c:	7979      	ldrb	r1, [r7, #5]
 8000a3e:	fb01 f303 	mul.w	r3, r1, r3
 8000a42:	4619      	mov	r1, r3
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	440b      	add	r3, r1
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	e034      	b.n	8000ac0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000a56:	697a      	ldr	r2, [r7, #20]
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d012      	beq.n	8000a8c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000a66:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <ssd1306_WriteChar+0x10c>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4413      	add	r3, r2
 8000a72:	b2d8      	uxtb	r0, r3
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <ssd1306_WriteChar+0x10c>)
 8000a76:	885b      	ldrh	r3, [r3, #2]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4413      	add	r3, r2
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	7bba      	ldrb	r2, [r7, #14]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f7ff ff4f 	bl	8000928 <ssd1306_DrawPixel>
 8000a8a:	e016      	b.n	8000aba <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <ssd1306_WriteChar+0x10c>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4413      	add	r3, r2
 8000a98:	b2d8      	uxtb	r0, r3
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <ssd1306_WriteChar+0x10c>)
 8000a9c:	885b      	ldrh	r3, [r3, #2]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	b2d9      	uxtb	r1, r3
 8000aa8:	7bbb      	ldrb	r3, [r7, #14]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	bf0c      	ite	eq
 8000aae:	2301      	moveq	r3, #1
 8000ab0:	2300      	movne	r3, #0
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	f7ff ff37 	bl	8000928 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	3301      	adds	r3, #1
 8000abe:	61bb      	str	r3, [r7, #24]
 8000ac0:	793b      	ldrb	r3, [r7, #4]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d3c5      	bcc.n	8000a56 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3301      	adds	r3, #1
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	797b      	ldrb	r3, [r7, #5]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d3ad      	bcc.n	8000a36 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <ssd1306_WriteChar+0x10c>)
 8000adc:	881a      	ldrh	r2, [r3, #0]
 8000ade:	793b      	ldrb	r3, [r7, #4]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <ssd1306_WriteChar+0x10c>)
 8000ae8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3724      	adds	r7, #36	; 0x24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	20000494 	.word	0x20000494

08000af8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	1d38      	adds	r0, r7, #4
 8000b02:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b06:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000b08:	e012      	b.n	8000b30 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	7818      	ldrb	r0, [r3, #0]
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	1d3a      	adds	r2, r7, #4
 8000b12:	ca06      	ldmia	r2, {r1, r2}
 8000b14:	f7ff ff68 	bl	80009e8 <ssd1306_WriteChar>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d002      	beq.n	8000b2a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	e008      	b.n	8000b3c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1e8      	bne.n	8000b0a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	71fb      	strb	r3, [r7, #7]
 8000b50:	4613      	mov	r3, r2
 8000b52:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <ssd1306_SetCursor+0x2c>)
 8000b5a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000b5c:	79bb      	ldrb	r3, [r7, #6]
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <ssd1306_SetCursor+0x2c>)
 8000b62:	805a      	strh	r2, [r3, #2]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000494 	.word	0x20000494

08000b74 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000b7e:	2381      	movs	r3, #129	; 0x81
 8000b80:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fdeb 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fde7 	bl	8000760 <ssd1306_WriteCommand>
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d005      	beq.n	8000bb8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000bac:	23af      	movs	r3, #175	; 0xaf
 8000bae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <ssd1306_SetDisplayOn+0x38>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	719a      	strb	r2, [r3, #6]
 8000bb6:	e004      	b.n	8000bc2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000bb8:	23ae      	movs	r3, #174	; 0xae
 8000bba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <ssd1306_SetDisplayOn+0x38>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fdcb 	bl	8000760 <ssd1306_WriteCommand>
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000494 	.word	0x20000494

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_MspInit+0x5c>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <HAL_MspInit+0x5c>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6193      	str	r3, [r2, #24]
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_MspInit+0x5c>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_MspInit+0x5c>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_MspInit+0x5c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	61d3      	str	r3, [r2, #28]
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_MspInit+0x5c>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_MspInit+0x60>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_MspInit+0x60>)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010000 	.word	0x40010000

08000c3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a15      	ldr	r2, [pc, #84]	; (8000cac <HAL_I2C_MspInit+0x70>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d123      	bne.n	8000ca4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_I2C_MspInit+0x74>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <HAL_I2C_MspInit+0x74>)
 8000c62:	f043 0308 	orr.w	r3, r3, #8
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_I2C_MspInit+0x74>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0308 	and.w	r3, r3, #8
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c74:	23c0      	movs	r3, #192	; 0xc0
 8000c76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c78:	2312      	movs	r3, #18
 8000c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	4619      	mov	r1, r3
 8000c86:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <HAL_I2C_MspInit+0x78>)
 8000c88:	f000 fbea 	bl	8001460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_I2C_MspInit+0x74>)
 8000c8e:	69db      	ldr	r3, [r3, #28]
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_I2C_MspInit+0x74>)
 8000c92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c96:	61d3      	str	r3, [r2, #28]
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <HAL_I2C_MspInit+0x74>)
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ca4:	bf00      	nop
 8000ca6:	3720      	adds	r7, #32
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010c00 	.word	0x40010c00

08000cb8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_I2C_MspDeInit+0x38>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d10d      	bne.n	8000ce6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_I2C_MspDeInit+0x3c>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <HAL_I2C_MspDeInit+0x3c>)
 8000cd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000cd4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000cd6:	2140      	movs	r1, #64	; 0x40
 8000cd8:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <HAL_I2C_MspDeInit+0x40>)
 8000cda:	f000 fd1b 	bl	8001714 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <HAL_I2C_MspDeInit+0x40>)
 8000ce2:	f000 fd17 	bl	8001714 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40005400 	.word	0x40005400
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40010c00 	.word	0x40010c00

08000cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <HAL_TIM_Base_MspInit+0x74>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d12b      	bne.n	8000d66 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <HAL_TIM_Base_MspInit+0x78>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <HAL_TIM_Base_MspInit+0x78>)
 8000d14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d18:	6193      	str	r3, [r2, #24]
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <HAL_TIM_Base_MspInit+0x78>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2018      	movs	r0, #24
 8000d2c:	f000 fb61 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000d30:	2018      	movs	r0, #24
 8000d32:	f000 fb7a 	bl	800142a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2019      	movs	r0, #25
 8000d3c:	f000 fb59 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d40:	2019      	movs	r0, #25
 8000d42:	f000 fb72 	bl	800142a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	201a      	movs	r0, #26
 8000d4c:	f000 fb51 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000d50:	201a      	movs	r0, #26
 8000d52:	f000 fb6a 	bl	800142a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	201b      	movs	r0, #27
 8000d5c:	f000 fb49 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d60:	201b      	movs	r0, #27
 8000d62:	f000 fb62 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40012c00 	.word	0x40012c00
 8000d74:	40021000 	.word	0x40021000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr

08000da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr

08000dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbe:	f000 fa03 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000dcc:	2010      	movs	r0, #16
 8000dce:	f000 fd75 	bl	80018bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

	if(timer_durum == 1)
 8000dd2:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <EXTI4_IRQHandler+0xac>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d14a      	bne.n	8000e70 <EXTI4_IRQHandler+0xa8>
	{
		switch (lcd.menu)
 8000dda:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <EXTI4_IRQHandler+0xb0>)
 8000ddc:	789b      	ldrb	r3, [r3, #2]
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	d83f      	bhi.n	8000e62 <EXTI4_IRQHandler+0x9a>
 8000de2:	a201      	add	r2, pc, #4	; (adr r2, 8000de8 <EXTI4_IRQHandler+0x20>)
 8000de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de8:	08000dfd 	.word	0x08000dfd
 8000dec:	08000e63 	.word	0x08000e63
 8000df0:	08000e27 	.word	0x08000e27
 8000df4:	08000e31 	.word	0x08000e31
 8000df8:	08000e57 	.word	0x08000e57
		{
		case ANA_SAYFA:
			if(lcd.secili == ANA_SAYFA_MAX_SATIR)
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <EXTI4_IRQHandler+0xb0>)
 8000dfe:	785b      	ldrb	r3, [r3, #1]
 8000e00:	2b06      	cmp	r3, #6
 8000e02:	d103      	bne.n	8000e0c <EXTI4_IRQHandler+0x44>
			{
				lcd.secili = 1;
 8000e04:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <EXTI4_IRQHandler+0xb0>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	705a      	strb	r2, [r3, #1]
 8000e0a:	e005      	b.n	8000e18 <EXTI4_IRQHandler+0x50>
			}
			else
			{
				lcd.secili ++;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <EXTI4_IRQHandler+0xb0>)
 8000e0e:	785b      	ldrb	r3, [r3, #1]
 8000e10:	3301      	adds	r3, #1
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <EXTI4_IRQHandler+0xb0>)
 8000e16:	705a      	strb	r2, [r3, #1]
			}
			menu_ac(ANA_SAYFA, lcd.secili);
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <EXTI4_IRQHandler+0xb0>)
 8000e1a:	785b      	ldrb	r3, [r3, #1]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff f994 	bl	800014c <menu_ac>
			break;
 8000e24:	e01e      	b.n	8000e64 <EXTI4_IRQHandler+0x9c>
		case ADIM:
			menu_ac(ADIM, 1);
 8000e26:	2101      	movs	r1, #1
 8000e28:	2002      	movs	r0, #2
 8000e2a:	f7ff f98f 	bl	800014c <menu_ac>
			break;
 8000e2e:	e019      	b.n	8000e64 <EXTI4_IRQHandler+0x9c>
		case TELEFON:
			if(lcd.secili == TELEFON_MAX_SATIR)
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <EXTI4_IRQHandler+0xb0>)
 8000e32:	785b      	ldrb	r3, [r3, #1]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d103      	bne.n	8000e40 <EXTI4_IRQHandler+0x78>
			{
				lcd.secili = 1;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <EXTI4_IRQHandler+0xb0>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	705a      	strb	r2, [r3, #1]
 8000e3e:	e002      	b.n	8000e46 <EXTI4_IRQHandler+0x7e>
			}
			else
			{
				lcd.secili = 2;
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <EXTI4_IRQHandler+0xb0>)
 8000e42:	2202      	movs	r2, #2
 8000e44:	705a      	strb	r2, [r3, #1]
			}
			menu_ac(lcd.menu, lcd.secili);
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <EXTI4_IRQHandler+0xb0>)
 8000e48:	789a      	ldrb	r2, [r3, #2]
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <EXTI4_IRQHandler+0xb0>)
 8000e4c:	785b      	ldrb	r3, [r3, #1]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4610      	mov	r0, r2
 8000e52:	f7ff f97b 	bl	800014c <menu_ac>
		case SICAKLIK:
			menu_ac(lcd.menu, 1);
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <EXTI4_IRQHandler+0xb0>)
 8000e58:	789b      	ldrb	r3, [r3, #2]
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff f975 	bl	800014c <menu_ac>
		default:
			break;
 8000e62:	bf00      	nop
		}
		HAL_TIM_Base_Start_IT(&htim1);
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <EXTI4_IRQHandler+0xb4>)
 8000e66:	f001 fe21 	bl	8002aac <HAL_TIM_Base_Start_IT>
		timer_durum = 0;
 8000e6a:	4b02      	ldr	r3, [pc, #8]	; (8000e74 <EXTI4_IRQHandler+0xac>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	}
  /* USER CODE END EXTI4_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200004ab 	.word	0x200004ab
 8000e78:	200004a8 	.word	0x200004a8
 8000e7c:	20000578 	.word	0x20000578

08000e80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000e84:	2020      	movs	r0, #32
 8000e86:	f000 fd19 	bl	80018bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
	if(timer_durum == 1)
 8000e8a:	4b2f      	ldr	r3, [pc, #188]	; (8000f48 <EXTI9_5_IRQHandler+0xc8>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d158      	bne.n	8000f44 <EXTI9_5_IRQHandler+0xc4>
	{
		switch (lcd.menu)
 8000e92:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <EXTI9_5_IRQHandler+0xcc>)
 8000e94:	789b      	ldrb	r3, [r3, #2]
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	d84d      	bhi.n	8000f36 <EXTI9_5_IRQHandler+0xb6>
 8000e9a:	a201      	add	r2, pc, #4	; (adr r2, 8000ea0 <EXTI9_5_IRQHandler+0x20>)
 8000e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea0:	08000eb5 	.word	0x08000eb5
 8000ea4:	08000edd 	.word	0x08000edd
 8000ea8:	08000efb 	.word	0x08000efb
 8000eac:	08000f05 	.word	0x08000f05
 8000eb0:	08000f2b 	.word	0x08000f2b
		{
		case ANA_SAYFA:
			switch(lcd.secili)
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <EXTI9_5_IRQHandler+0xcc>)
 8000eb6:	785b      	ldrb	r3, [r3, #1]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d000      	beq.n	8000ebe <EXTI9_5_IRQHandler+0x3e>
				lcd.secili = 1;
				lcd.menu = NABIZ;
				menu_ac(lcd.menu, lcd.secili);
			}
//			menu_ac(ANA_SAYFA, lcd.secili);
			break;
 8000ebc:	e03c      	b.n	8000f38 <EXTI9_5_IRQHandler+0xb8>
				lcd.secili = 1;
 8000ebe:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <EXTI9_5_IRQHandler+0xcc>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	705a      	strb	r2, [r3, #1]
				lcd.menu = NABIZ;
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <EXTI9_5_IRQHandler+0xcc>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	709a      	strb	r2, [r3, #2]
				menu_ac(lcd.menu, lcd.secili);
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <EXTI9_5_IRQHandler+0xcc>)
 8000ecc:	789a      	ldrb	r2, [r3, #2]
 8000ece:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <EXTI9_5_IRQHandler+0xcc>)
 8000ed0:	785b      	ldrb	r3, [r3, #1]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	f7ff f939 	bl	800014c <menu_ac>
			break;
 8000eda:	e02d      	b.n	8000f38 <EXTI9_5_IRQHandler+0xb8>
		case NABIZ:
			lcd.menu = ANA_SAYFA;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <EXTI9_5_IRQHandler+0xcc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	709a      	strb	r2, [r3, #2]
			lcd.secili = 1;
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <EXTI9_5_IRQHandler+0xcc>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	705a      	strb	r2, [r3, #1]
			menu_ac(lcd.menu, lcd.secili);
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <EXTI9_5_IRQHandler+0xcc>)
 8000eea:	789a      	ldrb	r2, [r3, #2]
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <EXTI9_5_IRQHandler+0xcc>)
 8000eee:	785b      	ldrb	r3, [r3, #1]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	f7ff f92a 	bl	800014c <menu_ac>
			break;
 8000ef8:	e01e      	b.n	8000f38 <EXTI9_5_IRQHandler+0xb8>
		case ADIM:
			menu_ac(ADIM, 1);
 8000efa:	2101      	movs	r1, #1
 8000efc:	2002      	movs	r0, #2
 8000efe:	f7ff f925 	bl	800014c <menu_ac>
			break;
 8000f02:	e019      	b.n	8000f38 <EXTI9_5_IRQHandler+0xb8>
		case TELEFON:
			if(lcd.secili == TELEFON_MAX_SATIR)
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <EXTI9_5_IRQHandler+0xcc>)
 8000f06:	785b      	ldrb	r3, [r3, #1]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d103      	bne.n	8000f14 <EXTI9_5_IRQHandler+0x94>
			{
				lcd.secili = 1;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <EXTI9_5_IRQHandler+0xcc>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	705a      	strb	r2, [r3, #1]
 8000f12:	e002      	b.n	8000f1a <EXTI9_5_IRQHandler+0x9a>
			}
			else
			{
				lcd.secili = 2;
 8000f14:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <EXTI9_5_IRQHandler+0xcc>)
 8000f16:	2202      	movs	r2, #2
 8000f18:	705a      	strb	r2, [r3, #1]
			}
			menu_ac(lcd.menu, lcd.secili);
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <EXTI9_5_IRQHandler+0xcc>)
 8000f1c:	789a      	ldrb	r2, [r3, #2]
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <EXTI9_5_IRQHandler+0xcc>)
 8000f20:	785b      	ldrb	r3, [r3, #1]
 8000f22:	4619      	mov	r1, r3
 8000f24:	4610      	mov	r0, r2
 8000f26:	f7ff f911 	bl	800014c <menu_ac>
		case SICAKLIK:
			menu_ac(lcd.menu, 1);
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <EXTI9_5_IRQHandler+0xcc>)
 8000f2c:	789b      	ldrb	r3, [r3, #2]
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff f90b 	bl	800014c <menu_ac>
		default:
			break;
 8000f36:	bf00      	nop
		}
		HAL_TIM_Base_Start_IT(&htim1);
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <EXTI9_5_IRQHandler+0xd0>)
 8000f3a:	f001 fdb7 	bl	8002aac <HAL_TIM_Base_Start_IT>
		timer_durum = 0;
 8000f3e:	4b02      	ldr	r3, [pc, #8]	; (8000f48 <EXTI9_5_IRQHandler+0xc8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	}
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200004ab 	.word	0x200004ab
 8000f4c:	200004a8 	.word	0x200004a8
 8000f50:	20000578 	.word	0x20000578

08000f54 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <TIM1_BRK_IRQHandler+0x10>)
 8000f5a:	f001 fe27 	bl	8002bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000578 	.word	0x20000578

08000f68 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <TIM1_UP_IRQHandler+0x10>)
 8000f6e:	f001 fe1d 	bl	8002bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000578 	.word	0x20000578

08000f7c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <TIM1_TRG_COM_IRQHandler+0x10>)
 8000f82:	f001 fe13 	bl	8002bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000578 	.word	0x20000578

08000f90 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <TIM1_CC_IRQHandler+0x10>)
 8000f96:	f001 fe09 	bl	8002bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000578 	.word	0x20000578

08000fa4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e00a      	b.n	8000fcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fb6:	f3af 8000 	nop.w
 8000fba:	4601      	mov	r1, r0
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	b2ca      	uxtb	r2, r1
 8000fc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dbf0      	blt.n	8000fb6 <_read+0x12>
	}

return len;
 8000fd4:	687b      	ldr	r3, [r7, #4]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	e009      	b.n	8001004 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbf1      	blt.n	8000ff0 <_write+0x12>
	}
	return len;
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <_close>:

int _close(int file)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
	return -1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800103c:	605a      	str	r2, [r3, #4]
	return 0;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <_isatty>:

int _isatty(int file)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	return 1;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800105e:	b480      	push	{r7}
 8001060:	b085      	sub	sp, #20
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
	return 0;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
	...

08001078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <_sbrk+0x5c>)
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <_sbrk+0x60>)
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <_sbrk+0x64>)
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <_sbrk+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d207      	bcs.n	80010b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a8:	f002 f8cc 	bl	8003244 <__errno>
 80010ac:	4602      	mov	r2, r0
 80010ae:	230c      	movs	r3, #12
 80010b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	e009      	b.n	80010cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <_sbrk+0x64>)
 80010c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20005000 	.word	0x20005000
 80010d8:	00000400 	.word	0x00000400
 80010dc:	2000049c 	.word	0x2000049c
 80010e0:	200005c8 	.word	0x200005c8

080010e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010f2:	e003      	b.n	80010fc <LoopCopyDataInit>

080010f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010fa:	3104      	adds	r1, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010fc:	480a      	ldr	r0, [pc, #40]	; (8001128 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001100:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001102:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001104:	d3f6      	bcc.n	80010f4 <CopyDataInit>
  ldr r2, =_sbss
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001108:	e002      	b.n	8001110 <LoopFillZerobss>

0800110a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800110c:	f842 3b04 	str.w	r3, [r2], #4

08001110 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001112:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001114:	d3f9      	bcc.n	800110a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001116:	f7ff ffe5 	bl	80010e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111a:	f002 f899 	bl	8003250 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800111e:	f7ff f993 	bl	8000448 <main>
  bx lr
 8001122:	4770      	bx	lr
  ldr r3, =_sidata
 8001124:	080050ac 	.word	0x080050ac
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800112c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001130:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001134:	200005c8 	.word	0x200005c8

08001138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC1_2_IRQHandler>
	...

0800113c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_Init+0x28>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_Init+0x28>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 f945 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001152:	2000      	movs	r0, #0
 8001154:	f000 f808 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001158:	f7ff fd3e 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40022000 	.word	0x40022000

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x54>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x58>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f95d 	bl	8001446 <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00e      	b.n	80011b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d80a      	bhi.n	80011b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f000 f925 	bl	80013f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_InitTick+0x5c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000010 	.word	0x20000010
 80011c4:	2000000c 	.word	0x2000000c

080011c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_IncTick+0x1c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_IncTick+0x20>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a03      	ldr	r2, [pc, #12]	; (80011e8 <HAL_IncTick+0x20>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	20000010 	.word	0x20000010
 80011e8:	200005c0 	.word	0x200005c0

080011ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b02      	ldr	r3, [pc, #8]	; (80011fc <HAL_GetTick+0x10>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	200005c0 	.word	0x200005c0

08001200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff fff0 	bl	80011ec <HAL_GetTick>
 800120c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001218:	d005      	beq.n	8001226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_Delay+0x40>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001226:	bf00      	nop
 8001228:	f7ff ffe0 	bl	80011ec <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d8f7      	bhi.n	8001228 <HAL_Delay+0x28>
  {
  }
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000010 	.word	0x20000010

08001244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001260:	4013      	ands	r3, r2
 8001262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800126c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	60d3      	str	r3, [r2, #12]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	f003 0307 	and.w	r3, r3, #7
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	db0b      	blt.n	80012d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f003 021f 	and.w	r2, r3, #31
 80012c0:	4906      	ldr	r1, [pc, #24]	; (80012dc <__NVIC_EnableIRQ+0x34>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	2001      	movs	r0, #1
 80012ca:	fa00 f202 	lsl.w	r2, r0, r2
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100

080012e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db0a      	blt.n	800130a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	490c      	ldr	r1, [pc, #48]	; (800132c <__NVIC_SetPriority+0x4c>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	0112      	lsls	r2, r2, #4
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	440b      	add	r3, r1
 8001304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001308:	e00a      	b.n	8001320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4908      	ldr	r1, [pc, #32]	; (8001330 <__NVIC_SetPriority+0x50>)
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	3b04      	subs	r3, #4
 8001318:	0112      	lsls	r2, r2, #4
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	440b      	add	r3, r1
 800131e:	761a      	strb	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e100 	.word	0xe000e100
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f1c3 0307 	rsb	r3, r3, #7
 800134e:	2b04      	cmp	r3, #4
 8001350:	bf28      	it	cs
 8001352:	2304      	movcs	r3, #4
 8001354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3304      	adds	r3, #4
 800135a:	2b06      	cmp	r3, #6
 800135c:	d902      	bls.n	8001364 <NVIC_EncodePriority+0x30>
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3b03      	subs	r3, #3
 8001362:	e000      	b.n	8001366 <NVIC_EncodePriority+0x32>
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	f04f 32ff 	mov.w	r2, #4294967295
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	43d9      	mvns	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	4313      	orrs	r3, r2
         );
}
 800138e:	4618      	mov	r0, r3
 8001390:	3724      	adds	r7, #36	; 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ff90 	bl	80012e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff2d 	bl	8001244 <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff42 	bl	800128c <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff90 	bl	8001334 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5f 	bl	80012e0 <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff35 	bl	80012a8 <__NVIC_EnableIRQ>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ffa2 	bl	8001398 <SysTick_Config>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001460:	b480      	push	{r7}
 8001462:	b08b      	sub	sp, #44	; 0x2c
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001472:	e127      	b.n	80016c4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001474:	2201      	movs	r2, #1
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	429a      	cmp	r2, r3
 800148e:	f040 8116 	bne.w	80016be <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b12      	cmp	r3, #18
 8001498:	d034      	beq.n	8001504 <HAL_GPIO_Init+0xa4>
 800149a:	2b12      	cmp	r3, #18
 800149c:	d80d      	bhi.n	80014ba <HAL_GPIO_Init+0x5a>
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d02b      	beq.n	80014fa <HAL_GPIO_Init+0x9a>
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d804      	bhi.n	80014b0 <HAL_GPIO_Init+0x50>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d031      	beq.n	800150e <HAL_GPIO_Init+0xae>
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d01c      	beq.n	80014e8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ae:	e048      	b.n	8001542 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d043      	beq.n	800153c <HAL_GPIO_Init+0xdc>
 80014b4:	2b11      	cmp	r3, #17
 80014b6:	d01b      	beq.n	80014f0 <HAL_GPIO_Init+0x90>
          break;
 80014b8:	e043      	b.n	8001542 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014ba:	4a89      	ldr	r2, [pc, #548]	; (80016e0 <HAL_GPIO_Init+0x280>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d026      	beq.n	800150e <HAL_GPIO_Init+0xae>
 80014c0:	4a87      	ldr	r2, [pc, #540]	; (80016e0 <HAL_GPIO_Init+0x280>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d806      	bhi.n	80014d4 <HAL_GPIO_Init+0x74>
 80014c6:	4a87      	ldr	r2, [pc, #540]	; (80016e4 <HAL_GPIO_Init+0x284>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d020      	beq.n	800150e <HAL_GPIO_Init+0xae>
 80014cc:	4a86      	ldr	r2, [pc, #536]	; (80016e8 <HAL_GPIO_Init+0x288>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d01d      	beq.n	800150e <HAL_GPIO_Init+0xae>
          break;
 80014d2:	e036      	b.n	8001542 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014d4:	4a85      	ldr	r2, [pc, #532]	; (80016ec <HAL_GPIO_Init+0x28c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d019      	beq.n	800150e <HAL_GPIO_Init+0xae>
 80014da:	4a85      	ldr	r2, [pc, #532]	; (80016f0 <HAL_GPIO_Init+0x290>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d016      	beq.n	800150e <HAL_GPIO_Init+0xae>
 80014e0:	4a84      	ldr	r2, [pc, #528]	; (80016f4 <HAL_GPIO_Init+0x294>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d013      	beq.n	800150e <HAL_GPIO_Init+0xae>
          break;
 80014e6:	e02c      	b.n	8001542 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	623b      	str	r3, [r7, #32]
          break;
 80014ee:	e028      	b.n	8001542 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	3304      	adds	r3, #4
 80014f6:	623b      	str	r3, [r7, #32]
          break;
 80014f8:	e023      	b.n	8001542 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	3308      	adds	r3, #8
 8001500:	623b      	str	r3, [r7, #32]
          break;
 8001502:	e01e      	b.n	8001542 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	330c      	adds	r3, #12
 800150a:	623b      	str	r3, [r7, #32]
          break;
 800150c:	e019      	b.n	8001542 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d102      	bne.n	800151c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001516:	2304      	movs	r3, #4
 8001518:	623b      	str	r3, [r7, #32]
          break;
 800151a:	e012      	b.n	8001542 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d105      	bne.n	8001530 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001524:	2308      	movs	r3, #8
 8001526:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	611a      	str	r2, [r3, #16]
          break;
 800152e:	e008      	b.n	8001542 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001530:	2308      	movs	r3, #8
 8001532:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	615a      	str	r2, [r3, #20]
          break;
 800153a:	e002      	b.n	8001542 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
          break;
 8001540:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2bff      	cmp	r3, #255	; 0xff
 8001546:	d801      	bhi.n	800154c <HAL_GPIO_Init+0xec>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	e001      	b.n	8001550 <HAL_GPIO_Init+0xf0>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3304      	adds	r3, #4
 8001550:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	2bff      	cmp	r3, #255	; 0xff
 8001556:	d802      	bhi.n	800155e <HAL_GPIO_Init+0xfe>
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	e002      	b.n	8001564 <HAL_GPIO_Init+0x104>
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	3b08      	subs	r3, #8
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	210f      	movs	r1, #15
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	401a      	ands	r2, r3
 8001576:	6a39      	ldr	r1, [r7, #32]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	431a      	orrs	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 8096 	beq.w	80016be <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001592:	4b59      	ldr	r3, [pc, #356]	; (80016f8 <HAL_GPIO_Init+0x298>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	4a58      	ldr	r2, [pc, #352]	; (80016f8 <HAL_GPIO_Init+0x298>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6193      	str	r3, [r2, #24]
 800159e:	4b56      	ldr	r3, [pc, #344]	; (80016f8 <HAL_GPIO_Init+0x298>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015aa:	4a54      	ldr	r2, [pc, #336]	; (80016fc <HAL_GPIO_Init+0x29c>)
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3302      	adds	r3, #2
 80015b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	220f      	movs	r2, #15
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	4013      	ands	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4b      	ldr	r2, [pc, #300]	; (8001700 <HAL_GPIO_Init+0x2a0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d013      	beq.n	80015fe <HAL_GPIO_Init+0x19e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4a      	ldr	r2, [pc, #296]	; (8001704 <HAL_GPIO_Init+0x2a4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d00d      	beq.n	80015fa <HAL_GPIO_Init+0x19a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a49      	ldr	r2, [pc, #292]	; (8001708 <HAL_GPIO_Init+0x2a8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d007      	beq.n	80015f6 <HAL_GPIO_Init+0x196>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a48      	ldr	r2, [pc, #288]	; (800170c <HAL_GPIO_Init+0x2ac>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d101      	bne.n	80015f2 <HAL_GPIO_Init+0x192>
 80015ee:	2303      	movs	r3, #3
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x1a0>
 80015f2:	2304      	movs	r3, #4
 80015f4:	e004      	b.n	8001600 <HAL_GPIO_Init+0x1a0>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e002      	b.n	8001600 <HAL_GPIO_Init+0x1a0>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_GPIO_Init+0x1a0>
 80015fe:	2300      	movs	r3, #0
 8001600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001602:	f002 0203 	and.w	r2, r2, #3
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	4093      	lsls	r3, r2
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001610:	493a      	ldr	r1, [pc, #232]	; (80016fc <HAL_GPIO_Init+0x29c>)
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	3302      	adds	r3, #2
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800162a:	4b39      	ldr	r3, [pc, #228]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4938      	ldr	r1, [pc, #224]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]
 8001636:	e006      	b.n	8001646 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001638:	4b35      	ldr	r3, [pc, #212]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	43db      	mvns	r3, r3
 8001640:	4933      	ldr	r1, [pc, #204]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 8001642:	4013      	ands	r3, r2
 8001644:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001652:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	492e      	ldr	r1, [pc, #184]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]
 800165e:	e006      	b.n	800166e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001660:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	43db      	mvns	r3, r3
 8001668:	4929      	ldr	r1, [pc, #164]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 800166a:	4013      	ands	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d006      	beq.n	8001688 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800167a:	4b25      	ldr	r3, [pc, #148]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	4924      	ldr	r1, [pc, #144]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
 8001686:	e006      	b.n	8001696 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	43db      	mvns	r3, r3
 8001690:	491f      	ldr	r1, [pc, #124]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 8001692:	4013      	ands	r3, r2
 8001694:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d006      	beq.n	80016b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	491a      	ldr	r1, [pc, #104]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60cb      	str	r3, [r1, #12]
 80016ae:	e006      	b.n	80016be <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	4915      	ldr	r1, [pc, #84]	; (8001710 <HAL_GPIO_Init+0x2b0>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	3301      	adds	r3, #1
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	fa22 f303 	lsr.w	r3, r2, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f47f aed0 	bne.w	8001474 <HAL_GPIO_Init+0x14>
  }
}
 80016d4:	bf00      	nop
 80016d6:	372c      	adds	r7, #44	; 0x2c
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	10210000 	.word	0x10210000
 80016e4:	10110000 	.word	0x10110000
 80016e8:	10120000 	.word	0x10120000
 80016ec:	10310000 	.word	0x10310000
 80016f0:	10320000 	.word	0x10320000
 80016f4:	10220000 	.word	0x10220000
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010000 	.word	0x40010000
 8001700:	40010800 	.word	0x40010800
 8001704:	40010c00 	.word	0x40010c00
 8001708:	40011000 	.word	0x40011000
 800170c:	40011400 	.word	0x40011400
 8001710:	40010400 	.word	0x40010400

08001714 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001722:	e09a      	b.n	800185a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001724:	2201      	movs	r2, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 808d 	beq.w	8001854 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800173a:	4a4e      	ldr	r2, [pc, #312]	; (8001874 <HAL_GPIO_DeInit+0x160>)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001746:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	4013      	ands	r3, r2
 800175a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a46      	ldr	r2, [pc, #280]	; (8001878 <HAL_GPIO_DeInit+0x164>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d013      	beq.n	800178c <HAL_GPIO_DeInit+0x78>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a45      	ldr	r2, [pc, #276]	; (800187c <HAL_GPIO_DeInit+0x168>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d00d      	beq.n	8001788 <HAL_GPIO_DeInit+0x74>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a44      	ldr	r2, [pc, #272]	; (8001880 <HAL_GPIO_DeInit+0x16c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d007      	beq.n	8001784 <HAL_GPIO_DeInit+0x70>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a43      	ldr	r2, [pc, #268]	; (8001884 <HAL_GPIO_DeInit+0x170>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d101      	bne.n	8001780 <HAL_GPIO_DeInit+0x6c>
 800177c:	2303      	movs	r3, #3
 800177e:	e006      	b.n	800178e <HAL_GPIO_DeInit+0x7a>
 8001780:	2304      	movs	r3, #4
 8001782:	e004      	b.n	800178e <HAL_GPIO_DeInit+0x7a>
 8001784:	2302      	movs	r3, #2
 8001786:	e002      	b.n	800178e <HAL_GPIO_DeInit+0x7a>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_GPIO_DeInit+0x7a>
 800178c:	2300      	movs	r3, #0
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	f002 0203 	and.w	r2, r2, #3
 8001794:	0092      	lsls	r2, r2, #2
 8001796:	4093      	lsls	r3, r2
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	429a      	cmp	r2, r3
 800179c:	d132      	bne.n	8001804 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	220f      	movs	r2, #15
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80017ae:	4a31      	ldr	r2, [pc, #196]	; (8001874 <HAL_GPIO_DeInit+0x160>)
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	3302      	adds	r3, #2
 80017b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	43da      	mvns	r2, r3
 80017be:	482d      	ldr	r0, [pc, #180]	; (8001874 <HAL_GPIO_DeInit+0x160>)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	400a      	ands	r2, r1
 80017c6:	3302      	adds	r3, #2
 80017c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80017cc:	4b2e      	ldr	r3, [pc, #184]	; (8001888 <HAL_GPIO_DeInit+0x174>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	492c      	ldr	r1, [pc, #176]	; (8001888 <HAL_GPIO_DeInit+0x174>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <HAL_GPIO_DeInit+0x174>)
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	4929      	ldr	r1, [pc, #164]	; (8001888 <HAL_GPIO_DeInit+0x174>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80017e8:	4b27      	ldr	r3, [pc, #156]	; (8001888 <HAL_GPIO_DeInit+0x174>)
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	4925      	ldr	r1, [pc, #148]	; (8001888 <HAL_GPIO_DeInit+0x174>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80017f6:	4b24      	ldr	r3, [pc, #144]	; (8001888 <HAL_GPIO_DeInit+0x174>)
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	4922      	ldr	r1, [pc, #136]	; (8001888 <HAL_GPIO_DeInit+0x174>)
 8001800:	4013      	ands	r3, r2
 8001802:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2bff      	cmp	r3, #255	; 0xff
 8001808:	d801      	bhi.n	800180e <HAL_GPIO_DeInit+0xfa>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	e001      	b.n	8001812 <HAL_GPIO_DeInit+0xfe>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3304      	adds	r3, #4
 8001812:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2bff      	cmp	r3, #255	; 0xff
 8001818:	d802      	bhi.n	8001820 <HAL_GPIO_DeInit+0x10c>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	e002      	b.n	8001826 <HAL_GPIO_DeInit+0x112>
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	3b08      	subs	r3, #8
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	210f      	movs	r1, #15
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	401a      	ands	r2, r3
 8001838:	2104      	movs	r1, #4
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	431a      	orrs	r2, r3
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	43db      	mvns	r3, r3
 800184e:	401a      	ands	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	3301      	adds	r3, #1
 8001858:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	fa22 f303 	lsr.w	r3, r2, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	f47f af5e 	bne.w	8001724 <HAL_GPIO_DeInit+0x10>
  }
}
 8001868:	bf00      	nop
 800186a:	3724      	adds	r7, #36	; 0x24
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40010000 	.word	0x40010000
 8001878:	40010800 	.word	0x40010800
 800187c:	40010c00 	.word	0x40010c00
 8001880:	40011000 	.word	0x40011000
 8001884:	40011400 	.word	0x40011400
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]
 8001898:	4613      	mov	r3, r2
 800189a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800189c:	787b      	ldrb	r3, [r7, #1]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018a8:	e003      	b.n	80018b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	041a      	lsls	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	611a      	str	r2, [r3, #16]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d006      	beq.n	80018e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f806 	bl	80018ec <HAL_GPIO_EXTI_Callback>
  }
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40010400 	.word	0x40010400

080018ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e11f      	b.n	8001b52 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d106      	bne.n	800192c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff f988 	bl	8000c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2224      	movs	r2, #36	; 0x24
 8001930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001964:	f001 f820 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8001968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4a7b      	ldr	r2, [pc, #492]	; (8001b5c <HAL_I2C_Init+0x25c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d807      	bhi.n	8001984 <HAL_I2C_Init+0x84>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4a7a      	ldr	r2, [pc, #488]	; (8001b60 <HAL_I2C_Init+0x260>)
 8001978:	4293      	cmp	r3, r2
 800197a:	bf94      	ite	ls
 800197c:	2301      	movls	r3, #1
 800197e:	2300      	movhi	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	e006      	b.n	8001992 <HAL_I2C_Init+0x92>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4a77      	ldr	r2, [pc, #476]	; (8001b64 <HAL_I2C_Init+0x264>)
 8001988:	4293      	cmp	r3, r2
 800198a:	bf94      	ite	ls
 800198c:	2301      	movls	r3, #1
 800198e:	2300      	movhi	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e0db      	b.n	8001b52 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4a72      	ldr	r2, [pc, #456]	; (8001b68 <HAL_I2C_Init+0x268>)
 800199e:	fba2 2303 	umull	r2, r3, r2, r3
 80019a2:	0c9b      	lsrs	r3, r3, #18
 80019a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a64      	ldr	r2, [pc, #400]	; (8001b5c <HAL_I2C_Init+0x25c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d802      	bhi.n	80019d4 <HAL_I2C_Init+0xd4>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3301      	adds	r3, #1
 80019d2:	e009      	b.n	80019e8 <HAL_I2C_Init+0xe8>
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019da:	fb02 f303 	mul.w	r3, r2, r3
 80019de:	4a63      	ldr	r2, [pc, #396]	; (8001b6c <HAL_I2C_Init+0x26c>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	099b      	lsrs	r3, r3, #6
 80019e6:	3301      	adds	r3, #1
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	430b      	orrs	r3, r1
 80019ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4956      	ldr	r1, [pc, #344]	; (8001b5c <HAL_I2C_Init+0x25c>)
 8001a04:	428b      	cmp	r3, r1
 8001a06:	d80d      	bhi.n	8001a24 <HAL_I2C_Init+0x124>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1e59      	subs	r1, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	bf38      	it	cc
 8001a20:	2304      	movcc	r3, #4
 8001a22:	e04f      	b.n	8001ac4 <HAL_I2C_Init+0x1c4>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d111      	bne.n	8001a50 <HAL_I2C_Init+0x150>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1e58      	subs	r0, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	440b      	add	r3, r1
 8001a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf0c      	ite	eq
 8001a48:	2301      	moveq	r3, #1
 8001a4a:	2300      	movne	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	e012      	b.n	8001a76 <HAL_I2C_Init+0x176>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1e58      	subs	r0, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6859      	ldr	r1, [r3, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	0099      	lsls	r1, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_Init+0x17e>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e022      	b.n	8001ac4 <HAL_I2C_Init+0x1c4>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10e      	bne.n	8001aa4 <HAL_I2C_Init+0x1a4>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1e58      	subs	r0, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6859      	ldr	r1, [r3, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	440b      	add	r3, r1
 8001a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa2:	e00f      	b.n	8001ac4 <HAL_I2C_Init+0x1c4>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1e58      	subs	r0, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	0099      	lsls	r1, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aba:	3301      	adds	r3, #1
 8001abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	6809      	ldr	r1, [r1, #0]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69da      	ldr	r2, [r3, #28]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6911      	ldr	r1, [r2, #16]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68d2      	ldr	r2, [r2, #12]
 8001afe:	4311      	orrs	r1, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	430b      	orrs	r3, r1
 8001b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	000186a0 	.word	0x000186a0
 8001b60:	001e847f 	.word	0x001e847f
 8001b64:	003d08ff 	.word	0x003d08ff
 8001b68:	431bde83 	.word	0x431bde83
 8001b6c:	10624dd3 	.word	0x10624dd3

08001b70 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e021      	b.n	8001bc6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2224      	movs	r2, #36	; 0x24
 8001b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0201 	bic.w	r2, r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff f88c 	bl	8000cb8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	4608      	mov	r0, r1
 8001bda:	4611      	mov	r1, r2
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	817b      	strh	r3, [r7, #10]
 8001be2:	460b      	mov	r3, r1
 8001be4:	813b      	strh	r3, [r7, #8]
 8001be6:	4613      	mov	r3, r2
 8001be8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bea:	f7ff faff 	bl	80011ec <HAL_GetTick>
 8001bee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b20      	cmp	r3, #32
 8001bfa:	f040 80d9 	bne.w	8001db0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2319      	movs	r3, #25
 8001c04:	2201      	movs	r2, #1
 8001c06:	496d      	ldr	r1, [pc, #436]	; (8001dbc <HAL_I2C_Mem_Write+0x1ec>)
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f971 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001c14:	2302      	movs	r3, #2
 8001c16:	e0cc      	b.n	8001db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d101      	bne.n	8001c26 <HAL_I2C_Mem_Write+0x56>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e0c5      	b.n	8001db2 <HAL_I2C_Mem_Write+0x1e2>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d007      	beq.n	8001c4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2221      	movs	r2, #33	; 0x21
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2240      	movs	r2, #64	; 0x40
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a3a      	ldr	r2, [r7, #32]
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4a4d      	ldr	r2, [pc, #308]	; (8001dc0 <HAL_I2C_Mem_Write+0x1f0>)
 8001c8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c8e:	88f8      	ldrh	r0, [r7, #6]
 8001c90:	893a      	ldrh	r2, [r7, #8]
 8001c92:	8979      	ldrh	r1, [r7, #10]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 f890 	bl	8001dc4 <I2C_RequestMemoryWrite>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d052      	beq.n	8001d50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e081      	b.n	8001db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f9f2 	bl	800209c <I2C_WaitOnTXEFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00d      	beq.n	8001cda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d107      	bne.n	8001cd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06b      	b.n	8001db2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d11b      	bne.n	8001d50 <HAL_I2C_Mem_Write+0x180>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d017      	beq.n	8001d50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1aa      	bne.n	8001cae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f9de 	bl	800211e <I2C_WaitOnBTFFlagUntilTimeout>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00d      	beq.n	8001d84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d107      	bne.n	8001d80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e016      	b.n	8001db2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2220      	movs	r2, #32
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	e000      	b.n	8001db2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001db0:	2302      	movs	r3, #2
  }
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	00100002 	.word	0x00100002
 8001dc0:	ffff0000 	.word	0xffff0000

08001dc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	4608      	mov	r0, r1
 8001dce:	4611      	mov	r1, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	817b      	strh	r3, [r7, #10]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	813b      	strh	r3, [r7, #8]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 f878 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00d      	beq.n	8001e22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e14:	d103      	bne.n	8001e1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e05f      	b.n	8001ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e22:	897b      	ldrh	r3, [r7, #10]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	6a3a      	ldr	r2, [r7, #32]
 8001e36:	492d      	ldr	r1, [pc, #180]	; (8001eec <I2C_RequestMemoryWrite+0x128>)
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 f8b0 	bl	8001f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e04c      	b.n	8001ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	6a39      	ldr	r1, [r7, #32]
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f91a 	bl	800209c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00d      	beq.n	8001e8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d107      	bne.n	8001e86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e02b      	b.n	8001ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d105      	bne.n	8001e9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e90:	893b      	ldrh	r3, [r7, #8]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	611a      	str	r2, [r3, #16]
 8001e9a:	e021      	b.n	8001ee0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e9c:	893b      	ldrh	r3, [r7, #8]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eac:	6a39      	ldr	r1, [r7, #32]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f8f4 	bl	800209c <I2C_WaitOnTXEFlagUntilTimeout>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00d      	beq.n	8001ed6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d107      	bne.n	8001ed2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e005      	b.n	8001ee2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ed6:	893b      	ldrh	r3, [r7, #8]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	00010002 	.word	0x00010002

08001ef0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	4613      	mov	r3, r2
 8001efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f00:	e025      	b.n	8001f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d021      	beq.n	8001f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0a:	f7ff f96f 	bl	80011ec <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d302      	bcc.n	8001f20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d116      	bne.n	8001f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f043 0220 	orr.w	r2, r3, #32
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e023      	b.n	8001f96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10d      	bne.n	8001f74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4013      	ands	r3, r2
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf0c      	ite	eq
 8001f6a:	2301      	moveq	r3, #1
 8001f6c:	2300      	movne	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	e00c      	b.n	8001f8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bf0c      	ite	eq
 8001f86:	2301      	moveq	r3, #1
 8001f88:	2300      	movne	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d0b6      	beq.n	8001f02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fac:	e051      	b.n	8002052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fbc:	d123      	bne.n	8002006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fcc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f043 0204 	orr.w	r2, r3, #4
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e046      	b.n	8002094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200c:	d021      	beq.n	8002052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200e:	f7ff f8ed 	bl	80011ec <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	429a      	cmp	r2, r3
 800201c:	d302      	bcc.n	8002024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d116      	bne.n	8002052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f043 0220 	orr.w	r2, r3, #32
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e020      	b.n	8002094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	0c1b      	lsrs	r3, r3, #16
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d10c      	bne.n	8002076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	4013      	ands	r3, r2
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf14      	ite	ne
 800206e:	2301      	movne	r3, #1
 8002070:	2300      	moveq	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	e00b      	b.n	800208e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	43da      	mvns	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	4013      	ands	r3, r2
 8002082:	b29b      	uxth	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d18d      	bne.n	8001fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020a8:	e02d      	b.n	8002106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f878 	bl	80021a0 <I2C_IsAcknowledgeFailed>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e02d      	b.n	8002116 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d021      	beq.n	8002106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c2:	f7ff f893 	bl	80011ec <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d302      	bcc.n	80020d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d116      	bne.n	8002106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f043 0220 	orr.w	r2, r3, #32
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e007      	b.n	8002116 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002110:	2b80      	cmp	r3, #128	; 0x80
 8002112:	d1ca      	bne.n	80020aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800212a:	e02d      	b.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f837 	bl	80021a0 <I2C_IsAcknowledgeFailed>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e02d      	b.n	8002198 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002142:	d021      	beq.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002144:	f7ff f852 	bl	80011ec <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	429a      	cmp	r2, r3
 8002152:	d302      	bcc.n	800215a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d116      	bne.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f043 0220 	orr.w	r2, r3, #32
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e007      	b.n	8002198 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b04      	cmp	r3, #4
 8002194:	d1ca      	bne.n	800212c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b6:	d11b      	bne.n	80021f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f043 0204 	orr.w	r2, r3, #4
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e26c      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8087 	beq.w	800232a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800221c:	4b92      	ldr	r3, [pc, #584]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b04      	cmp	r3, #4
 8002226:	d00c      	beq.n	8002242 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002228:	4b8f      	ldr	r3, [pc, #572]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 030c 	and.w	r3, r3, #12
 8002230:	2b08      	cmp	r3, #8
 8002232:	d112      	bne.n	800225a <HAL_RCC_OscConfig+0x5e>
 8002234:	4b8c      	ldr	r3, [pc, #560]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002240:	d10b      	bne.n	800225a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002242:	4b89      	ldr	r3, [pc, #548]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d06c      	beq.n	8002328 <HAL_RCC_OscConfig+0x12c>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d168      	bne.n	8002328 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e246      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002262:	d106      	bne.n	8002272 <HAL_RCC_OscConfig+0x76>
 8002264:	4b80      	ldr	r3, [pc, #512]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a7f      	ldr	r2, [pc, #508]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 800226a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	e02e      	b.n	80022d0 <HAL_RCC_OscConfig+0xd4>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10c      	bne.n	8002294 <HAL_RCC_OscConfig+0x98>
 800227a:	4b7b      	ldr	r3, [pc, #492]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7a      	ldr	r2, [pc, #488]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b78      	ldr	r3, [pc, #480]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a77      	ldr	r2, [pc, #476]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 800228c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e01d      	b.n	80022d0 <HAL_RCC_OscConfig+0xd4>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0xbc>
 800229e:	4b72      	ldr	r3, [pc, #456]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a71      	ldr	r2, [pc, #452]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b6f      	ldr	r3, [pc, #444]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a6e      	ldr	r2, [pc, #440]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e00b      	b.n	80022d0 <HAL_RCC_OscConfig+0xd4>
 80022b8:	4b6b      	ldr	r3, [pc, #428]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a6a      	ldr	r2, [pc, #424]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b68      	ldr	r3, [pc, #416]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a67      	ldr	r2, [pc, #412]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe ff88 	bl	80011ec <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e0:	f7fe ff84 	bl	80011ec <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e1fa      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b5d      	ldr	r3, [pc, #372]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0xe4>
 80022fe:	e014      	b.n	800232a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe ff74 	bl	80011ec <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe ff70 	bl	80011ec <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1e6      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x10c>
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d063      	beq.n	80023fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002336:	4b4c      	ldr	r3, [pc, #304]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002342:	4b49      	ldr	r3, [pc, #292]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b08      	cmp	r3, #8
 800234c:	d11c      	bne.n	8002388 <HAL_RCC_OscConfig+0x18c>
 800234e:	4b46      	ldr	r3, [pc, #280]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d116      	bne.n	8002388 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	4b43      	ldr	r3, [pc, #268]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_RCC_OscConfig+0x176>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d001      	beq.n	8002372 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e1ba      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002372:	4b3d      	ldr	r3, [pc, #244]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4939      	ldr	r1, [pc, #228]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	e03a      	b.n	80023fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002390:	4b36      	ldr	r3, [pc, #216]	; (800246c <HAL_RCC_OscConfig+0x270>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7fe ff29 	bl	80011ec <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239e:	f7fe ff25 	bl	80011ec <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e19b      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4927      	ldr	r1, [pc, #156]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
 80023d0:	e015      	b.n	80023fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_RCC_OscConfig+0x270>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7fe ff08 	bl	80011ec <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e0:	f7fe ff04 	bl	80011ec <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e17a      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d03a      	beq.n	8002480 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d019      	beq.n	8002446 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002412:	4b17      	ldr	r3, [pc, #92]	; (8002470 <HAL_RCC_OscConfig+0x274>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002418:	f7fe fee8 	bl	80011ec <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002420:	f7fe fee4 	bl	80011ec <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e15a      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800243e:	2001      	movs	r0, #1
 8002440:	f000 fac6 	bl	80029d0 <RCC_Delay>
 8002444:	e01c      	b.n	8002480 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_RCC_OscConfig+0x274>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244c:	f7fe fece 	bl	80011ec <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002452:	e00f      	b.n	8002474 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002454:	f7fe feca 	bl	80011ec <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d908      	bls.n	8002474 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e140      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
 800246c:	42420000 	.word	0x42420000
 8002470:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	4b9e      	ldr	r3, [pc, #632]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e9      	bne.n	8002454 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80a6 	beq.w	80025da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002492:	4b97      	ldr	r3, [pc, #604]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10d      	bne.n	80024ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	4b94      	ldr	r3, [pc, #592]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4a93      	ldr	r2, [pc, #588]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a8:	61d3      	str	r3, [r2, #28]
 80024aa:	4b91      	ldr	r3, [pc, #580]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b6:	2301      	movs	r3, #1
 80024b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	4b8e      	ldr	r3, [pc, #568]	; (80026f4 <HAL_RCC_OscConfig+0x4f8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d118      	bne.n	80024f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c6:	4b8b      	ldr	r3, [pc, #556]	; (80026f4 <HAL_RCC_OscConfig+0x4f8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a8a      	ldr	r2, [pc, #552]	; (80026f4 <HAL_RCC_OscConfig+0x4f8>)
 80024cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d2:	f7fe fe8b 	bl	80011ec <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024da:	f7fe fe87 	bl	80011ec <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b64      	cmp	r3, #100	; 0x64
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e0fd      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	4b81      	ldr	r3, [pc, #516]	; (80026f4 <HAL_RCC_OscConfig+0x4f8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0x312>
 8002500:	4b7b      	ldr	r3, [pc, #492]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4a7a      	ldr	r2, [pc, #488]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6213      	str	r3, [r2, #32]
 800250c:	e02d      	b.n	800256a <HAL_RCC_OscConfig+0x36e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x334>
 8002516:	4b76      	ldr	r3, [pc, #472]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a75      	ldr	r2, [pc, #468]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	6213      	str	r3, [r2, #32]
 8002522:	4b73      	ldr	r3, [pc, #460]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4a72      	ldr	r2, [pc, #456]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	f023 0304 	bic.w	r3, r3, #4
 800252c:	6213      	str	r3, [r2, #32]
 800252e:	e01c      	b.n	800256a <HAL_RCC_OscConfig+0x36e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b05      	cmp	r3, #5
 8002536:	d10c      	bne.n	8002552 <HAL_RCC_OscConfig+0x356>
 8002538:	4b6d      	ldr	r3, [pc, #436]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4a6c      	ldr	r2, [pc, #432]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 800253e:	f043 0304 	orr.w	r3, r3, #4
 8002542:	6213      	str	r3, [r2, #32]
 8002544:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	4a69      	ldr	r2, [pc, #420]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6213      	str	r3, [r2, #32]
 8002550:	e00b      	b.n	800256a <HAL_RCC_OscConfig+0x36e>
 8002552:	4b67      	ldr	r3, [pc, #412]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4a66      	ldr	r2, [pc, #408]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002558:	f023 0301 	bic.w	r3, r3, #1
 800255c:	6213      	str	r3, [r2, #32]
 800255e:	4b64      	ldr	r3, [pc, #400]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	4a63      	ldr	r2, [pc, #396]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002564:	f023 0304 	bic.w	r3, r3, #4
 8002568:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d015      	beq.n	800259e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002572:	f7fe fe3b 	bl	80011ec <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002578:	e00a      	b.n	8002590 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7fe fe37 	bl	80011ec <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	; 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e0ab      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	4b57      	ldr	r3, [pc, #348]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0ee      	beq.n	800257a <HAL_RCC_OscConfig+0x37e>
 800259c:	e014      	b.n	80025c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7fe fe25 	bl	80011ec <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a4:	e00a      	b.n	80025bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a6:	f7fe fe21 	bl	80011ec <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e095      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025bc:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ee      	bne.n	80025a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d105      	bne.n	80025da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ce:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	4a47      	ldr	r2, [pc, #284]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8081 	beq.w	80026e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e4:	4b42      	ldr	r3, [pc, #264]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d061      	beq.n	80026b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d146      	bne.n	8002686 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f8:	4b3f      	ldr	r3, [pc, #252]	; (80026f8 <HAL_RCC_OscConfig+0x4fc>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7fe fdf5 	bl	80011ec <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002606:	f7fe fdf1 	bl	80011ec <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e067      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002618:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f0      	bne.n	8002606 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262c:	d108      	bne.n	8002640 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800262e:	4b30      	ldr	r3, [pc, #192]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	492d      	ldr	r1, [pc, #180]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002640:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a19      	ldr	r1, [r3, #32]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	430b      	orrs	r3, r1
 8002652:	4927      	ldr	r1, [pc, #156]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002658:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <HAL_RCC_OscConfig+0x4fc>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265e:	f7fe fdc5 	bl	80011ec <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002666:	f7fe fdc1 	bl	80011ec <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e037      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x46a>
 8002684:	e02f      	b.n	80026e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002686:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <HAL_RCC_OscConfig+0x4fc>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe fdae 	bl	80011ec <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002694:	f7fe fdaa 	bl	80011ec <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e020      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x498>
 80026b2:	e018      	b.n	80026e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e013      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d001      	beq.n	80026e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40007000 	.word	0x40007000
 80026f8:	42420060 	.word	0x42420060

080026fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0d0      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d910      	bls.n	8002740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b67      	ldr	r3, [pc, #412]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 0207 	bic.w	r2, r3, #7
 8002726:	4965      	ldr	r1, [pc, #404]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b63      	ldr	r3, [pc, #396]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0b8      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002758:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a58      	ldr	r2, [pc, #352]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002762:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002770:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a52      	ldr	r2, [pc, #328]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800277a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	494d      	ldr	r1, [pc, #308]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d040      	beq.n	800281c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d115      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e07f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e073      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06b      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027da:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f023 0203 	bic.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4936      	ldr	r1, [pc, #216]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ec:	f7fe fcfe 	bl	80011ec <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	e00a      	b.n	800280a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f4:	f7fe fcfa 	bl	80011ec <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e053      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 020c 	and.w	r2, r3, #12
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	429a      	cmp	r2, r3
 800281a:	d1eb      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d210      	bcs.n	800284c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 0207 	bic.w	r2, r3, #7
 8002832:	4922      	ldr	r1, [pc, #136]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e032      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4916      	ldr	r1, [pc, #88]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	490e      	ldr	r1, [pc, #56]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800288a:	f000 f821 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 800288e:	4601      	mov	r1, r0
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	fa21 f303 	lsr.w	r3, r1, r3
 80028a2:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <HAL_RCC_ClockConfig+0x1cc>)
 80028a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_RCC_ClockConfig+0x1d0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fc5c 	bl	8001168 <HAL_InitTick>

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40022000 	.word	0x40022000
 80028c0:	40021000 	.word	0x40021000
 80028c4:	08004ff4 	.word	0x08004ff4
 80028c8:	20000008 	.word	0x20000008
 80028cc:	2000000c 	.word	0x2000000c

080028d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d0:	b490      	push	{r4, r7}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028d6:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028d8:	1d3c      	adds	r4, r7, #4
 80028da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028e0:	4b28      	ldr	r3, [pc, #160]	; (8002984 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	2300      	movs	r3, #0
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028fa:	4b23      	ldr	r3, [pc, #140]	; (8002988 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b04      	cmp	r3, #4
 8002908:	d002      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x40>
 800290a:	2b08      	cmp	r3, #8
 800290c:	d003      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x46>
 800290e:	e02d      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002910:	4b1e      	ldr	r3, [pc, #120]	; (800298c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002912:	623b      	str	r3, [r7, #32]
      break;
 8002914:	e02d      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	0c9b      	lsrs	r3, r3, #18
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002922:	4413      	add	r3, r2
 8002924:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002928:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d013      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002934:	4b14      	ldr	r3, [pc, #80]	; (8002988 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	0c5b      	lsrs	r3, r3, #17
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002942:	4413      	add	r3, r2
 8002944:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002948:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	4a0f      	ldr	r2, [pc, #60]	; (800298c <HAL_RCC_GetSysClockFreq+0xbc>)
 800294e:	fb02 f203 	mul.w	r2, r2, r3
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
 800295a:	e004      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002960:	fb02 f303 	mul.w	r3, r2, r3
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	623b      	str	r3, [r7, #32]
      break;
 800296a:	e002      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800296c:	4b07      	ldr	r3, [pc, #28]	; (800298c <HAL_RCC_GetSysClockFreq+0xbc>)
 800296e:	623b      	str	r3, [r7, #32]
      break;
 8002970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002972:	6a3b      	ldr	r3, [r7, #32]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3728      	adds	r7, #40	; 0x28
 8002978:	46bd      	mov	sp, r7
 800297a:	bc90      	pop	{r4, r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	08004284 	.word	0x08004284
 8002984:	08004294 	.word	0x08004294
 8002988:	40021000 	.word	0x40021000
 800298c:	007a1200 	.word	0x007a1200
 8002990:	003d0900 	.word	0x003d0900

08002994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002998:	4b02      	ldr	r3, [pc, #8]	; (80029a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	20000008 	.word	0x20000008

080029a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029ac:	f7ff fff2 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029b0:	4601      	mov	r1, r0
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4a03      	ldr	r2, [pc, #12]	; (80029cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	08005004 	.word	0x08005004

080029d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <RCC_Delay+0x34>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <RCC_Delay+0x38>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0a5b      	lsrs	r3, r3, #9
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029ec:	bf00      	nop
  }
  while (Delay --);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1e5a      	subs	r2, r3, #1
 80029f2:	60fa      	str	r2, [r7, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f9      	bne.n	80029ec <RCC_Delay+0x1c>
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000008 	.word	0x20000008
 8002a08:	10624dd3 	.word	0x10624dd3

08002a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e041      	b.n	8002aa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fe f962 	bl	8000cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3304      	adds	r3, #4
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	f000 fa92 	bl	8002f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d001      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e03a      	b.n	8002b3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a18      	ldr	r2, [pc, #96]	; (8002b44 <HAL_TIM_Base_Start_IT+0x98>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00e      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x58>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aee:	d009      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x58>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <HAL_TIM_Base_Start_IT+0x9c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d004      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x58>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <HAL_TIM_Base_Start_IT+0xa0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d111      	bne.n	8002b28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d010      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0201 	orr.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b26:	e007      	b.n	8002b38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	40012c00 	.word	0x40012c00
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	40000800 	.word	0x40000800

08002b50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6a1a      	ldr	r2, [r3, #32]
 8002b6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10f      	bne.n	8002b98 <HAL_TIM_Base_Stop_IT+0x48>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6a1a      	ldr	r2, [r3, #32]
 8002b7e:	f240 4344 	movw	r3, #1092	; 0x444
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d107      	bne.n	8002b98 <HAL_TIM_Base_Stop_IT+0x48>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d122      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d11b      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0202 	mvn.w	r2, #2
 8002bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f9a4 	bl	8002f3c <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f997 	bl	8002f2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f9a6 	bl	8002f4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d122      	bne.n	8002c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d11b      	bne.n	8002c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0204 	mvn.w	r2, #4
 8002c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f97a 	bl	8002f3c <HAL_TIM_IC_CaptureCallback>
 8002c48:	e005      	b.n	8002c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f96d 	bl	8002f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f97c 	bl	8002f4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d122      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d11b      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0208 	mvn.w	r2, #8
 8002c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2204      	movs	r2, #4
 8002c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f950 	bl	8002f3c <HAL_TIM_IC_CaptureCallback>
 8002c9c:	e005      	b.n	8002caa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f943 	bl	8002f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f952 	bl	8002f4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2b10      	cmp	r3, #16
 8002cbc:	d122      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d11b      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0210 	mvn.w	r2, #16
 8002cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2208      	movs	r2, #8
 8002cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f926 	bl	8002f3c <HAL_TIM_IC_CaptureCallback>
 8002cf0:	e005      	b.n	8002cfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f919 	bl	8002f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f928 	bl	8002f4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d10e      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d107      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0201 	mvn.w	r2, #1
 8002d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fd fcfc 	bl	8000728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3a:	2b80      	cmp	r3, #128	; 0x80
 8002d3c:	d10e      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d48:	2b80      	cmp	r3, #128	; 0x80
 8002d4a:	d107      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa6b 	bl	8003232 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d66:	2b40      	cmp	r3, #64	; 0x40
 8002d68:	d10e      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d107      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f8ec 	bl	8002f60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d10e      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d107      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0220 	mvn.w	r2, #32
 8002dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fa36 	bl	8003220 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_TIM_ConfigClockSource+0x18>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e0a6      	b.n	8002f22 <HAL_TIM_ConfigClockSource+0x166>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002df2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dfa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d067      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0x120>
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d80b      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x6c>
 8002e10:	2b10      	cmp	r3, #16
 8002e12:	d073      	beq.n	8002efc <HAL_TIM_ConfigClockSource+0x140>
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d802      	bhi.n	8002e1e <HAL_TIM_ConfigClockSource+0x62>
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d06f      	beq.n	8002efc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e1c:	e078      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d06c      	beq.n	8002efc <HAL_TIM_ConfigClockSource+0x140>
 8002e22:	2b30      	cmp	r3, #48	; 0x30
 8002e24:	d06a      	beq.n	8002efc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002e26:	e073      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e28:	2b70      	cmp	r3, #112	; 0x70
 8002e2a:	d00d      	beq.n	8002e48 <HAL_TIM_ConfigClockSource+0x8c>
 8002e2c:	2b70      	cmp	r3, #112	; 0x70
 8002e2e:	d804      	bhi.n	8002e3a <HAL_TIM_ConfigClockSource+0x7e>
 8002e30:	2b50      	cmp	r3, #80	; 0x50
 8002e32:	d033      	beq.n	8002e9c <HAL_TIM_ConfigClockSource+0xe0>
 8002e34:	2b60      	cmp	r3, #96	; 0x60
 8002e36:	d041      	beq.n	8002ebc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002e38:	e06a      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3e:	d066      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x152>
 8002e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e44:	d017      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002e46:	e063      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	6899      	ldr	r1, [r3, #8]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f000 f965 	bl	8003126 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e6a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	609a      	str	r2, [r3, #8]
      break;
 8002e74:	e04c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6899      	ldr	r1, [r3, #8]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f000 f94e 	bl	8003126 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e98:	609a      	str	r2, [r3, #8]
      break;
 8002e9a:	e039      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f000 f8c5 	bl	8003038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2150      	movs	r1, #80	; 0x50
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 f91c 	bl	80030f2 <TIM_ITRx_SetConfig>
      break;
 8002eba:	e029      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f000 f8e3 	bl	8003094 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2160      	movs	r1, #96	; 0x60
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 f90c 	bl	80030f2 <TIM_ITRx_SetConfig>
      break;
 8002eda:	e019      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f000 f8a5 	bl	8003038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2140      	movs	r1, #64	; 0x40
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 f8fc 	bl	80030f2 <TIM_ITRx_SetConfig>
      break;
 8002efa:	e009      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f000 f8f3 	bl	80030f2 <TIM_ITRx_SetConfig>
        break;
 8002f0c:	e000      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002f0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr
	...

08002f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a29      	ldr	r2, [pc, #164]	; (800302c <TIM_Base_SetConfig+0xb8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d00b      	beq.n	8002fa4 <TIM_Base_SetConfig+0x30>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f92:	d007      	beq.n	8002fa4 <TIM_Base_SetConfig+0x30>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a26      	ldr	r2, [pc, #152]	; (8003030 <TIM_Base_SetConfig+0xbc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d003      	beq.n	8002fa4 <TIM_Base_SetConfig+0x30>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a25      	ldr	r2, [pc, #148]	; (8003034 <TIM_Base_SetConfig+0xc0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d108      	bne.n	8002fb6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a1c      	ldr	r2, [pc, #112]	; (800302c <TIM_Base_SetConfig+0xb8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00b      	beq.n	8002fd6 <TIM_Base_SetConfig+0x62>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc4:	d007      	beq.n	8002fd6 <TIM_Base_SetConfig+0x62>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a19      	ldr	r2, [pc, #100]	; (8003030 <TIM_Base_SetConfig+0xbc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <TIM_Base_SetConfig+0x62>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a18      	ldr	r2, [pc, #96]	; (8003034 <TIM_Base_SetConfig+0xc0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d108      	bne.n	8002fe8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a07      	ldr	r2, [pc, #28]	; (800302c <TIM_Base_SetConfig+0xb8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d103      	bne.n	800301c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	615a      	str	r2, [r3, #20]
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	40012c00 	.word	0x40012c00
 8003030:	40000400 	.word	0x40000400
 8003034:	40000800 	.word	0x40000800

08003038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	f023 0201 	bic.w	r2, r3, #1
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f023 030a 	bic.w	r3, r3, #10
 8003074:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	621a      	str	r2, [r3, #32]
}
 800308a:	bf00      	nop
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f023 0210 	bic.w	r2, r3, #16
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	031b      	lsls	r3, r3, #12
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	621a      	str	r2, [r3, #32]
}
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	f043 0307 	orr.w	r3, r3, #7
 8003114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	609a      	str	r2, [r3, #8]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003126:	b480      	push	{r7}
 8003128:	b087      	sub	sp, #28
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
 8003132:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003140:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	021a      	lsls	r2, r3, #8
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	431a      	orrs	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	4313      	orrs	r3, r2
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	609a      	str	r2, [r3, #8]
}
 800315a:	bf00      	nop
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003178:	2302      	movs	r3, #2
 800317a:	e046      	b.n	800320a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a16      	ldr	r2, [pc, #88]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00e      	beq.n	80031de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c8:	d009      	beq.n	80031de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a12      	ldr	r2, [pc, #72]	; (8003218 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a10      	ldr	r2, [pc, #64]	; (800321c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d10c      	bne.n	80031f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	40012c00 	.word	0x40012c00
 8003218:	40000400 	.word	0x40000400
 800321c:	40000800 	.word	0x40000800

08003220 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr

08003232 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <__errno>:
 8003244:	4b01      	ldr	r3, [pc, #4]	; (800324c <__errno+0x8>)
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000014 	.word	0x20000014

08003250 <__libc_init_array>:
 8003250:	b570      	push	{r4, r5, r6, lr}
 8003252:	2500      	movs	r5, #0
 8003254:	4e0c      	ldr	r6, [pc, #48]	; (8003288 <__libc_init_array+0x38>)
 8003256:	4c0d      	ldr	r4, [pc, #52]	; (800328c <__libc_init_array+0x3c>)
 8003258:	1ba4      	subs	r4, r4, r6
 800325a:	10a4      	asrs	r4, r4, #2
 800325c:	42a5      	cmp	r5, r4
 800325e:	d109      	bne.n	8003274 <__libc_init_array+0x24>
 8003260:	f000 ff74 	bl	800414c <_init>
 8003264:	2500      	movs	r5, #0
 8003266:	4e0a      	ldr	r6, [pc, #40]	; (8003290 <__libc_init_array+0x40>)
 8003268:	4c0a      	ldr	r4, [pc, #40]	; (8003294 <__libc_init_array+0x44>)
 800326a:	1ba4      	subs	r4, r4, r6
 800326c:	10a4      	asrs	r4, r4, #2
 800326e:	42a5      	cmp	r5, r4
 8003270:	d105      	bne.n	800327e <__libc_init_array+0x2e>
 8003272:	bd70      	pop	{r4, r5, r6, pc}
 8003274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003278:	4798      	blx	r3
 800327a:	3501      	adds	r5, #1
 800327c:	e7ee      	b.n	800325c <__libc_init_array+0xc>
 800327e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003282:	4798      	blx	r3
 8003284:	3501      	adds	r5, #1
 8003286:	e7f2      	b.n	800326e <__libc_init_array+0x1e>
 8003288:	080050a4 	.word	0x080050a4
 800328c:	080050a4 	.word	0x080050a4
 8003290:	080050a4 	.word	0x080050a4
 8003294:	080050a8 	.word	0x080050a8

08003298 <memset>:
 8003298:	4603      	mov	r3, r0
 800329a:	4402      	add	r2, r0
 800329c:	4293      	cmp	r3, r2
 800329e:	d100      	bne.n	80032a2 <memset+0xa>
 80032a0:	4770      	bx	lr
 80032a2:	f803 1b01 	strb.w	r1, [r3], #1
 80032a6:	e7f9      	b.n	800329c <memset+0x4>

080032a8 <iprintf>:
 80032a8:	b40f      	push	{r0, r1, r2, r3}
 80032aa:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <iprintf+0x2c>)
 80032ac:	b513      	push	{r0, r1, r4, lr}
 80032ae:	681c      	ldr	r4, [r3, #0]
 80032b0:	b124      	cbz	r4, 80032bc <iprintf+0x14>
 80032b2:	69a3      	ldr	r3, [r4, #24]
 80032b4:	b913      	cbnz	r3, 80032bc <iprintf+0x14>
 80032b6:	4620      	mov	r0, r4
 80032b8:	f000 fa22 	bl	8003700 <__sinit>
 80032bc:	ab05      	add	r3, sp, #20
 80032be:	9a04      	ldr	r2, [sp, #16]
 80032c0:	68a1      	ldr	r1, [r4, #8]
 80032c2:	4620      	mov	r0, r4
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	f000 fbd7 	bl	8003a78 <_vfiprintf_r>
 80032ca:	b002      	add	sp, #8
 80032cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032d0:	b004      	add	sp, #16
 80032d2:	4770      	bx	lr
 80032d4:	20000014 	.word	0x20000014

080032d8 <_puts_r>:
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	460e      	mov	r6, r1
 80032dc:	4605      	mov	r5, r0
 80032de:	b118      	cbz	r0, 80032e8 <_puts_r+0x10>
 80032e0:	6983      	ldr	r3, [r0, #24]
 80032e2:	b90b      	cbnz	r3, 80032e8 <_puts_r+0x10>
 80032e4:	f000 fa0c 	bl	8003700 <__sinit>
 80032e8:	69ab      	ldr	r3, [r5, #24]
 80032ea:	68ac      	ldr	r4, [r5, #8]
 80032ec:	b913      	cbnz	r3, 80032f4 <_puts_r+0x1c>
 80032ee:	4628      	mov	r0, r5
 80032f0:	f000 fa06 	bl	8003700 <__sinit>
 80032f4:	4b23      	ldr	r3, [pc, #140]	; (8003384 <_puts_r+0xac>)
 80032f6:	429c      	cmp	r4, r3
 80032f8:	d117      	bne.n	800332a <_puts_r+0x52>
 80032fa:	686c      	ldr	r4, [r5, #4]
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	071b      	lsls	r3, r3, #28
 8003300:	d51d      	bpl.n	800333e <_puts_r+0x66>
 8003302:	6923      	ldr	r3, [r4, #16]
 8003304:	b1db      	cbz	r3, 800333e <_puts_r+0x66>
 8003306:	3e01      	subs	r6, #1
 8003308:	68a3      	ldr	r3, [r4, #8]
 800330a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800330e:	3b01      	subs	r3, #1
 8003310:	60a3      	str	r3, [r4, #8]
 8003312:	b9e9      	cbnz	r1, 8003350 <_puts_r+0x78>
 8003314:	2b00      	cmp	r3, #0
 8003316:	da2e      	bge.n	8003376 <_puts_r+0x9e>
 8003318:	4622      	mov	r2, r4
 800331a:	210a      	movs	r1, #10
 800331c:	4628      	mov	r0, r5
 800331e:	f000 f83f 	bl	80033a0 <__swbuf_r>
 8003322:	3001      	adds	r0, #1
 8003324:	d011      	beq.n	800334a <_puts_r+0x72>
 8003326:	200a      	movs	r0, #10
 8003328:	e011      	b.n	800334e <_puts_r+0x76>
 800332a:	4b17      	ldr	r3, [pc, #92]	; (8003388 <_puts_r+0xb0>)
 800332c:	429c      	cmp	r4, r3
 800332e:	d101      	bne.n	8003334 <_puts_r+0x5c>
 8003330:	68ac      	ldr	r4, [r5, #8]
 8003332:	e7e3      	b.n	80032fc <_puts_r+0x24>
 8003334:	4b15      	ldr	r3, [pc, #84]	; (800338c <_puts_r+0xb4>)
 8003336:	429c      	cmp	r4, r3
 8003338:	bf08      	it	eq
 800333a:	68ec      	ldreq	r4, [r5, #12]
 800333c:	e7de      	b.n	80032fc <_puts_r+0x24>
 800333e:	4621      	mov	r1, r4
 8003340:	4628      	mov	r0, r5
 8003342:	f000 f87f 	bl	8003444 <__swsetup_r>
 8003346:	2800      	cmp	r0, #0
 8003348:	d0dd      	beq.n	8003306 <_puts_r+0x2e>
 800334a:	f04f 30ff 	mov.w	r0, #4294967295
 800334e:	bd70      	pop	{r4, r5, r6, pc}
 8003350:	2b00      	cmp	r3, #0
 8003352:	da04      	bge.n	800335e <_puts_r+0x86>
 8003354:	69a2      	ldr	r2, [r4, #24]
 8003356:	429a      	cmp	r2, r3
 8003358:	dc06      	bgt.n	8003368 <_puts_r+0x90>
 800335a:	290a      	cmp	r1, #10
 800335c:	d004      	beq.n	8003368 <_puts_r+0x90>
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	6022      	str	r2, [r4, #0]
 8003364:	7019      	strb	r1, [r3, #0]
 8003366:	e7cf      	b.n	8003308 <_puts_r+0x30>
 8003368:	4622      	mov	r2, r4
 800336a:	4628      	mov	r0, r5
 800336c:	f000 f818 	bl	80033a0 <__swbuf_r>
 8003370:	3001      	adds	r0, #1
 8003372:	d1c9      	bne.n	8003308 <_puts_r+0x30>
 8003374:	e7e9      	b.n	800334a <_puts_r+0x72>
 8003376:	200a      	movs	r0, #10
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	6022      	str	r2, [r4, #0]
 800337e:	7018      	strb	r0, [r3, #0]
 8003380:	e7e5      	b.n	800334e <_puts_r+0x76>
 8003382:	bf00      	nop
 8003384:	08005030 	.word	0x08005030
 8003388:	08005050 	.word	0x08005050
 800338c:	08005010 	.word	0x08005010

08003390 <puts>:
 8003390:	4b02      	ldr	r3, [pc, #8]	; (800339c <puts+0xc>)
 8003392:	4601      	mov	r1, r0
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	f7ff bf9f 	b.w	80032d8 <_puts_r>
 800339a:	bf00      	nop
 800339c:	20000014 	.word	0x20000014

080033a0 <__swbuf_r>:
 80033a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a2:	460e      	mov	r6, r1
 80033a4:	4614      	mov	r4, r2
 80033a6:	4605      	mov	r5, r0
 80033a8:	b118      	cbz	r0, 80033b2 <__swbuf_r+0x12>
 80033aa:	6983      	ldr	r3, [r0, #24]
 80033ac:	b90b      	cbnz	r3, 80033b2 <__swbuf_r+0x12>
 80033ae:	f000 f9a7 	bl	8003700 <__sinit>
 80033b2:	4b21      	ldr	r3, [pc, #132]	; (8003438 <__swbuf_r+0x98>)
 80033b4:	429c      	cmp	r4, r3
 80033b6:	d12a      	bne.n	800340e <__swbuf_r+0x6e>
 80033b8:	686c      	ldr	r4, [r5, #4]
 80033ba:	69a3      	ldr	r3, [r4, #24]
 80033bc:	60a3      	str	r3, [r4, #8]
 80033be:	89a3      	ldrh	r3, [r4, #12]
 80033c0:	071a      	lsls	r2, r3, #28
 80033c2:	d52e      	bpl.n	8003422 <__swbuf_r+0x82>
 80033c4:	6923      	ldr	r3, [r4, #16]
 80033c6:	b363      	cbz	r3, 8003422 <__swbuf_r+0x82>
 80033c8:	6923      	ldr	r3, [r4, #16]
 80033ca:	6820      	ldr	r0, [r4, #0]
 80033cc:	b2f6      	uxtb	r6, r6
 80033ce:	1ac0      	subs	r0, r0, r3
 80033d0:	6963      	ldr	r3, [r4, #20]
 80033d2:	4637      	mov	r7, r6
 80033d4:	4283      	cmp	r3, r0
 80033d6:	dc04      	bgt.n	80033e2 <__swbuf_r+0x42>
 80033d8:	4621      	mov	r1, r4
 80033da:	4628      	mov	r0, r5
 80033dc:	f000 f926 	bl	800362c <_fflush_r>
 80033e0:	bb28      	cbnz	r0, 800342e <__swbuf_r+0x8e>
 80033e2:	68a3      	ldr	r3, [r4, #8]
 80033e4:	3001      	adds	r0, #1
 80033e6:	3b01      	subs	r3, #1
 80033e8:	60a3      	str	r3, [r4, #8]
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	6022      	str	r2, [r4, #0]
 80033f0:	701e      	strb	r6, [r3, #0]
 80033f2:	6963      	ldr	r3, [r4, #20]
 80033f4:	4283      	cmp	r3, r0
 80033f6:	d004      	beq.n	8003402 <__swbuf_r+0x62>
 80033f8:	89a3      	ldrh	r3, [r4, #12]
 80033fa:	07db      	lsls	r3, r3, #31
 80033fc:	d519      	bpl.n	8003432 <__swbuf_r+0x92>
 80033fe:	2e0a      	cmp	r6, #10
 8003400:	d117      	bne.n	8003432 <__swbuf_r+0x92>
 8003402:	4621      	mov	r1, r4
 8003404:	4628      	mov	r0, r5
 8003406:	f000 f911 	bl	800362c <_fflush_r>
 800340a:	b190      	cbz	r0, 8003432 <__swbuf_r+0x92>
 800340c:	e00f      	b.n	800342e <__swbuf_r+0x8e>
 800340e:	4b0b      	ldr	r3, [pc, #44]	; (800343c <__swbuf_r+0x9c>)
 8003410:	429c      	cmp	r4, r3
 8003412:	d101      	bne.n	8003418 <__swbuf_r+0x78>
 8003414:	68ac      	ldr	r4, [r5, #8]
 8003416:	e7d0      	b.n	80033ba <__swbuf_r+0x1a>
 8003418:	4b09      	ldr	r3, [pc, #36]	; (8003440 <__swbuf_r+0xa0>)
 800341a:	429c      	cmp	r4, r3
 800341c:	bf08      	it	eq
 800341e:	68ec      	ldreq	r4, [r5, #12]
 8003420:	e7cb      	b.n	80033ba <__swbuf_r+0x1a>
 8003422:	4621      	mov	r1, r4
 8003424:	4628      	mov	r0, r5
 8003426:	f000 f80d 	bl	8003444 <__swsetup_r>
 800342a:	2800      	cmp	r0, #0
 800342c:	d0cc      	beq.n	80033c8 <__swbuf_r+0x28>
 800342e:	f04f 37ff 	mov.w	r7, #4294967295
 8003432:	4638      	mov	r0, r7
 8003434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003436:	bf00      	nop
 8003438:	08005030 	.word	0x08005030
 800343c:	08005050 	.word	0x08005050
 8003440:	08005010 	.word	0x08005010

08003444 <__swsetup_r>:
 8003444:	4b32      	ldr	r3, [pc, #200]	; (8003510 <__swsetup_r+0xcc>)
 8003446:	b570      	push	{r4, r5, r6, lr}
 8003448:	681d      	ldr	r5, [r3, #0]
 800344a:	4606      	mov	r6, r0
 800344c:	460c      	mov	r4, r1
 800344e:	b125      	cbz	r5, 800345a <__swsetup_r+0x16>
 8003450:	69ab      	ldr	r3, [r5, #24]
 8003452:	b913      	cbnz	r3, 800345a <__swsetup_r+0x16>
 8003454:	4628      	mov	r0, r5
 8003456:	f000 f953 	bl	8003700 <__sinit>
 800345a:	4b2e      	ldr	r3, [pc, #184]	; (8003514 <__swsetup_r+0xd0>)
 800345c:	429c      	cmp	r4, r3
 800345e:	d10f      	bne.n	8003480 <__swsetup_r+0x3c>
 8003460:	686c      	ldr	r4, [r5, #4]
 8003462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003466:	b29a      	uxth	r2, r3
 8003468:	0715      	lsls	r5, r2, #28
 800346a:	d42c      	bmi.n	80034c6 <__swsetup_r+0x82>
 800346c:	06d0      	lsls	r0, r2, #27
 800346e:	d411      	bmi.n	8003494 <__swsetup_r+0x50>
 8003470:	2209      	movs	r2, #9
 8003472:	6032      	str	r2, [r6, #0]
 8003474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003478:	81a3      	strh	r3, [r4, #12]
 800347a:	f04f 30ff 	mov.w	r0, #4294967295
 800347e:	e03e      	b.n	80034fe <__swsetup_r+0xba>
 8003480:	4b25      	ldr	r3, [pc, #148]	; (8003518 <__swsetup_r+0xd4>)
 8003482:	429c      	cmp	r4, r3
 8003484:	d101      	bne.n	800348a <__swsetup_r+0x46>
 8003486:	68ac      	ldr	r4, [r5, #8]
 8003488:	e7eb      	b.n	8003462 <__swsetup_r+0x1e>
 800348a:	4b24      	ldr	r3, [pc, #144]	; (800351c <__swsetup_r+0xd8>)
 800348c:	429c      	cmp	r4, r3
 800348e:	bf08      	it	eq
 8003490:	68ec      	ldreq	r4, [r5, #12]
 8003492:	e7e6      	b.n	8003462 <__swsetup_r+0x1e>
 8003494:	0751      	lsls	r1, r2, #29
 8003496:	d512      	bpl.n	80034be <__swsetup_r+0x7a>
 8003498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800349a:	b141      	cbz	r1, 80034ae <__swsetup_r+0x6a>
 800349c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034a0:	4299      	cmp	r1, r3
 80034a2:	d002      	beq.n	80034aa <__swsetup_r+0x66>
 80034a4:	4630      	mov	r0, r6
 80034a6:	f000 fa19 	bl	80038dc <_free_r>
 80034aa:	2300      	movs	r3, #0
 80034ac:	6363      	str	r3, [r4, #52]	; 0x34
 80034ae:	89a3      	ldrh	r3, [r4, #12]
 80034b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034b4:	81a3      	strh	r3, [r4, #12]
 80034b6:	2300      	movs	r3, #0
 80034b8:	6063      	str	r3, [r4, #4]
 80034ba:	6923      	ldr	r3, [r4, #16]
 80034bc:	6023      	str	r3, [r4, #0]
 80034be:	89a3      	ldrh	r3, [r4, #12]
 80034c0:	f043 0308 	orr.w	r3, r3, #8
 80034c4:	81a3      	strh	r3, [r4, #12]
 80034c6:	6923      	ldr	r3, [r4, #16]
 80034c8:	b94b      	cbnz	r3, 80034de <__swsetup_r+0x9a>
 80034ca:	89a3      	ldrh	r3, [r4, #12]
 80034cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80034d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d4:	d003      	beq.n	80034de <__swsetup_r+0x9a>
 80034d6:	4621      	mov	r1, r4
 80034d8:	4630      	mov	r0, r6
 80034da:	f000 f9bf 	bl	800385c <__smakebuf_r>
 80034de:	89a2      	ldrh	r2, [r4, #12]
 80034e0:	f012 0301 	ands.w	r3, r2, #1
 80034e4:	d00c      	beq.n	8003500 <__swsetup_r+0xbc>
 80034e6:	2300      	movs	r3, #0
 80034e8:	60a3      	str	r3, [r4, #8]
 80034ea:	6963      	ldr	r3, [r4, #20]
 80034ec:	425b      	negs	r3, r3
 80034ee:	61a3      	str	r3, [r4, #24]
 80034f0:	6923      	ldr	r3, [r4, #16]
 80034f2:	b953      	cbnz	r3, 800350a <__swsetup_r+0xc6>
 80034f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034f8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80034fc:	d1ba      	bne.n	8003474 <__swsetup_r+0x30>
 80034fe:	bd70      	pop	{r4, r5, r6, pc}
 8003500:	0792      	lsls	r2, r2, #30
 8003502:	bf58      	it	pl
 8003504:	6963      	ldrpl	r3, [r4, #20]
 8003506:	60a3      	str	r3, [r4, #8]
 8003508:	e7f2      	b.n	80034f0 <__swsetup_r+0xac>
 800350a:	2000      	movs	r0, #0
 800350c:	e7f7      	b.n	80034fe <__swsetup_r+0xba>
 800350e:	bf00      	nop
 8003510:	20000014 	.word	0x20000014
 8003514:	08005030 	.word	0x08005030
 8003518:	08005050 	.word	0x08005050
 800351c:	08005010 	.word	0x08005010

08003520 <__sflush_r>:
 8003520:	898a      	ldrh	r2, [r1, #12]
 8003522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003526:	4605      	mov	r5, r0
 8003528:	0710      	lsls	r0, r2, #28
 800352a:	460c      	mov	r4, r1
 800352c:	d458      	bmi.n	80035e0 <__sflush_r+0xc0>
 800352e:	684b      	ldr	r3, [r1, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	dc05      	bgt.n	8003540 <__sflush_r+0x20>
 8003534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	dc02      	bgt.n	8003540 <__sflush_r+0x20>
 800353a:	2000      	movs	r0, #0
 800353c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003542:	2e00      	cmp	r6, #0
 8003544:	d0f9      	beq.n	800353a <__sflush_r+0x1a>
 8003546:	2300      	movs	r3, #0
 8003548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800354c:	682f      	ldr	r7, [r5, #0]
 800354e:	6a21      	ldr	r1, [r4, #32]
 8003550:	602b      	str	r3, [r5, #0]
 8003552:	d032      	beq.n	80035ba <__sflush_r+0x9a>
 8003554:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003556:	89a3      	ldrh	r3, [r4, #12]
 8003558:	075a      	lsls	r2, r3, #29
 800355a:	d505      	bpl.n	8003568 <__sflush_r+0x48>
 800355c:	6863      	ldr	r3, [r4, #4]
 800355e:	1ac0      	subs	r0, r0, r3
 8003560:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003562:	b10b      	cbz	r3, 8003568 <__sflush_r+0x48>
 8003564:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003566:	1ac0      	subs	r0, r0, r3
 8003568:	2300      	movs	r3, #0
 800356a:	4602      	mov	r2, r0
 800356c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800356e:	6a21      	ldr	r1, [r4, #32]
 8003570:	4628      	mov	r0, r5
 8003572:	47b0      	blx	r6
 8003574:	1c43      	adds	r3, r0, #1
 8003576:	89a3      	ldrh	r3, [r4, #12]
 8003578:	d106      	bne.n	8003588 <__sflush_r+0x68>
 800357a:	6829      	ldr	r1, [r5, #0]
 800357c:	291d      	cmp	r1, #29
 800357e:	d848      	bhi.n	8003612 <__sflush_r+0xf2>
 8003580:	4a29      	ldr	r2, [pc, #164]	; (8003628 <__sflush_r+0x108>)
 8003582:	40ca      	lsrs	r2, r1
 8003584:	07d6      	lsls	r6, r2, #31
 8003586:	d544      	bpl.n	8003612 <__sflush_r+0xf2>
 8003588:	2200      	movs	r2, #0
 800358a:	6062      	str	r2, [r4, #4]
 800358c:	6922      	ldr	r2, [r4, #16]
 800358e:	04d9      	lsls	r1, r3, #19
 8003590:	6022      	str	r2, [r4, #0]
 8003592:	d504      	bpl.n	800359e <__sflush_r+0x7e>
 8003594:	1c42      	adds	r2, r0, #1
 8003596:	d101      	bne.n	800359c <__sflush_r+0x7c>
 8003598:	682b      	ldr	r3, [r5, #0]
 800359a:	b903      	cbnz	r3, 800359e <__sflush_r+0x7e>
 800359c:	6560      	str	r0, [r4, #84]	; 0x54
 800359e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035a0:	602f      	str	r7, [r5, #0]
 80035a2:	2900      	cmp	r1, #0
 80035a4:	d0c9      	beq.n	800353a <__sflush_r+0x1a>
 80035a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035aa:	4299      	cmp	r1, r3
 80035ac:	d002      	beq.n	80035b4 <__sflush_r+0x94>
 80035ae:	4628      	mov	r0, r5
 80035b0:	f000 f994 	bl	80038dc <_free_r>
 80035b4:	2000      	movs	r0, #0
 80035b6:	6360      	str	r0, [r4, #52]	; 0x34
 80035b8:	e7c0      	b.n	800353c <__sflush_r+0x1c>
 80035ba:	2301      	movs	r3, #1
 80035bc:	4628      	mov	r0, r5
 80035be:	47b0      	blx	r6
 80035c0:	1c41      	adds	r1, r0, #1
 80035c2:	d1c8      	bne.n	8003556 <__sflush_r+0x36>
 80035c4:	682b      	ldr	r3, [r5, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0c5      	beq.n	8003556 <__sflush_r+0x36>
 80035ca:	2b1d      	cmp	r3, #29
 80035cc:	d001      	beq.n	80035d2 <__sflush_r+0xb2>
 80035ce:	2b16      	cmp	r3, #22
 80035d0:	d101      	bne.n	80035d6 <__sflush_r+0xb6>
 80035d2:	602f      	str	r7, [r5, #0]
 80035d4:	e7b1      	b.n	800353a <__sflush_r+0x1a>
 80035d6:	89a3      	ldrh	r3, [r4, #12]
 80035d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035dc:	81a3      	strh	r3, [r4, #12]
 80035de:	e7ad      	b.n	800353c <__sflush_r+0x1c>
 80035e0:	690f      	ldr	r7, [r1, #16]
 80035e2:	2f00      	cmp	r7, #0
 80035e4:	d0a9      	beq.n	800353a <__sflush_r+0x1a>
 80035e6:	0793      	lsls	r3, r2, #30
 80035e8:	bf18      	it	ne
 80035ea:	2300      	movne	r3, #0
 80035ec:	680e      	ldr	r6, [r1, #0]
 80035ee:	bf08      	it	eq
 80035f0:	694b      	ldreq	r3, [r1, #20]
 80035f2:	eba6 0807 	sub.w	r8, r6, r7
 80035f6:	600f      	str	r7, [r1, #0]
 80035f8:	608b      	str	r3, [r1, #8]
 80035fa:	f1b8 0f00 	cmp.w	r8, #0
 80035fe:	dd9c      	ble.n	800353a <__sflush_r+0x1a>
 8003600:	4643      	mov	r3, r8
 8003602:	463a      	mov	r2, r7
 8003604:	6a21      	ldr	r1, [r4, #32]
 8003606:	4628      	mov	r0, r5
 8003608:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800360a:	47b0      	blx	r6
 800360c:	2800      	cmp	r0, #0
 800360e:	dc06      	bgt.n	800361e <__sflush_r+0xfe>
 8003610:	89a3      	ldrh	r3, [r4, #12]
 8003612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003616:	81a3      	strh	r3, [r4, #12]
 8003618:	f04f 30ff 	mov.w	r0, #4294967295
 800361c:	e78e      	b.n	800353c <__sflush_r+0x1c>
 800361e:	4407      	add	r7, r0
 8003620:	eba8 0800 	sub.w	r8, r8, r0
 8003624:	e7e9      	b.n	80035fa <__sflush_r+0xda>
 8003626:	bf00      	nop
 8003628:	20400001 	.word	0x20400001

0800362c <_fflush_r>:
 800362c:	b538      	push	{r3, r4, r5, lr}
 800362e:	690b      	ldr	r3, [r1, #16]
 8003630:	4605      	mov	r5, r0
 8003632:	460c      	mov	r4, r1
 8003634:	b1db      	cbz	r3, 800366e <_fflush_r+0x42>
 8003636:	b118      	cbz	r0, 8003640 <_fflush_r+0x14>
 8003638:	6983      	ldr	r3, [r0, #24]
 800363a:	b90b      	cbnz	r3, 8003640 <_fflush_r+0x14>
 800363c:	f000 f860 	bl	8003700 <__sinit>
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <_fflush_r+0x48>)
 8003642:	429c      	cmp	r4, r3
 8003644:	d109      	bne.n	800365a <_fflush_r+0x2e>
 8003646:	686c      	ldr	r4, [r5, #4]
 8003648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800364c:	b17b      	cbz	r3, 800366e <_fflush_r+0x42>
 800364e:	4621      	mov	r1, r4
 8003650:	4628      	mov	r0, r5
 8003652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003656:	f7ff bf63 	b.w	8003520 <__sflush_r>
 800365a:	4b07      	ldr	r3, [pc, #28]	; (8003678 <_fflush_r+0x4c>)
 800365c:	429c      	cmp	r4, r3
 800365e:	d101      	bne.n	8003664 <_fflush_r+0x38>
 8003660:	68ac      	ldr	r4, [r5, #8]
 8003662:	e7f1      	b.n	8003648 <_fflush_r+0x1c>
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <_fflush_r+0x50>)
 8003666:	429c      	cmp	r4, r3
 8003668:	bf08      	it	eq
 800366a:	68ec      	ldreq	r4, [r5, #12]
 800366c:	e7ec      	b.n	8003648 <_fflush_r+0x1c>
 800366e:	2000      	movs	r0, #0
 8003670:	bd38      	pop	{r3, r4, r5, pc}
 8003672:	bf00      	nop
 8003674:	08005030 	.word	0x08005030
 8003678:	08005050 	.word	0x08005050
 800367c:	08005010 	.word	0x08005010

08003680 <std>:
 8003680:	2300      	movs	r3, #0
 8003682:	b510      	push	{r4, lr}
 8003684:	4604      	mov	r4, r0
 8003686:	e9c0 3300 	strd	r3, r3, [r0]
 800368a:	6083      	str	r3, [r0, #8]
 800368c:	8181      	strh	r1, [r0, #12]
 800368e:	6643      	str	r3, [r0, #100]	; 0x64
 8003690:	81c2      	strh	r2, [r0, #14]
 8003692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003696:	6183      	str	r3, [r0, #24]
 8003698:	4619      	mov	r1, r3
 800369a:	2208      	movs	r2, #8
 800369c:	305c      	adds	r0, #92	; 0x5c
 800369e:	f7ff fdfb 	bl	8003298 <memset>
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <std+0x38>)
 80036a4:	6224      	str	r4, [r4, #32]
 80036a6:	6263      	str	r3, [r4, #36]	; 0x24
 80036a8:	4b04      	ldr	r3, [pc, #16]	; (80036bc <std+0x3c>)
 80036aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <std+0x40>)
 80036ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <std+0x44>)
 80036b2:	6323      	str	r3, [r4, #48]	; 0x30
 80036b4:	bd10      	pop	{r4, pc}
 80036b6:	bf00      	nop
 80036b8:	08003fd5 	.word	0x08003fd5
 80036bc:	08003ff7 	.word	0x08003ff7
 80036c0:	0800402f 	.word	0x0800402f
 80036c4:	08004053 	.word	0x08004053

080036c8 <_cleanup_r>:
 80036c8:	4901      	ldr	r1, [pc, #4]	; (80036d0 <_cleanup_r+0x8>)
 80036ca:	f000 b885 	b.w	80037d8 <_fwalk_reent>
 80036ce:	bf00      	nop
 80036d0:	0800362d 	.word	0x0800362d

080036d4 <__sfmoreglue>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	2568      	movs	r5, #104	; 0x68
 80036d8:	1e4a      	subs	r2, r1, #1
 80036da:	4355      	muls	r5, r2
 80036dc:	460e      	mov	r6, r1
 80036de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80036e2:	f000 f947 	bl	8003974 <_malloc_r>
 80036e6:	4604      	mov	r4, r0
 80036e8:	b140      	cbz	r0, 80036fc <__sfmoreglue+0x28>
 80036ea:	2100      	movs	r1, #0
 80036ec:	e9c0 1600 	strd	r1, r6, [r0]
 80036f0:	300c      	adds	r0, #12
 80036f2:	60a0      	str	r0, [r4, #8]
 80036f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80036f8:	f7ff fdce 	bl	8003298 <memset>
 80036fc:	4620      	mov	r0, r4
 80036fe:	bd70      	pop	{r4, r5, r6, pc}

08003700 <__sinit>:
 8003700:	6983      	ldr	r3, [r0, #24]
 8003702:	b510      	push	{r4, lr}
 8003704:	4604      	mov	r4, r0
 8003706:	bb33      	cbnz	r3, 8003756 <__sinit+0x56>
 8003708:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800370c:	6503      	str	r3, [r0, #80]	; 0x50
 800370e:	4b12      	ldr	r3, [pc, #72]	; (8003758 <__sinit+0x58>)
 8003710:	4a12      	ldr	r2, [pc, #72]	; (800375c <__sinit+0x5c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6282      	str	r2, [r0, #40]	; 0x28
 8003716:	4298      	cmp	r0, r3
 8003718:	bf04      	itt	eq
 800371a:	2301      	moveq	r3, #1
 800371c:	6183      	streq	r3, [r0, #24]
 800371e:	f000 f81f 	bl	8003760 <__sfp>
 8003722:	6060      	str	r0, [r4, #4]
 8003724:	4620      	mov	r0, r4
 8003726:	f000 f81b 	bl	8003760 <__sfp>
 800372a:	60a0      	str	r0, [r4, #8]
 800372c:	4620      	mov	r0, r4
 800372e:	f000 f817 	bl	8003760 <__sfp>
 8003732:	2200      	movs	r2, #0
 8003734:	60e0      	str	r0, [r4, #12]
 8003736:	2104      	movs	r1, #4
 8003738:	6860      	ldr	r0, [r4, #4]
 800373a:	f7ff ffa1 	bl	8003680 <std>
 800373e:	2201      	movs	r2, #1
 8003740:	2109      	movs	r1, #9
 8003742:	68a0      	ldr	r0, [r4, #8]
 8003744:	f7ff ff9c 	bl	8003680 <std>
 8003748:	2202      	movs	r2, #2
 800374a:	2112      	movs	r1, #18
 800374c:	68e0      	ldr	r0, [r4, #12]
 800374e:	f7ff ff97 	bl	8003680 <std>
 8003752:	2301      	movs	r3, #1
 8003754:	61a3      	str	r3, [r4, #24]
 8003756:	bd10      	pop	{r4, pc}
 8003758:	0800500c 	.word	0x0800500c
 800375c:	080036c9 	.word	0x080036c9

08003760 <__sfp>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <__sfp+0x70>)
 8003764:	4607      	mov	r7, r0
 8003766:	681e      	ldr	r6, [r3, #0]
 8003768:	69b3      	ldr	r3, [r6, #24]
 800376a:	b913      	cbnz	r3, 8003772 <__sfp+0x12>
 800376c:	4630      	mov	r0, r6
 800376e:	f7ff ffc7 	bl	8003700 <__sinit>
 8003772:	3648      	adds	r6, #72	; 0x48
 8003774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003778:	3b01      	subs	r3, #1
 800377a:	d503      	bpl.n	8003784 <__sfp+0x24>
 800377c:	6833      	ldr	r3, [r6, #0]
 800377e:	b133      	cbz	r3, 800378e <__sfp+0x2e>
 8003780:	6836      	ldr	r6, [r6, #0]
 8003782:	e7f7      	b.n	8003774 <__sfp+0x14>
 8003784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003788:	b16d      	cbz	r5, 80037a6 <__sfp+0x46>
 800378a:	3468      	adds	r4, #104	; 0x68
 800378c:	e7f4      	b.n	8003778 <__sfp+0x18>
 800378e:	2104      	movs	r1, #4
 8003790:	4638      	mov	r0, r7
 8003792:	f7ff ff9f 	bl	80036d4 <__sfmoreglue>
 8003796:	6030      	str	r0, [r6, #0]
 8003798:	2800      	cmp	r0, #0
 800379a:	d1f1      	bne.n	8003780 <__sfp+0x20>
 800379c:	230c      	movs	r3, #12
 800379e:	4604      	mov	r4, r0
 80037a0:	603b      	str	r3, [r7, #0]
 80037a2:	4620      	mov	r0, r4
 80037a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <__sfp+0x74>)
 80037a8:	6665      	str	r5, [r4, #100]	; 0x64
 80037aa:	e9c4 5500 	strd	r5, r5, [r4]
 80037ae:	60a5      	str	r5, [r4, #8]
 80037b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80037b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80037b8:	2208      	movs	r2, #8
 80037ba:	4629      	mov	r1, r5
 80037bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80037c0:	f7ff fd6a 	bl	8003298 <memset>
 80037c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80037c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80037cc:	e7e9      	b.n	80037a2 <__sfp+0x42>
 80037ce:	bf00      	nop
 80037d0:	0800500c 	.word	0x0800500c
 80037d4:	ffff0001 	.word	0xffff0001

080037d8 <_fwalk_reent>:
 80037d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037dc:	4680      	mov	r8, r0
 80037de:	4689      	mov	r9, r1
 80037e0:	2600      	movs	r6, #0
 80037e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037e6:	b914      	cbnz	r4, 80037ee <_fwalk_reent+0x16>
 80037e8:	4630      	mov	r0, r6
 80037ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80037f2:	3f01      	subs	r7, #1
 80037f4:	d501      	bpl.n	80037fa <_fwalk_reent+0x22>
 80037f6:	6824      	ldr	r4, [r4, #0]
 80037f8:	e7f5      	b.n	80037e6 <_fwalk_reent+0xe>
 80037fa:	89ab      	ldrh	r3, [r5, #12]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d907      	bls.n	8003810 <_fwalk_reent+0x38>
 8003800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003804:	3301      	adds	r3, #1
 8003806:	d003      	beq.n	8003810 <_fwalk_reent+0x38>
 8003808:	4629      	mov	r1, r5
 800380a:	4640      	mov	r0, r8
 800380c:	47c8      	blx	r9
 800380e:	4306      	orrs	r6, r0
 8003810:	3568      	adds	r5, #104	; 0x68
 8003812:	e7ee      	b.n	80037f2 <_fwalk_reent+0x1a>

08003814 <__swhatbuf_r>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	460e      	mov	r6, r1
 8003818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800381c:	b096      	sub	sp, #88	; 0x58
 800381e:	2900      	cmp	r1, #0
 8003820:	4614      	mov	r4, r2
 8003822:	461d      	mov	r5, r3
 8003824:	da07      	bge.n	8003836 <__swhatbuf_r+0x22>
 8003826:	2300      	movs	r3, #0
 8003828:	602b      	str	r3, [r5, #0]
 800382a:	89b3      	ldrh	r3, [r6, #12]
 800382c:	061a      	lsls	r2, r3, #24
 800382e:	d410      	bmi.n	8003852 <__swhatbuf_r+0x3e>
 8003830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003834:	e00e      	b.n	8003854 <__swhatbuf_r+0x40>
 8003836:	466a      	mov	r2, sp
 8003838:	f000 fc32 	bl	80040a0 <_fstat_r>
 800383c:	2800      	cmp	r0, #0
 800383e:	dbf2      	blt.n	8003826 <__swhatbuf_r+0x12>
 8003840:	9a01      	ldr	r2, [sp, #4]
 8003842:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003846:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800384a:	425a      	negs	r2, r3
 800384c:	415a      	adcs	r2, r3
 800384e:	602a      	str	r2, [r5, #0]
 8003850:	e7ee      	b.n	8003830 <__swhatbuf_r+0x1c>
 8003852:	2340      	movs	r3, #64	; 0x40
 8003854:	2000      	movs	r0, #0
 8003856:	6023      	str	r3, [r4, #0]
 8003858:	b016      	add	sp, #88	; 0x58
 800385a:	bd70      	pop	{r4, r5, r6, pc}

0800385c <__smakebuf_r>:
 800385c:	898b      	ldrh	r3, [r1, #12]
 800385e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003860:	079d      	lsls	r5, r3, #30
 8003862:	4606      	mov	r6, r0
 8003864:	460c      	mov	r4, r1
 8003866:	d507      	bpl.n	8003878 <__smakebuf_r+0x1c>
 8003868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800386c:	6023      	str	r3, [r4, #0]
 800386e:	6123      	str	r3, [r4, #16]
 8003870:	2301      	movs	r3, #1
 8003872:	6163      	str	r3, [r4, #20]
 8003874:	b002      	add	sp, #8
 8003876:	bd70      	pop	{r4, r5, r6, pc}
 8003878:	ab01      	add	r3, sp, #4
 800387a:	466a      	mov	r2, sp
 800387c:	f7ff ffca 	bl	8003814 <__swhatbuf_r>
 8003880:	9900      	ldr	r1, [sp, #0]
 8003882:	4605      	mov	r5, r0
 8003884:	4630      	mov	r0, r6
 8003886:	f000 f875 	bl	8003974 <_malloc_r>
 800388a:	b948      	cbnz	r0, 80038a0 <__smakebuf_r+0x44>
 800388c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003890:	059a      	lsls	r2, r3, #22
 8003892:	d4ef      	bmi.n	8003874 <__smakebuf_r+0x18>
 8003894:	f023 0303 	bic.w	r3, r3, #3
 8003898:	f043 0302 	orr.w	r3, r3, #2
 800389c:	81a3      	strh	r3, [r4, #12]
 800389e:	e7e3      	b.n	8003868 <__smakebuf_r+0xc>
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <__smakebuf_r+0x7c>)
 80038a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80038a4:	89a3      	ldrh	r3, [r4, #12]
 80038a6:	6020      	str	r0, [r4, #0]
 80038a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ac:	81a3      	strh	r3, [r4, #12]
 80038ae:	9b00      	ldr	r3, [sp, #0]
 80038b0:	6120      	str	r0, [r4, #16]
 80038b2:	6163      	str	r3, [r4, #20]
 80038b4:	9b01      	ldr	r3, [sp, #4]
 80038b6:	b15b      	cbz	r3, 80038d0 <__smakebuf_r+0x74>
 80038b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038bc:	4630      	mov	r0, r6
 80038be:	f000 fc01 	bl	80040c4 <_isatty_r>
 80038c2:	b128      	cbz	r0, 80038d0 <__smakebuf_r+0x74>
 80038c4:	89a3      	ldrh	r3, [r4, #12]
 80038c6:	f023 0303 	bic.w	r3, r3, #3
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	81a3      	strh	r3, [r4, #12]
 80038d0:	89a3      	ldrh	r3, [r4, #12]
 80038d2:	431d      	orrs	r5, r3
 80038d4:	81a5      	strh	r5, [r4, #12]
 80038d6:	e7cd      	b.n	8003874 <__smakebuf_r+0x18>
 80038d8:	080036c9 	.word	0x080036c9

080038dc <_free_r>:
 80038dc:	b538      	push	{r3, r4, r5, lr}
 80038de:	4605      	mov	r5, r0
 80038e0:	2900      	cmp	r1, #0
 80038e2:	d043      	beq.n	800396c <_free_r+0x90>
 80038e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038e8:	1f0c      	subs	r4, r1, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	bfb8      	it	lt
 80038ee:	18e4      	addlt	r4, r4, r3
 80038f0:	f000 fc18 	bl	8004124 <__malloc_lock>
 80038f4:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <_free_r+0x94>)
 80038f6:	6813      	ldr	r3, [r2, #0]
 80038f8:	4610      	mov	r0, r2
 80038fa:	b933      	cbnz	r3, 800390a <_free_r+0x2e>
 80038fc:	6063      	str	r3, [r4, #4]
 80038fe:	6014      	str	r4, [r2, #0]
 8003900:	4628      	mov	r0, r5
 8003902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003906:	f000 bc0e 	b.w	8004126 <__malloc_unlock>
 800390a:	42a3      	cmp	r3, r4
 800390c:	d90b      	bls.n	8003926 <_free_r+0x4a>
 800390e:	6821      	ldr	r1, [r4, #0]
 8003910:	1862      	adds	r2, r4, r1
 8003912:	4293      	cmp	r3, r2
 8003914:	bf01      	itttt	eq
 8003916:	681a      	ldreq	r2, [r3, #0]
 8003918:	685b      	ldreq	r3, [r3, #4]
 800391a:	1852      	addeq	r2, r2, r1
 800391c:	6022      	streq	r2, [r4, #0]
 800391e:	6063      	str	r3, [r4, #4]
 8003920:	6004      	str	r4, [r0, #0]
 8003922:	e7ed      	b.n	8003900 <_free_r+0x24>
 8003924:	4613      	mov	r3, r2
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	b10a      	cbz	r2, 800392e <_free_r+0x52>
 800392a:	42a2      	cmp	r2, r4
 800392c:	d9fa      	bls.n	8003924 <_free_r+0x48>
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	1858      	adds	r0, r3, r1
 8003932:	42a0      	cmp	r0, r4
 8003934:	d10b      	bne.n	800394e <_free_r+0x72>
 8003936:	6820      	ldr	r0, [r4, #0]
 8003938:	4401      	add	r1, r0
 800393a:	1858      	adds	r0, r3, r1
 800393c:	4282      	cmp	r2, r0
 800393e:	6019      	str	r1, [r3, #0]
 8003940:	d1de      	bne.n	8003900 <_free_r+0x24>
 8003942:	6810      	ldr	r0, [r2, #0]
 8003944:	6852      	ldr	r2, [r2, #4]
 8003946:	4401      	add	r1, r0
 8003948:	6019      	str	r1, [r3, #0]
 800394a:	605a      	str	r2, [r3, #4]
 800394c:	e7d8      	b.n	8003900 <_free_r+0x24>
 800394e:	d902      	bls.n	8003956 <_free_r+0x7a>
 8003950:	230c      	movs	r3, #12
 8003952:	602b      	str	r3, [r5, #0]
 8003954:	e7d4      	b.n	8003900 <_free_r+0x24>
 8003956:	6820      	ldr	r0, [r4, #0]
 8003958:	1821      	adds	r1, r4, r0
 800395a:	428a      	cmp	r2, r1
 800395c:	bf01      	itttt	eq
 800395e:	6811      	ldreq	r1, [r2, #0]
 8003960:	6852      	ldreq	r2, [r2, #4]
 8003962:	1809      	addeq	r1, r1, r0
 8003964:	6021      	streq	r1, [r4, #0]
 8003966:	6062      	str	r2, [r4, #4]
 8003968:	605c      	str	r4, [r3, #4]
 800396a:	e7c9      	b.n	8003900 <_free_r+0x24>
 800396c:	bd38      	pop	{r3, r4, r5, pc}
 800396e:	bf00      	nop
 8003970:	200004a0 	.word	0x200004a0

08003974 <_malloc_r>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	1ccd      	adds	r5, r1, #3
 8003978:	f025 0503 	bic.w	r5, r5, #3
 800397c:	3508      	adds	r5, #8
 800397e:	2d0c      	cmp	r5, #12
 8003980:	bf38      	it	cc
 8003982:	250c      	movcc	r5, #12
 8003984:	2d00      	cmp	r5, #0
 8003986:	4606      	mov	r6, r0
 8003988:	db01      	blt.n	800398e <_malloc_r+0x1a>
 800398a:	42a9      	cmp	r1, r5
 800398c:	d903      	bls.n	8003996 <_malloc_r+0x22>
 800398e:	230c      	movs	r3, #12
 8003990:	6033      	str	r3, [r6, #0]
 8003992:	2000      	movs	r0, #0
 8003994:	bd70      	pop	{r4, r5, r6, pc}
 8003996:	f000 fbc5 	bl	8004124 <__malloc_lock>
 800399a:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <_malloc_r+0xac>)
 800399c:	6814      	ldr	r4, [r2, #0]
 800399e:	4621      	mov	r1, r4
 80039a0:	b991      	cbnz	r1, 80039c8 <_malloc_r+0x54>
 80039a2:	4c20      	ldr	r4, [pc, #128]	; (8003a24 <_malloc_r+0xb0>)
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	b91b      	cbnz	r3, 80039b0 <_malloc_r+0x3c>
 80039a8:	4630      	mov	r0, r6
 80039aa:	f000 fb03 	bl	8003fb4 <_sbrk_r>
 80039ae:	6020      	str	r0, [r4, #0]
 80039b0:	4629      	mov	r1, r5
 80039b2:	4630      	mov	r0, r6
 80039b4:	f000 fafe 	bl	8003fb4 <_sbrk_r>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d124      	bne.n	8003a06 <_malloc_r+0x92>
 80039bc:	230c      	movs	r3, #12
 80039be:	4630      	mov	r0, r6
 80039c0:	6033      	str	r3, [r6, #0]
 80039c2:	f000 fbb0 	bl	8004126 <__malloc_unlock>
 80039c6:	e7e4      	b.n	8003992 <_malloc_r+0x1e>
 80039c8:	680b      	ldr	r3, [r1, #0]
 80039ca:	1b5b      	subs	r3, r3, r5
 80039cc:	d418      	bmi.n	8003a00 <_malloc_r+0x8c>
 80039ce:	2b0b      	cmp	r3, #11
 80039d0:	d90f      	bls.n	80039f2 <_malloc_r+0x7e>
 80039d2:	600b      	str	r3, [r1, #0]
 80039d4:	18cc      	adds	r4, r1, r3
 80039d6:	50cd      	str	r5, [r1, r3]
 80039d8:	4630      	mov	r0, r6
 80039da:	f000 fba4 	bl	8004126 <__malloc_unlock>
 80039de:	f104 000b 	add.w	r0, r4, #11
 80039e2:	1d23      	adds	r3, r4, #4
 80039e4:	f020 0007 	bic.w	r0, r0, #7
 80039e8:	1ac3      	subs	r3, r0, r3
 80039ea:	d0d3      	beq.n	8003994 <_malloc_r+0x20>
 80039ec:	425a      	negs	r2, r3
 80039ee:	50e2      	str	r2, [r4, r3]
 80039f0:	e7d0      	b.n	8003994 <_malloc_r+0x20>
 80039f2:	684b      	ldr	r3, [r1, #4]
 80039f4:	428c      	cmp	r4, r1
 80039f6:	bf16      	itet	ne
 80039f8:	6063      	strne	r3, [r4, #4]
 80039fa:	6013      	streq	r3, [r2, #0]
 80039fc:	460c      	movne	r4, r1
 80039fe:	e7eb      	b.n	80039d8 <_malloc_r+0x64>
 8003a00:	460c      	mov	r4, r1
 8003a02:	6849      	ldr	r1, [r1, #4]
 8003a04:	e7cc      	b.n	80039a0 <_malloc_r+0x2c>
 8003a06:	1cc4      	adds	r4, r0, #3
 8003a08:	f024 0403 	bic.w	r4, r4, #3
 8003a0c:	42a0      	cmp	r0, r4
 8003a0e:	d005      	beq.n	8003a1c <_malloc_r+0xa8>
 8003a10:	1a21      	subs	r1, r4, r0
 8003a12:	4630      	mov	r0, r6
 8003a14:	f000 face 	bl	8003fb4 <_sbrk_r>
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d0cf      	beq.n	80039bc <_malloc_r+0x48>
 8003a1c:	6025      	str	r5, [r4, #0]
 8003a1e:	e7db      	b.n	80039d8 <_malloc_r+0x64>
 8003a20:	200004a0 	.word	0x200004a0
 8003a24:	200004a4 	.word	0x200004a4

08003a28 <__sfputc_r>:
 8003a28:	6893      	ldr	r3, [r2, #8]
 8003a2a:	b410      	push	{r4}
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	6093      	str	r3, [r2, #8]
 8003a32:	da07      	bge.n	8003a44 <__sfputc_r+0x1c>
 8003a34:	6994      	ldr	r4, [r2, #24]
 8003a36:	42a3      	cmp	r3, r4
 8003a38:	db01      	blt.n	8003a3e <__sfputc_r+0x16>
 8003a3a:	290a      	cmp	r1, #10
 8003a3c:	d102      	bne.n	8003a44 <__sfputc_r+0x1c>
 8003a3e:	bc10      	pop	{r4}
 8003a40:	f7ff bcae 	b.w	80033a0 <__swbuf_r>
 8003a44:	6813      	ldr	r3, [r2, #0]
 8003a46:	1c58      	adds	r0, r3, #1
 8003a48:	6010      	str	r0, [r2, #0]
 8003a4a:	7019      	strb	r1, [r3, #0]
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	bc10      	pop	{r4}
 8003a50:	4770      	bx	lr

08003a52 <__sfputs_r>:
 8003a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a54:	4606      	mov	r6, r0
 8003a56:	460f      	mov	r7, r1
 8003a58:	4614      	mov	r4, r2
 8003a5a:	18d5      	adds	r5, r2, r3
 8003a5c:	42ac      	cmp	r4, r5
 8003a5e:	d101      	bne.n	8003a64 <__sfputs_r+0x12>
 8003a60:	2000      	movs	r0, #0
 8003a62:	e007      	b.n	8003a74 <__sfputs_r+0x22>
 8003a64:	463a      	mov	r2, r7
 8003a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	f7ff ffdc 	bl	8003a28 <__sfputc_r>
 8003a70:	1c43      	adds	r3, r0, #1
 8003a72:	d1f3      	bne.n	8003a5c <__sfputs_r+0xa>
 8003a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a78 <_vfiprintf_r>:
 8003a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a7c:	460c      	mov	r4, r1
 8003a7e:	b09d      	sub	sp, #116	; 0x74
 8003a80:	4617      	mov	r7, r2
 8003a82:	461d      	mov	r5, r3
 8003a84:	4606      	mov	r6, r0
 8003a86:	b118      	cbz	r0, 8003a90 <_vfiprintf_r+0x18>
 8003a88:	6983      	ldr	r3, [r0, #24]
 8003a8a:	b90b      	cbnz	r3, 8003a90 <_vfiprintf_r+0x18>
 8003a8c:	f7ff fe38 	bl	8003700 <__sinit>
 8003a90:	4b7c      	ldr	r3, [pc, #496]	; (8003c84 <_vfiprintf_r+0x20c>)
 8003a92:	429c      	cmp	r4, r3
 8003a94:	d158      	bne.n	8003b48 <_vfiprintf_r+0xd0>
 8003a96:	6874      	ldr	r4, [r6, #4]
 8003a98:	89a3      	ldrh	r3, [r4, #12]
 8003a9a:	0718      	lsls	r0, r3, #28
 8003a9c:	d55e      	bpl.n	8003b5c <_vfiprintf_r+0xe4>
 8003a9e:	6923      	ldr	r3, [r4, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d05b      	beq.n	8003b5c <_vfiprintf_r+0xe4>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa8:	2320      	movs	r3, #32
 8003aaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003aae:	2330      	movs	r3, #48	; 0x30
 8003ab0:	f04f 0b01 	mov.w	fp, #1
 8003ab4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ab8:	9503      	str	r5, [sp, #12]
 8003aba:	46b8      	mov	r8, r7
 8003abc:	4645      	mov	r5, r8
 8003abe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003ac2:	b10b      	cbz	r3, 8003ac8 <_vfiprintf_r+0x50>
 8003ac4:	2b25      	cmp	r3, #37	; 0x25
 8003ac6:	d154      	bne.n	8003b72 <_vfiprintf_r+0xfa>
 8003ac8:	ebb8 0a07 	subs.w	sl, r8, r7
 8003acc:	d00b      	beq.n	8003ae6 <_vfiprintf_r+0x6e>
 8003ace:	4653      	mov	r3, sl
 8003ad0:	463a      	mov	r2, r7
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	4630      	mov	r0, r6
 8003ad6:	f7ff ffbc 	bl	8003a52 <__sfputs_r>
 8003ada:	3001      	adds	r0, #1
 8003adc:	f000 80c2 	beq.w	8003c64 <_vfiprintf_r+0x1ec>
 8003ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ae2:	4453      	add	r3, sl
 8003ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae6:	f898 3000 	ldrb.w	r3, [r8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80ba 	beq.w	8003c64 <_vfiprintf_r+0x1ec>
 8003af0:	2300      	movs	r3, #0
 8003af2:	f04f 32ff 	mov.w	r2, #4294967295
 8003af6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003afa:	9304      	str	r3, [sp, #16]
 8003afc:	9307      	str	r3, [sp, #28]
 8003afe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b02:	931a      	str	r3, [sp, #104]	; 0x68
 8003b04:	46a8      	mov	r8, r5
 8003b06:	2205      	movs	r2, #5
 8003b08:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003b0c:	485e      	ldr	r0, [pc, #376]	; (8003c88 <_vfiprintf_r+0x210>)
 8003b0e:	f000 fafb 	bl	8004108 <memchr>
 8003b12:	9b04      	ldr	r3, [sp, #16]
 8003b14:	bb78      	cbnz	r0, 8003b76 <_vfiprintf_r+0xfe>
 8003b16:	06d9      	lsls	r1, r3, #27
 8003b18:	bf44      	itt	mi
 8003b1a:	2220      	movmi	r2, #32
 8003b1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b20:	071a      	lsls	r2, r3, #28
 8003b22:	bf44      	itt	mi
 8003b24:	222b      	movmi	r2, #43	; 0x2b
 8003b26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b2a:	782a      	ldrb	r2, [r5, #0]
 8003b2c:	2a2a      	cmp	r2, #42	; 0x2a
 8003b2e:	d02a      	beq.n	8003b86 <_vfiprintf_r+0x10e>
 8003b30:	46a8      	mov	r8, r5
 8003b32:	2000      	movs	r0, #0
 8003b34:	250a      	movs	r5, #10
 8003b36:	9a07      	ldr	r2, [sp, #28]
 8003b38:	4641      	mov	r1, r8
 8003b3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b3e:	3b30      	subs	r3, #48	; 0x30
 8003b40:	2b09      	cmp	r3, #9
 8003b42:	d969      	bls.n	8003c18 <_vfiprintf_r+0x1a0>
 8003b44:	b360      	cbz	r0, 8003ba0 <_vfiprintf_r+0x128>
 8003b46:	e024      	b.n	8003b92 <_vfiprintf_r+0x11a>
 8003b48:	4b50      	ldr	r3, [pc, #320]	; (8003c8c <_vfiprintf_r+0x214>)
 8003b4a:	429c      	cmp	r4, r3
 8003b4c:	d101      	bne.n	8003b52 <_vfiprintf_r+0xda>
 8003b4e:	68b4      	ldr	r4, [r6, #8]
 8003b50:	e7a2      	b.n	8003a98 <_vfiprintf_r+0x20>
 8003b52:	4b4f      	ldr	r3, [pc, #316]	; (8003c90 <_vfiprintf_r+0x218>)
 8003b54:	429c      	cmp	r4, r3
 8003b56:	bf08      	it	eq
 8003b58:	68f4      	ldreq	r4, [r6, #12]
 8003b5a:	e79d      	b.n	8003a98 <_vfiprintf_r+0x20>
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	4630      	mov	r0, r6
 8003b60:	f7ff fc70 	bl	8003444 <__swsetup_r>
 8003b64:	2800      	cmp	r0, #0
 8003b66:	d09d      	beq.n	8003aa4 <_vfiprintf_r+0x2c>
 8003b68:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6c:	b01d      	add	sp, #116	; 0x74
 8003b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b72:	46a8      	mov	r8, r5
 8003b74:	e7a2      	b.n	8003abc <_vfiprintf_r+0x44>
 8003b76:	4a44      	ldr	r2, [pc, #272]	; (8003c88 <_vfiprintf_r+0x210>)
 8003b78:	4645      	mov	r5, r8
 8003b7a:	1a80      	subs	r0, r0, r2
 8003b7c:	fa0b f000 	lsl.w	r0, fp, r0
 8003b80:	4318      	orrs	r0, r3
 8003b82:	9004      	str	r0, [sp, #16]
 8003b84:	e7be      	b.n	8003b04 <_vfiprintf_r+0x8c>
 8003b86:	9a03      	ldr	r2, [sp, #12]
 8003b88:	1d11      	adds	r1, r2, #4
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	9103      	str	r1, [sp, #12]
 8003b8e:	2a00      	cmp	r2, #0
 8003b90:	db01      	blt.n	8003b96 <_vfiprintf_r+0x11e>
 8003b92:	9207      	str	r2, [sp, #28]
 8003b94:	e004      	b.n	8003ba0 <_vfiprintf_r+0x128>
 8003b96:	4252      	negs	r2, r2
 8003b98:	f043 0302 	orr.w	r3, r3, #2
 8003b9c:	9207      	str	r2, [sp, #28]
 8003b9e:	9304      	str	r3, [sp, #16]
 8003ba0:	f898 3000 	ldrb.w	r3, [r8]
 8003ba4:	2b2e      	cmp	r3, #46	; 0x2e
 8003ba6:	d10e      	bne.n	8003bc6 <_vfiprintf_r+0x14e>
 8003ba8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003bac:	2b2a      	cmp	r3, #42	; 0x2a
 8003bae:	d138      	bne.n	8003c22 <_vfiprintf_r+0x1aa>
 8003bb0:	9b03      	ldr	r3, [sp, #12]
 8003bb2:	f108 0802 	add.w	r8, r8, #2
 8003bb6:	1d1a      	adds	r2, r3, #4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	9203      	str	r2, [sp, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bfb8      	it	lt
 8003bc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bc4:	9305      	str	r3, [sp, #20]
 8003bc6:	4d33      	ldr	r5, [pc, #204]	; (8003c94 <_vfiprintf_r+0x21c>)
 8003bc8:	2203      	movs	r2, #3
 8003bca:	f898 1000 	ldrb.w	r1, [r8]
 8003bce:	4628      	mov	r0, r5
 8003bd0:	f000 fa9a 	bl	8004108 <memchr>
 8003bd4:	b140      	cbz	r0, 8003be8 <_vfiprintf_r+0x170>
 8003bd6:	2340      	movs	r3, #64	; 0x40
 8003bd8:	1b40      	subs	r0, r0, r5
 8003bda:	fa03 f000 	lsl.w	r0, r3, r0
 8003bde:	9b04      	ldr	r3, [sp, #16]
 8003be0:	f108 0801 	add.w	r8, r8, #1
 8003be4:	4303      	orrs	r3, r0
 8003be6:	9304      	str	r3, [sp, #16]
 8003be8:	f898 1000 	ldrb.w	r1, [r8]
 8003bec:	2206      	movs	r2, #6
 8003bee:	482a      	ldr	r0, [pc, #168]	; (8003c98 <_vfiprintf_r+0x220>)
 8003bf0:	f108 0701 	add.w	r7, r8, #1
 8003bf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bf8:	f000 fa86 	bl	8004108 <memchr>
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d037      	beq.n	8003c70 <_vfiprintf_r+0x1f8>
 8003c00:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <_vfiprintf_r+0x224>)
 8003c02:	bb1b      	cbnz	r3, 8003c4c <_vfiprintf_r+0x1d4>
 8003c04:	9b03      	ldr	r3, [sp, #12]
 8003c06:	3307      	adds	r3, #7
 8003c08:	f023 0307 	bic.w	r3, r3, #7
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	9303      	str	r3, [sp, #12]
 8003c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c12:	444b      	add	r3, r9
 8003c14:	9309      	str	r3, [sp, #36]	; 0x24
 8003c16:	e750      	b.n	8003aba <_vfiprintf_r+0x42>
 8003c18:	fb05 3202 	mla	r2, r5, r2, r3
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	4688      	mov	r8, r1
 8003c20:	e78a      	b.n	8003b38 <_vfiprintf_r+0xc0>
 8003c22:	2300      	movs	r3, #0
 8003c24:	250a      	movs	r5, #10
 8003c26:	4619      	mov	r1, r3
 8003c28:	f108 0801 	add.w	r8, r8, #1
 8003c2c:	9305      	str	r3, [sp, #20]
 8003c2e:	4640      	mov	r0, r8
 8003c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c34:	3a30      	subs	r2, #48	; 0x30
 8003c36:	2a09      	cmp	r2, #9
 8003c38:	d903      	bls.n	8003c42 <_vfiprintf_r+0x1ca>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0c3      	beq.n	8003bc6 <_vfiprintf_r+0x14e>
 8003c3e:	9105      	str	r1, [sp, #20]
 8003c40:	e7c1      	b.n	8003bc6 <_vfiprintf_r+0x14e>
 8003c42:	fb05 2101 	mla	r1, r5, r1, r2
 8003c46:	2301      	movs	r3, #1
 8003c48:	4680      	mov	r8, r0
 8003c4a:	e7f0      	b.n	8003c2e <_vfiprintf_r+0x1b6>
 8003c4c:	ab03      	add	r3, sp, #12
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	4622      	mov	r2, r4
 8003c52:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <_vfiprintf_r+0x228>)
 8003c54:	a904      	add	r1, sp, #16
 8003c56:	4630      	mov	r0, r6
 8003c58:	f3af 8000 	nop.w
 8003c5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003c60:	4681      	mov	r9, r0
 8003c62:	d1d5      	bne.n	8003c10 <_vfiprintf_r+0x198>
 8003c64:	89a3      	ldrh	r3, [r4, #12]
 8003c66:	065b      	lsls	r3, r3, #25
 8003c68:	f53f af7e 	bmi.w	8003b68 <_vfiprintf_r+0xf0>
 8003c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c6e:	e77d      	b.n	8003b6c <_vfiprintf_r+0xf4>
 8003c70:	ab03      	add	r3, sp, #12
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	4622      	mov	r2, r4
 8003c76:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <_vfiprintf_r+0x228>)
 8003c78:	a904      	add	r1, sp, #16
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	f000 f888 	bl	8003d90 <_printf_i>
 8003c80:	e7ec      	b.n	8003c5c <_vfiprintf_r+0x1e4>
 8003c82:	bf00      	nop
 8003c84:	08005030 	.word	0x08005030
 8003c88:	08005070 	.word	0x08005070
 8003c8c:	08005050 	.word	0x08005050
 8003c90:	08005010 	.word	0x08005010
 8003c94:	08005076 	.word	0x08005076
 8003c98:	0800507a 	.word	0x0800507a
 8003c9c:	00000000 	.word	0x00000000
 8003ca0:	08003a53 	.word	0x08003a53

08003ca4 <_printf_common>:
 8003ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca8:	4691      	mov	r9, r2
 8003caa:	461f      	mov	r7, r3
 8003cac:	688a      	ldr	r2, [r1, #8]
 8003cae:	690b      	ldr	r3, [r1, #16]
 8003cb0:	4606      	mov	r6, r0
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	bfb8      	it	lt
 8003cb6:	4613      	movlt	r3, r2
 8003cb8:	f8c9 3000 	str.w	r3, [r9]
 8003cbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cc0:	460c      	mov	r4, r1
 8003cc2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cc6:	b112      	cbz	r2, 8003cce <_printf_common+0x2a>
 8003cc8:	3301      	adds	r3, #1
 8003cca:	f8c9 3000 	str.w	r3, [r9]
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	0699      	lsls	r1, r3, #26
 8003cd2:	bf42      	ittt	mi
 8003cd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003cd8:	3302      	addmi	r3, #2
 8003cda:	f8c9 3000 	strmi.w	r3, [r9]
 8003cde:	6825      	ldr	r5, [r4, #0]
 8003ce0:	f015 0506 	ands.w	r5, r5, #6
 8003ce4:	d107      	bne.n	8003cf6 <_printf_common+0x52>
 8003ce6:	f104 0a19 	add.w	sl, r4, #25
 8003cea:	68e3      	ldr	r3, [r4, #12]
 8003cec:	f8d9 2000 	ldr.w	r2, [r9]
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	42ab      	cmp	r3, r5
 8003cf4:	dc29      	bgt.n	8003d4a <_printf_common+0xa6>
 8003cf6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003cfa:	6822      	ldr	r2, [r4, #0]
 8003cfc:	3300      	adds	r3, #0
 8003cfe:	bf18      	it	ne
 8003d00:	2301      	movne	r3, #1
 8003d02:	0692      	lsls	r2, r2, #26
 8003d04:	d42e      	bmi.n	8003d64 <_printf_common+0xc0>
 8003d06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d0a:	4639      	mov	r1, r7
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	47c0      	blx	r8
 8003d10:	3001      	adds	r0, #1
 8003d12:	d021      	beq.n	8003d58 <_printf_common+0xb4>
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	68e5      	ldr	r5, [r4, #12]
 8003d18:	f003 0306 	and.w	r3, r3, #6
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	bf18      	it	ne
 8003d20:	2500      	movne	r5, #0
 8003d22:	f8d9 2000 	ldr.w	r2, [r9]
 8003d26:	f04f 0900 	mov.w	r9, #0
 8003d2a:	bf08      	it	eq
 8003d2c:	1aad      	subeq	r5, r5, r2
 8003d2e:	68a3      	ldr	r3, [r4, #8]
 8003d30:	6922      	ldr	r2, [r4, #16]
 8003d32:	bf08      	it	eq
 8003d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	bfc4      	itt	gt
 8003d3c:	1a9b      	subgt	r3, r3, r2
 8003d3e:	18ed      	addgt	r5, r5, r3
 8003d40:	341a      	adds	r4, #26
 8003d42:	454d      	cmp	r5, r9
 8003d44:	d11a      	bne.n	8003d7c <_printf_common+0xd8>
 8003d46:	2000      	movs	r0, #0
 8003d48:	e008      	b.n	8003d5c <_printf_common+0xb8>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	4652      	mov	r2, sl
 8003d4e:	4639      	mov	r1, r7
 8003d50:	4630      	mov	r0, r6
 8003d52:	47c0      	blx	r8
 8003d54:	3001      	adds	r0, #1
 8003d56:	d103      	bne.n	8003d60 <_printf_common+0xbc>
 8003d58:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d60:	3501      	adds	r5, #1
 8003d62:	e7c2      	b.n	8003cea <_printf_common+0x46>
 8003d64:	2030      	movs	r0, #48	; 0x30
 8003d66:	18e1      	adds	r1, r4, r3
 8003d68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d72:	4422      	add	r2, r4
 8003d74:	3302      	adds	r3, #2
 8003d76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d7a:	e7c4      	b.n	8003d06 <_printf_common+0x62>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	4622      	mov	r2, r4
 8003d80:	4639      	mov	r1, r7
 8003d82:	4630      	mov	r0, r6
 8003d84:	47c0      	blx	r8
 8003d86:	3001      	adds	r0, #1
 8003d88:	d0e6      	beq.n	8003d58 <_printf_common+0xb4>
 8003d8a:	f109 0901 	add.w	r9, r9, #1
 8003d8e:	e7d8      	b.n	8003d42 <_printf_common+0x9e>

08003d90 <_printf_i>:
 8003d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003d98:	460c      	mov	r4, r1
 8003d9a:	7e09      	ldrb	r1, [r1, #24]
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	296e      	cmp	r1, #110	; 0x6e
 8003da0:	4617      	mov	r7, r2
 8003da2:	4606      	mov	r6, r0
 8003da4:	4698      	mov	r8, r3
 8003da6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003da8:	f000 80b3 	beq.w	8003f12 <_printf_i+0x182>
 8003dac:	d822      	bhi.n	8003df4 <_printf_i+0x64>
 8003dae:	2963      	cmp	r1, #99	; 0x63
 8003db0:	d036      	beq.n	8003e20 <_printf_i+0x90>
 8003db2:	d80a      	bhi.n	8003dca <_printf_i+0x3a>
 8003db4:	2900      	cmp	r1, #0
 8003db6:	f000 80b9 	beq.w	8003f2c <_printf_i+0x19c>
 8003dba:	2958      	cmp	r1, #88	; 0x58
 8003dbc:	f000 8083 	beq.w	8003ec6 <_printf_i+0x136>
 8003dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003dc8:	e032      	b.n	8003e30 <_printf_i+0xa0>
 8003dca:	2964      	cmp	r1, #100	; 0x64
 8003dcc:	d001      	beq.n	8003dd2 <_printf_i+0x42>
 8003dce:	2969      	cmp	r1, #105	; 0x69
 8003dd0:	d1f6      	bne.n	8003dc0 <_printf_i+0x30>
 8003dd2:	6820      	ldr	r0, [r4, #0]
 8003dd4:	6813      	ldr	r3, [r2, #0]
 8003dd6:	0605      	lsls	r5, r0, #24
 8003dd8:	f103 0104 	add.w	r1, r3, #4
 8003ddc:	d52a      	bpl.n	8003e34 <_printf_i+0xa4>
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6011      	str	r1, [r2, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	da03      	bge.n	8003dee <_printf_i+0x5e>
 8003de6:	222d      	movs	r2, #45	; 0x2d
 8003de8:	425b      	negs	r3, r3
 8003dea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003dee:	486f      	ldr	r0, [pc, #444]	; (8003fac <_printf_i+0x21c>)
 8003df0:	220a      	movs	r2, #10
 8003df2:	e039      	b.n	8003e68 <_printf_i+0xd8>
 8003df4:	2973      	cmp	r1, #115	; 0x73
 8003df6:	f000 809d 	beq.w	8003f34 <_printf_i+0x1a4>
 8003dfa:	d808      	bhi.n	8003e0e <_printf_i+0x7e>
 8003dfc:	296f      	cmp	r1, #111	; 0x6f
 8003dfe:	d020      	beq.n	8003e42 <_printf_i+0xb2>
 8003e00:	2970      	cmp	r1, #112	; 0x70
 8003e02:	d1dd      	bne.n	8003dc0 <_printf_i+0x30>
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	f043 0320 	orr.w	r3, r3, #32
 8003e0a:	6023      	str	r3, [r4, #0]
 8003e0c:	e003      	b.n	8003e16 <_printf_i+0x86>
 8003e0e:	2975      	cmp	r1, #117	; 0x75
 8003e10:	d017      	beq.n	8003e42 <_printf_i+0xb2>
 8003e12:	2978      	cmp	r1, #120	; 0x78
 8003e14:	d1d4      	bne.n	8003dc0 <_printf_i+0x30>
 8003e16:	2378      	movs	r3, #120	; 0x78
 8003e18:	4865      	ldr	r0, [pc, #404]	; (8003fb0 <_printf_i+0x220>)
 8003e1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e1e:	e055      	b.n	8003ecc <_printf_i+0x13c>
 8003e20:	6813      	ldr	r3, [r2, #0]
 8003e22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e26:	1d19      	adds	r1, r3, #4
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6011      	str	r1, [r2, #0]
 8003e2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e30:	2301      	movs	r3, #1
 8003e32:	e08c      	b.n	8003f4e <_printf_i+0x1be>
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e3a:	6011      	str	r1, [r2, #0]
 8003e3c:	bf18      	it	ne
 8003e3e:	b21b      	sxthne	r3, r3
 8003e40:	e7cf      	b.n	8003de2 <_printf_i+0x52>
 8003e42:	6813      	ldr	r3, [r2, #0]
 8003e44:	6825      	ldr	r5, [r4, #0]
 8003e46:	1d18      	adds	r0, r3, #4
 8003e48:	6010      	str	r0, [r2, #0]
 8003e4a:	0628      	lsls	r0, r5, #24
 8003e4c:	d501      	bpl.n	8003e52 <_printf_i+0xc2>
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	e002      	b.n	8003e58 <_printf_i+0xc8>
 8003e52:	0668      	lsls	r0, r5, #25
 8003e54:	d5fb      	bpl.n	8003e4e <_printf_i+0xbe>
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	296f      	cmp	r1, #111	; 0x6f
 8003e5a:	bf14      	ite	ne
 8003e5c:	220a      	movne	r2, #10
 8003e5e:	2208      	moveq	r2, #8
 8003e60:	4852      	ldr	r0, [pc, #328]	; (8003fac <_printf_i+0x21c>)
 8003e62:	2100      	movs	r1, #0
 8003e64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e68:	6865      	ldr	r5, [r4, #4]
 8003e6a:	2d00      	cmp	r5, #0
 8003e6c:	60a5      	str	r5, [r4, #8]
 8003e6e:	f2c0 8095 	blt.w	8003f9c <_printf_i+0x20c>
 8003e72:	6821      	ldr	r1, [r4, #0]
 8003e74:	f021 0104 	bic.w	r1, r1, #4
 8003e78:	6021      	str	r1, [r4, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d13d      	bne.n	8003efa <_printf_i+0x16a>
 8003e7e:	2d00      	cmp	r5, #0
 8003e80:	f040 808e 	bne.w	8003fa0 <_printf_i+0x210>
 8003e84:	4665      	mov	r5, ip
 8003e86:	2a08      	cmp	r2, #8
 8003e88:	d10b      	bne.n	8003ea2 <_printf_i+0x112>
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	07db      	lsls	r3, r3, #31
 8003e8e:	d508      	bpl.n	8003ea2 <_printf_i+0x112>
 8003e90:	6923      	ldr	r3, [r4, #16]
 8003e92:	6862      	ldr	r2, [r4, #4]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	bfde      	ittt	le
 8003e98:	2330      	movle	r3, #48	; 0x30
 8003e9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ea2:	ebac 0305 	sub.w	r3, ip, r5
 8003ea6:	6123      	str	r3, [r4, #16]
 8003ea8:	f8cd 8000 	str.w	r8, [sp]
 8003eac:	463b      	mov	r3, r7
 8003eae:	aa03      	add	r2, sp, #12
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	f7ff fef6 	bl	8003ca4 <_printf_common>
 8003eb8:	3001      	adds	r0, #1
 8003eba:	d14d      	bne.n	8003f58 <_printf_i+0x1c8>
 8003ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec0:	b005      	add	sp, #20
 8003ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ec6:	4839      	ldr	r0, [pc, #228]	; (8003fac <_printf_i+0x21c>)
 8003ec8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ecc:	6813      	ldr	r3, [r2, #0]
 8003ece:	6821      	ldr	r1, [r4, #0]
 8003ed0:	1d1d      	adds	r5, r3, #4
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6015      	str	r5, [r2, #0]
 8003ed6:	060a      	lsls	r2, r1, #24
 8003ed8:	d50b      	bpl.n	8003ef2 <_printf_i+0x162>
 8003eda:	07ca      	lsls	r2, r1, #31
 8003edc:	bf44      	itt	mi
 8003ede:	f041 0120 	orrmi.w	r1, r1, #32
 8003ee2:	6021      	strmi	r1, [r4, #0]
 8003ee4:	b91b      	cbnz	r3, 8003eee <_printf_i+0x15e>
 8003ee6:	6822      	ldr	r2, [r4, #0]
 8003ee8:	f022 0220 	bic.w	r2, r2, #32
 8003eec:	6022      	str	r2, [r4, #0]
 8003eee:	2210      	movs	r2, #16
 8003ef0:	e7b7      	b.n	8003e62 <_printf_i+0xd2>
 8003ef2:	064d      	lsls	r5, r1, #25
 8003ef4:	bf48      	it	mi
 8003ef6:	b29b      	uxthmi	r3, r3
 8003ef8:	e7ef      	b.n	8003eda <_printf_i+0x14a>
 8003efa:	4665      	mov	r5, ip
 8003efc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f00:	fb02 3311 	mls	r3, r2, r1, r3
 8003f04:	5cc3      	ldrb	r3, [r0, r3]
 8003f06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	2900      	cmp	r1, #0
 8003f0e:	d1f5      	bne.n	8003efc <_printf_i+0x16c>
 8003f10:	e7b9      	b.n	8003e86 <_printf_i+0xf6>
 8003f12:	6813      	ldr	r3, [r2, #0]
 8003f14:	6825      	ldr	r5, [r4, #0]
 8003f16:	1d18      	adds	r0, r3, #4
 8003f18:	6961      	ldr	r1, [r4, #20]
 8003f1a:	6010      	str	r0, [r2, #0]
 8003f1c:	0628      	lsls	r0, r5, #24
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	d501      	bpl.n	8003f26 <_printf_i+0x196>
 8003f22:	6019      	str	r1, [r3, #0]
 8003f24:	e002      	b.n	8003f2c <_printf_i+0x19c>
 8003f26:	066a      	lsls	r2, r5, #25
 8003f28:	d5fb      	bpl.n	8003f22 <_printf_i+0x192>
 8003f2a:	8019      	strh	r1, [r3, #0]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	4665      	mov	r5, ip
 8003f30:	6123      	str	r3, [r4, #16]
 8003f32:	e7b9      	b.n	8003ea8 <_printf_i+0x118>
 8003f34:	6813      	ldr	r3, [r2, #0]
 8003f36:	1d19      	adds	r1, r3, #4
 8003f38:	6011      	str	r1, [r2, #0]
 8003f3a:	681d      	ldr	r5, [r3, #0]
 8003f3c:	6862      	ldr	r2, [r4, #4]
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4628      	mov	r0, r5
 8003f42:	f000 f8e1 	bl	8004108 <memchr>
 8003f46:	b108      	cbz	r0, 8003f4c <_printf_i+0x1bc>
 8003f48:	1b40      	subs	r0, r0, r5
 8003f4a:	6060      	str	r0, [r4, #4]
 8003f4c:	6863      	ldr	r3, [r4, #4]
 8003f4e:	6123      	str	r3, [r4, #16]
 8003f50:	2300      	movs	r3, #0
 8003f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f56:	e7a7      	b.n	8003ea8 <_printf_i+0x118>
 8003f58:	6923      	ldr	r3, [r4, #16]
 8003f5a:	462a      	mov	r2, r5
 8003f5c:	4639      	mov	r1, r7
 8003f5e:	4630      	mov	r0, r6
 8003f60:	47c0      	blx	r8
 8003f62:	3001      	adds	r0, #1
 8003f64:	d0aa      	beq.n	8003ebc <_printf_i+0x12c>
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	079b      	lsls	r3, r3, #30
 8003f6a:	d413      	bmi.n	8003f94 <_printf_i+0x204>
 8003f6c:	68e0      	ldr	r0, [r4, #12]
 8003f6e:	9b03      	ldr	r3, [sp, #12]
 8003f70:	4298      	cmp	r0, r3
 8003f72:	bfb8      	it	lt
 8003f74:	4618      	movlt	r0, r3
 8003f76:	e7a3      	b.n	8003ec0 <_printf_i+0x130>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	464a      	mov	r2, r9
 8003f7c:	4639      	mov	r1, r7
 8003f7e:	4630      	mov	r0, r6
 8003f80:	47c0      	blx	r8
 8003f82:	3001      	adds	r0, #1
 8003f84:	d09a      	beq.n	8003ebc <_printf_i+0x12c>
 8003f86:	3501      	adds	r5, #1
 8003f88:	68e3      	ldr	r3, [r4, #12]
 8003f8a:	9a03      	ldr	r2, [sp, #12]
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	42ab      	cmp	r3, r5
 8003f90:	dcf2      	bgt.n	8003f78 <_printf_i+0x1e8>
 8003f92:	e7eb      	b.n	8003f6c <_printf_i+0x1dc>
 8003f94:	2500      	movs	r5, #0
 8003f96:	f104 0919 	add.w	r9, r4, #25
 8003f9a:	e7f5      	b.n	8003f88 <_printf_i+0x1f8>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ac      	bne.n	8003efa <_printf_i+0x16a>
 8003fa0:	7803      	ldrb	r3, [r0, #0]
 8003fa2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fa6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003faa:	e76c      	b.n	8003e86 <_printf_i+0xf6>
 8003fac:	08005081 	.word	0x08005081
 8003fb0:	08005092 	.word	0x08005092

08003fb4 <_sbrk_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	4c05      	ldr	r4, [pc, #20]	; (8003fd0 <_sbrk_r+0x1c>)
 8003fba:	4605      	mov	r5, r0
 8003fbc:	4608      	mov	r0, r1
 8003fbe:	6023      	str	r3, [r4, #0]
 8003fc0:	f7fd f85a 	bl	8001078 <_sbrk>
 8003fc4:	1c43      	adds	r3, r0, #1
 8003fc6:	d102      	bne.n	8003fce <_sbrk_r+0x1a>
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	b103      	cbz	r3, 8003fce <_sbrk_r+0x1a>
 8003fcc:	602b      	str	r3, [r5, #0]
 8003fce:	bd38      	pop	{r3, r4, r5, pc}
 8003fd0:	200005c4 	.word	0x200005c4

08003fd4 <__sread>:
 8003fd4:	b510      	push	{r4, lr}
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fdc:	f000 f8a4 	bl	8004128 <_read_r>
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	bfab      	itete	ge
 8003fe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8003fe8:	181b      	addge	r3, r3, r0
 8003fea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fee:	bfac      	ite	ge
 8003ff0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ff2:	81a3      	strhlt	r3, [r4, #12]
 8003ff4:	bd10      	pop	{r4, pc}

08003ff6 <__swrite>:
 8003ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffa:	461f      	mov	r7, r3
 8003ffc:	898b      	ldrh	r3, [r1, #12]
 8003ffe:	4605      	mov	r5, r0
 8004000:	05db      	lsls	r3, r3, #23
 8004002:	460c      	mov	r4, r1
 8004004:	4616      	mov	r6, r2
 8004006:	d505      	bpl.n	8004014 <__swrite+0x1e>
 8004008:	2302      	movs	r3, #2
 800400a:	2200      	movs	r2, #0
 800400c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004010:	f000 f868 	bl	80040e4 <_lseek_r>
 8004014:	89a3      	ldrh	r3, [r4, #12]
 8004016:	4632      	mov	r2, r6
 8004018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800401c:	81a3      	strh	r3, [r4, #12]
 800401e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004022:	463b      	mov	r3, r7
 8004024:	4628      	mov	r0, r5
 8004026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800402a:	f000 b817 	b.w	800405c <_write_r>

0800402e <__sseek>:
 800402e:	b510      	push	{r4, lr}
 8004030:	460c      	mov	r4, r1
 8004032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004036:	f000 f855 	bl	80040e4 <_lseek_r>
 800403a:	1c43      	adds	r3, r0, #1
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	bf15      	itete	ne
 8004040:	6560      	strne	r0, [r4, #84]	; 0x54
 8004042:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004046:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800404a:	81a3      	strheq	r3, [r4, #12]
 800404c:	bf18      	it	ne
 800404e:	81a3      	strhne	r3, [r4, #12]
 8004050:	bd10      	pop	{r4, pc}

08004052 <__sclose>:
 8004052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004056:	f000 b813 	b.w	8004080 <_close_r>
	...

0800405c <_write_r>:
 800405c:	b538      	push	{r3, r4, r5, lr}
 800405e:	4605      	mov	r5, r0
 8004060:	4608      	mov	r0, r1
 8004062:	4611      	mov	r1, r2
 8004064:	2200      	movs	r2, #0
 8004066:	4c05      	ldr	r4, [pc, #20]	; (800407c <_write_r+0x20>)
 8004068:	6022      	str	r2, [r4, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	f7fc ffb7 	bl	8000fde <_write>
 8004070:	1c43      	adds	r3, r0, #1
 8004072:	d102      	bne.n	800407a <_write_r+0x1e>
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	b103      	cbz	r3, 800407a <_write_r+0x1e>
 8004078:	602b      	str	r3, [r5, #0]
 800407a:	bd38      	pop	{r3, r4, r5, pc}
 800407c:	200005c4 	.word	0x200005c4

08004080 <_close_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	2300      	movs	r3, #0
 8004084:	4c05      	ldr	r4, [pc, #20]	; (800409c <_close_r+0x1c>)
 8004086:	4605      	mov	r5, r0
 8004088:	4608      	mov	r0, r1
 800408a:	6023      	str	r3, [r4, #0]
 800408c:	f7fc ffc3 	bl	8001016 <_close>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_close_r+0x1a>
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	b103      	cbz	r3, 800409a <_close_r+0x1a>
 8004098:	602b      	str	r3, [r5, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	200005c4 	.word	0x200005c4

080040a0 <_fstat_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	2300      	movs	r3, #0
 80040a4:	4c06      	ldr	r4, [pc, #24]	; (80040c0 <_fstat_r+0x20>)
 80040a6:	4605      	mov	r5, r0
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	f7fc ffbd 	bl	800102c <_fstat>
 80040b2:	1c43      	adds	r3, r0, #1
 80040b4:	d102      	bne.n	80040bc <_fstat_r+0x1c>
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	b103      	cbz	r3, 80040bc <_fstat_r+0x1c>
 80040ba:	602b      	str	r3, [r5, #0]
 80040bc:	bd38      	pop	{r3, r4, r5, pc}
 80040be:	bf00      	nop
 80040c0:	200005c4 	.word	0x200005c4

080040c4 <_isatty_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	2300      	movs	r3, #0
 80040c8:	4c05      	ldr	r4, [pc, #20]	; (80040e0 <_isatty_r+0x1c>)
 80040ca:	4605      	mov	r5, r0
 80040cc:	4608      	mov	r0, r1
 80040ce:	6023      	str	r3, [r4, #0]
 80040d0:	f7fc ffbb 	bl	800104a <_isatty>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d102      	bne.n	80040de <_isatty_r+0x1a>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	b103      	cbz	r3, 80040de <_isatty_r+0x1a>
 80040dc:	602b      	str	r3, [r5, #0]
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	200005c4 	.word	0x200005c4

080040e4 <_lseek_r>:
 80040e4:	b538      	push	{r3, r4, r5, lr}
 80040e6:	4605      	mov	r5, r0
 80040e8:	4608      	mov	r0, r1
 80040ea:	4611      	mov	r1, r2
 80040ec:	2200      	movs	r2, #0
 80040ee:	4c05      	ldr	r4, [pc, #20]	; (8004104 <_lseek_r+0x20>)
 80040f0:	6022      	str	r2, [r4, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	f7fc ffb3 	bl	800105e <_lseek>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	d102      	bne.n	8004102 <_lseek_r+0x1e>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	b103      	cbz	r3, 8004102 <_lseek_r+0x1e>
 8004100:	602b      	str	r3, [r5, #0]
 8004102:	bd38      	pop	{r3, r4, r5, pc}
 8004104:	200005c4 	.word	0x200005c4

08004108 <memchr>:
 8004108:	b510      	push	{r4, lr}
 800410a:	b2c9      	uxtb	r1, r1
 800410c:	4402      	add	r2, r0
 800410e:	4290      	cmp	r0, r2
 8004110:	4603      	mov	r3, r0
 8004112:	d101      	bne.n	8004118 <memchr+0x10>
 8004114:	2300      	movs	r3, #0
 8004116:	e003      	b.n	8004120 <memchr+0x18>
 8004118:	781c      	ldrb	r4, [r3, #0]
 800411a:	3001      	adds	r0, #1
 800411c:	428c      	cmp	r4, r1
 800411e:	d1f6      	bne.n	800410e <memchr+0x6>
 8004120:	4618      	mov	r0, r3
 8004122:	bd10      	pop	{r4, pc}

08004124 <__malloc_lock>:
 8004124:	4770      	bx	lr

08004126 <__malloc_unlock>:
 8004126:	4770      	bx	lr

08004128 <_read_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4605      	mov	r5, r0
 800412c:	4608      	mov	r0, r1
 800412e:	4611      	mov	r1, r2
 8004130:	2200      	movs	r2, #0
 8004132:	4c05      	ldr	r4, [pc, #20]	; (8004148 <_read_r+0x20>)
 8004134:	6022      	str	r2, [r4, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	f7fc ff34 	bl	8000fa4 <_read>
 800413c:	1c43      	adds	r3, r0, #1
 800413e:	d102      	bne.n	8004146 <_read_r+0x1e>
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	b103      	cbz	r3, 8004146 <_read_r+0x1e>
 8004144:	602b      	str	r3, [r5, #0]
 8004146:	bd38      	pop	{r3, r4, r5, pc}
 8004148:	200005c4 	.word	0x200005c4

0800414c <_init>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	bf00      	nop
 8004150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004152:	bc08      	pop	{r3}
 8004154:	469e      	mov	lr, r3
 8004156:	4770      	bx	lr

08004158 <_fini>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	bf00      	nop
 800415c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415e:	bc08      	pop	{r3}
 8004160:	469e      	mov	lr, r3
 8004162:	4770      	bx	lr
