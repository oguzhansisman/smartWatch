
smart_watch_v_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f28  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f44  08004f44  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004f44  08004f44  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f44  08004f44  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f44  08004f44  00014f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f48  08004f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  20000078  08004fc4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  08004fc4  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f783  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020ff  00000000  00000000  0002f824  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df8  00000000  00000000  00031928  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d10  00000000  00000000  00032720  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c66  00000000  00000000  00033430  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b364  00000000  00000000  0004c096  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c34c  00000000  00000000  000573fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3746  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004154  00000000  00000000  000e37c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004004 	.word	0x08004004

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004004 	.word	0x08004004

0800014c <menu_ac>:




void menu_ac(uint8_t menu, uint8_t secili)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	switch(menu)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	2b03      	cmp	r3, #3
 8000160:	d82f      	bhi.n	80001c2 <menu_ac+0x76>
 8000162:	a201      	add	r2, pc, #4	; (adr r2, 8000168 <menu_ac+0x1c>)
 8000164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000168:	08000179 	.word	0x08000179
 800016c:	08000183 	.word	0x08000183
 8000170:	0800018b 	.word	0x0800018b
 8000174:	080001bb 	.word	0x080001bb
	{
		case ANA_SAYFA:
			anasayfa_ac(secili);
 8000178:	79bb      	ldrb	r3, [r7, #6]
 800017a:	4618      	mov	r0, r3
 800017c:	f000 f834 	bl	80001e8 <anasayfa_ac>
			break;
 8000180:	e020      	b.n	80001c4 <menu_ac+0x78>
		case ADIM:
			printf("Bugün attıgınız adım sayisi 12\n");
 8000182:	4812      	ldr	r0, [pc, #72]	; (80001cc <menu_ac+0x80>)
 8000184:	f003 f860 	bl	8003248 <puts>
			break;
 8000188:	e01c      	b.n	80001c4 <menu_ac+0x78>
		case TELEFON:
			printf("Telefona baglan");
 800018a:	4811      	ldr	r0, [pc, #68]	; (80001d0 <menu_ac+0x84>)
 800018c:	f002 ffe8 	bl	8003160 <iprintf>
			switch (secili)
 8000190:	79bb      	ldrb	r3, [r7, #6]
 8000192:	2b01      	cmp	r3, #1
 8000194:	d002      	beq.n	800019c <menu_ac+0x50>
 8000196:	2b02      	cmp	r3, #2
 8000198:	d007      	beq.n	80001aa <menu_ac+0x5e>
			case 2:
				printf("Baglantiyi kes\n");
				printf("->Baglan");
				break;
			default:
				break;
 800019a:	e00d      	b.n	80001b8 <menu_ac+0x6c>
				printf("->Baglantiyi kes\n");
 800019c:	480d      	ldr	r0, [pc, #52]	; (80001d4 <menu_ac+0x88>)
 800019e:	f003 f853 	bl	8003248 <puts>
				printf("Baglan");
 80001a2:	480d      	ldr	r0, [pc, #52]	; (80001d8 <menu_ac+0x8c>)
 80001a4:	f002 ffdc 	bl	8003160 <iprintf>
				break;
 80001a8:	e006      	b.n	80001b8 <menu_ac+0x6c>
				printf("Baglantiyi kes\n");
 80001aa:	480c      	ldr	r0, [pc, #48]	; (80001dc <menu_ac+0x90>)
 80001ac:	f003 f84c 	bl	8003248 <puts>
				printf("->Baglan");
 80001b0:	480b      	ldr	r0, [pc, #44]	; (80001e0 <menu_ac+0x94>)
 80001b2:	f002 ffd5 	bl	8003160 <iprintf>
				break;
 80001b6:	bf00      	nop
			}
			break;
 80001b8:	e004      	b.n	80001c4 <menu_ac+0x78>
		case SICAKLIK:
			printf("Anlik ortam sicakligi: 25");
 80001ba:	480a      	ldr	r0, [pc, #40]	; (80001e4 <menu_ac+0x98>)
 80001bc:	f002 ffd0 	bl	8003160 <iprintf>
			break;
 80001c0:	e000      	b.n	80001c4 <menu_ac+0x78>
		default:
			break;
 80001c2:	bf00      	nop
	}
}
 80001c4:	bf00      	nop
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	0800401c 	.word	0x0800401c
 80001d0:	08004040 	.word	0x08004040
 80001d4:	08004050 	.word	0x08004050
 80001d8:	08004064 	.word	0x08004064
 80001dc:	0800406c 	.word	0x0800406c
 80001e0:	0800407c 	.word	0x0800407c
 80001e4:	08004088 	.word	0x08004088

080001e8 <anasayfa_ac>:



void anasayfa_ac(uint8_t secili)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
	ssd1306_Fill(Black);
 80001f2:	2000      	movs	r0, #0
 80001f4:	f000 fb18 	bl	8000828 <ssd1306_Fill>
	switch(secili)
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	3b01      	subs	r3, #1
 80001fc:	2b05      	cmp	r3, #5
 80001fe:	f200 80d5 	bhi.w	80003ac <anasayfa_ac+0x1c4>
 8000202:	a201      	add	r2, pc, #4	; (adr r2, 8000208 <anasayfa_ac+0x20>)
 8000204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000208:	08000221 	.word	0x08000221
 800020c:	08000263 	.word	0x08000263
 8000210:	080002a5 	.word	0x080002a5
 8000214:	080002e7 	.word	0x080002e7
 8000218:	08000329 	.word	0x08000329
 800021c:	0800036b 	.word	0x0800036b
	{
	case 1:
		ssd1306_SetCursor(2, 0);
 8000220:	2100      	movs	r1, #0
 8000222:	2002      	movs	r0, #2
 8000224:	f000 fc56 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("->Nabiz", Font_11x18, White);
 8000228:	4a63      	ldr	r2, [pc, #396]	; (80003b8 <anasayfa_ac+0x1d0>)
 800022a:	2301      	movs	r3, #1
 800022c:	ca06      	ldmia	r2, {r1, r2}
 800022e:	4863      	ldr	r0, [pc, #396]	; (80003bc <anasayfa_ac+0x1d4>)
 8000230:	f000 fc2a 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 8000234:	2113      	movs	r1, #19
 8000236:	2002      	movs	r0, #2
 8000238:	f000 fc4c 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("Adim", Font_11x18, White);
 800023c:	4a5e      	ldr	r2, [pc, #376]	; (80003b8 <anasayfa_ac+0x1d0>)
 800023e:	2301      	movs	r3, #1
 8000240:	ca06      	ldmia	r2, {r1, r2}
 8000242:	485f      	ldr	r0, [pc, #380]	; (80003c0 <anasayfa_ac+0x1d8>)
 8000244:	f000 fc20 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 8000248:	2126      	movs	r1, #38	; 0x26
 800024a:	2002      	movs	r0, #2
 800024c:	f000 fc42 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 8000250:	4a59      	ldr	r2, [pc, #356]	; (80003b8 <anasayfa_ac+0x1d0>)
 8000252:	2301      	movs	r3, #1
 8000254:	ca06      	ldmia	r2, {r1, r2}
 8000256:	485b      	ldr	r0, [pc, #364]	; (80003c4 <anasayfa_ac+0x1dc>)
 8000258:	f000 fc16 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800025c:	f000 fb06 	bl	800086c <ssd1306_UpdateScreen>
		break;
 8000260:	e0a5      	b.n	80003ae <anasayfa_ac+0x1c6>
	case 2:
		ssd1306_SetCursor(2, 0);
 8000262:	2100      	movs	r1, #0
 8000264:	2002      	movs	r0, #2
 8000266:	f000 fc35 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("Nabiz", Font_11x18, White);
 800026a:	4a53      	ldr	r2, [pc, #332]	; (80003b8 <anasayfa_ac+0x1d0>)
 800026c:	2301      	movs	r3, #1
 800026e:	ca06      	ldmia	r2, {r1, r2}
 8000270:	4855      	ldr	r0, [pc, #340]	; (80003c8 <anasayfa_ac+0x1e0>)
 8000272:	f000 fc09 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 8000276:	2113      	movs	r1, #19
 8000278:	2002      	movs	r0, #2
 800027a:	f000 fc2b 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("->Adim", Font_11x18, White);
 800027e:	4a4e      	ldr	r2, [pc, #312]	; (80003b8 <anasayfa_ac+0x1d0>)
 8000280:	2301      	movs	r3, #1
 8000282:	ca06      	ldmia	r2, {r1, r2}
 8000284:	4851      	ldr	r0, [pc, #324]	; (80003cc <anasayfa_ac+0x1e4>)
 8000286:	f000 fbff 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 800028a:	2126      	movs	r1, #38	; 0x26
 800028c:	2002      	movs	r0, #2
 800028e:	f000 fc21 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 8000292:	4a49      	ldr	r2, [pc, #292]	; (80003b8 <anasayfa_ac+0x1d0>)
 8000294:	2301      	movs	r3, #1
 8000296:	ca06      	ldmia	r2, {r1, r2}
 8000298:	484a      	ldr	r0, [pc, #296]	; (80003c4 <anasayfa_ac+0x1dc>)
 800029a:	f000 fbf5 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800029e:	f000 fae5 	bl	800086c <ssd1306_UpdateScreen>
		break;
 80002a2:	e084      	b.n	80003ae <anasayfa_ac+0x1c6>
	case 3:
		ssd1306_SetCursor(2, 0);
 80002a4:	2100      	movs	r1, #0
 80002a6:	2002      	movs	r0, #2
 80002a8:	f000 fc14 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("Nabiz", Font_11x18, White);
 80002ac:	4a42      	ldr	r2, [pc, #264]	; (80003b8 <anasayfa_ac+0x1d0>)
 80002ae:	2301      	movs	r3, #1
 80002b0:	ca06      	ldmia	r2, {r1, r2}
 80002b2:	4845      	ldr	r0, [pc, #276]	; (80003c8 <anasayfa_ac+0x1e0>)
 80002b4:	f000 fbe8 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 80002b8:	2113      	movs	r1, #19
 80002ba:	2002      	movs	r0, #2
 80002bc:	f000 fc0a 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("Adim", Font_11x18, White);
 80002c0:	4a3d      	ldr	r2, [pc, #244]	; (80003b8 <anasayfa_ac+0x1d0>)
 80002c2:	2301      	movs	r3, #1
 80002c4:	ca06      	ldmia	r2, {r1, r2}
 80002c6:	483e      	ldr	r0, [pc, #248]	; (80003c0 <anasayfa_ac+0x1d8>)
 80002c8:	f000 fbde 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 80002cc:	2126      	movs	r1, #38	; 0x26
 80002ce:	2002      	movs	r0, #2
 80002d0:	f000 fc00 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("->Telefon", Font_11x18, White);
 80002d4:	4a38      	ldr	r2, [pc, #224]	; (80003b8 <anasayfa_ac+0x1d0>)
 80002d6:	2301      	movs	r3, #1
 80002d8:	ca06      	ldmia	r2, {r1, r2}
 80002da:	483d      	ldr	r0, [pc, #244]	; (80003d0 <anasayfa_ac+0x1e8>)
 80002dc:	f000 fbd4 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80002e0:	f000 fac4 	bl	800086c <ssd1306_UpdateScreen>
		break;
 80002e4:	e063      	b.n	80003ae <anasayfa_ac+0x1c6>
	case 4:
		ssd1306_SetCursor(2, 0);
 80002e6:	2100      	movs	r1, #0
 80002e8:	2002      	movs	r0, #2
 80002ea:	f000 fbf3 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("Adim", Font_11x18, White);
 80002ee:	4a32      	ldr	r2, [pc, #200]	; (80003b8 <anasayfa_ac+0x1d0>)
 80002f0:	2301      	movs	r3, #1
 80002f2:	ca06      	ldmia	r2, {r1, r2}
 80002f4:	4832      	ldr	r0, [pc, #200]	; (80003c0 <anasayfa_ac+0x1d8>)
 80002f6:	f000 fbc7 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 80002fa:	2113      	movs	r1, #19
 80002fc:	2002      	movs	r0, #2
 80002fe:	f000 fbe9 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 8000302:	4a2d      	ldr	r2, [pc, #180]	; (80003b8 <anasayfa_ac+0x1d0>)
 8000304:	2301      	movs	r3, #1
 8000306:	ca06      	ldmia	r2, {r1, r2}
 8000308:	482e      	ldr	r0, [pc, #184]	; (80003c4 <anasayfa_ac+0x1dc>)
 800030a:	f000 fbbd 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 800030e:	2126      	movs	r1, #38	; 0x26
 8000310:	2002      	movs	r0, #2
 8000312:	f000 fbdf 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("->Sicaklik", Font_11x18, White);
 8000316:	4a28      	ldr	r2, [pc, #160]	; (80003b8 <anasayfa_ac+0x1d0>)
 8000318:	2301      	movs	r3, #1
 800031a:	ca06      	ldmia	r2, {r1, r2}
 800031c:	482d      	ldr	r0, [pc, #180]	; (80003d4 <anasayfa_ac+0x1ec>)
 800031e:	f000 fbb3 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000322:	f000 faa3 	bl	800086c <ssd1306_UpdateScreen>
		break;
 8000326:	e042      	b.n	80003ae <anasayfa_ac+0x1c6>
	case 5:
		ssd1306_SetCursor(2, 0);
 8000328:	2100      	movs	r1, #0
 800032a:	2002      	movs	r0, #2
 800032c:	f000 fbd2 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 8000330:	4a21      	ldr	r2, [pc, #132]	; (80003b8 <anasayfa_ac+0x1d0>)
 8000332:	2301      	movs	r3, #1
 8000334:	ca06      	ldmia	r2, {r1, r2}
 8000336:	4823      	ldr	r0, [pc, #140]	; (80003c4 <anasayfa_ac+0x1dc>)
 8000338:	f000 fba6 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 800033c:	2113      	movs	r1, #19
 800033e:	2002      	movs	r0, #2
 8000340:	f000 fbc8 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("Sicaklik", Font_11x18, White);
 8000344:	4a1c      	ldr	r2, [pc, #112]	; (80003b8 <anasayfa_ac+0x1d0>)
 8000346:	2301      	movs	r3, #1
 8000348:	ca06      	ldmia	r2, {r1, r2}
 800034a:	4823      	ldr	r0, [pc, #140]	; (80003d8 <anasayfa_ac+0x1f0>)
 800034c:	f000 fb9c 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 8000350:	2126      	movs	r1, #38	; 0x26
 8000352:	2002      	movs	r0, #2
 8000354:	f000 fbbe 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("->Saat Yuzu", Font_11x18, White);
 8000358:	4a17      	ldr	r2, [pc, #92]	; (80003b8 <anasayfa_ac+0x1d0>)
 800035a:	2301      	movs	r3, #1
 800035c:	ca06      	ldmia	r2, {r1, r2}
 800035e:	481f      	ldr	r0, [pc, #124]	; (80003dc <anasayfa_ac+0x1f4>)
 8000360:	f000 fb92 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000364:	f000 fa82 	bl	800086c <ssd1306_UpdateScreen>
		break;
 8000368:	e021      	b.n	80003ae <anasayfa_ac+0x1c6>
	case 6:
		ssd1306_SetCursor(2, 0);
 800036a:	2100      	movs	r1, #0
 800036c:	2002      	movs	r0, #2
 800036e:	f000 fbb1 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("Sicaklik", Font_11x18, White);
 8000372:	4a11      	ldr	r2, [pc, #68]	; (80003b8 <anasayfa_ac+0x1d0>)
 8000374:	2301      	movs	r3, #1
 8000376:	ca06      	ldmia	r2, {r1, r2}
 8000378:	4817      	ldr	r0, [pc, #92]	; (80003d8 <anasayfa_ac+0x1f0>)
 800037a:	f000 fb85 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 800037e:	2113      	movs	r1, #19
 8000380:	2002      	movs	r0, #2
 8000382:	f000 fba7 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("Saat Yuzu", Font_11x18, White);
 8000386:	4a0c      	ldr	r2, [pc, #48]	; (80003b8 <anasayfa_ac+0x1d0>)
 8000388:	2301      	movs	r3, #1
 800038a:	ca06      	ldmia	r2, {r1, r2}
 800038c:	4814      	ldr	r0, [pc, #80]	; (80003e0 <anasayfa_ac+0x1f8>)
 800038e:	f000 fb7b 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 8000392:	2126      	movs	r1, #38	; 0x26
 8000394:	2002      	movs	r0, #2
 8000396:	f000 fb9d 	bl	8000ad4 <ssd1306_SetCursor>
		ssd1306_WriteString("->Saat Ayarla", Font_11x18, White);
 800039a:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <anasayfa_ac+0x1d0>)
 800039c:	2301      	movs	r3, #1
 800039e:	ca06      	ldmia	r2, {r1, r2}
 80003a0:	4810      	ldr	r0, [pc, #64]	; (80003e4 <anasayfa_ac+0x1fc>)
 80003a2:	f000 fb71 	bl	8000a88 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80003a6:	f000 fa61 	bl	800086c <ssd1306_UpdateScreen>
		break;
 80003aa:	e000      	b.n	80003ae <anasayfa_ac+0x1c6>
	default:
		break;
 80003ac:	bf00      	nop
	}

}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000000 	.word	0x20000000
 80003bc:	080040a4 	.word	0x080040a4
 80003c0:	080040ac 	.word	0x080040ac
 80003c4:	080040b4 	.word	0x080040b4
 80003c8:	080040bc 	.word	0x080040bc
 80003cc:	080040c4 	.word	0x080040c4
 80003d0:	080040cc 	.word	0x080040cc
 80003d4:	080040d8 	.word	0x080040d8
 80003d8:	080040e4 	.word	0x080040e4
 80003dc:	080040f0 	.word	0x080040f0
 80003e0:	080040fc 	.word	0x080040fc
 80003e4:	08004108 	.word	0x08004108

080003e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ec:	f000 fe02 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f0:	f000 f83a 	bl	8000468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f4:	f000 f8f0 	bl	80005d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003f8:	f000 f870 	bl	80004dc <MX_I2C1_Init>
  MX_TIM1_Init();
 80003fc:	f000 f89c 	bl	8000538 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	ssd1306_Init();
 8000400:	f000 f9a8 	bl	8000754 <ssd1306_Init>

	ssd1306_Fill(Black);
 8000404:	2000      	movs	r0, #0
 8000406:	f000 fa0f 	bl	8000828 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 800040a:	f000 fa2f 	bl	800086c <ssd1306_UpdateScreen>

	ds3231_cfg.ay = 12;
 800040e:	4b12      	ldr	r3, [pc, #72]	; (8000458 <main+0x70>)
 8000410:	220c      	movs	r2, #12
 8000412:	705a      	strb	r2, [r3, #1]
	ds3231_cfg.gun = 1;
 8000414:	4b10      	ldr	r3, [pc, #64]	; (8000458 <main+0x70>)
 8000416:	2201      	movs	r2, #1
 8000418:	709a      	strb	r2, [r3, #2]
	ds3231_cfg.ay_gun = 28;
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <main+0x70>)
 800041c:	221c      	movs	r2, #28
 800041e:	70da      	strb	r2, [r3, #3]
	ds3231_cfg.yil = 20;
 8000420:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <main+0x70>)
 8000422:	2214      	movs	r2, #20
 8000424:	701a      	strb	r2, [r3, #0]
	ds3231_cfg.saat = 18;
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <main+0x70>)
 8000428:	2212      	movs	r2, #18
 800042a:	711a      	strb	r2, [r3, #4]
	ds3231_cfg.dakika = 49;
 800042c:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <main+0x70>)
 800042e:	2231      	movs	r2, #49	; 0x31
 8000430:	715a      	strb	r2, [r3, #5]
	ds3231_cfg.saniye = 50;
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <main+0x70>)
 8000434:	2232      	movs	r2, #50	; 0x32
 8000436:	719a      	strb	r2, [r3, #6]

	timer_durum = 1;
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <main+0x74>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
	lcd.secili = 1;
 800043e:	4b08      	ldr	r3, [pc, #32]	; (8000460 <main+0x78>)
 8000440:	2201      	movs	r2, #1
 8000442:	705a      	strb	r2, [r3, #1]
	lcd.menu = ANA_SAYFA;
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <main+0x78>)
 8000446:	2200      	movs	r2, #0
 8000448:	709a      	strb	r2, [r3, #2]
	HAL_I2C_DeInit(&hi2c1);
 800044a:	4806      	ldr	r0, [pc, #24]	; (8000464 <main+0x7c>)
 800044c:	f001 faec 	bl	8001a28 <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c1);
 8000450:	4804      	ldr	r0, [pc, #16]	; (8000464 <main+0x7c>)
 8000452:	f001 f9b1 	bl	80017b8 <HAL_I2C_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000456:	e7fe      	b.n	8000456 <main+0x6e>
 8000458:	200004fc 	.word	0x200004fc
 800045c:	200004ab 	.word	0x200004ab
 8000460:	200004a8 	.word	0x200004a8
 8000464:	20000524 	.word	0x20000524

08000468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b090      	sub	sp, #64	; 0x40
 800046c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046e:	f107 0318 	add.w	r3, r7, #24
 8000472:	2228      	movs	r2, #40	; 0x28
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f002 fe6a 	bl	8003150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800048a:	2301      	movs	r3, #1
 800048c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800048e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000492:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000494:	2300      	movs	r3, #0
 8000496:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f107 0318 	add.w	r3, r7, #24
 800049c:	4618      	mov	r0, r3
 800049e:	f001 fe09 	bl	80020b4 <HAL_RCC_OscConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x44>
  {
    Error_Handler();
 80004a8:	f000 f918 	bl	80006dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	230f      	movs	r3, #15
 80004ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80004b0:	2301      	movs	r3, #1
 80004b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2100      	movs	r1, #0
 80004c4:	4618      	mov	r0, r3
 80004c6:	f002 f875 	bl	80025b4 <HAL_RCC_ClockConfig>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80004d0:	f000 f904 	bl	80006dc <Error_Handler>
  }
}
 80004d4:	bf00      	nop
 80004d6:	3740      	adds	r7, #64	; 0x40
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <MX_I2C1_Init+0x50>)
 80004e2:	4a13      	ldr	r2, [pc, #76]	; (8000530 <MX_I2C1_Init+0x54>)
 80004e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <MX_I2C1_Init+0x50>)
 80004e8:	4a12      	ldr	r2, [pc, #72]	; (8000534 <MX_I2C1_Init+0x58>)
 80004ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_I2C1_Init+0x50>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <MX_I2C1_Init+0x50>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_I2C1_Init+0x50>)
 80004fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <MX_I2C1_Init+0x50>)
 8000502:	2200      	movs	r2, #0
 8000504:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_I2C1_Init+0x50>)
 8000508:	2200      	movs	r2, #0
 800050a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <MX_I2C1_Init+0x50>)
 800050e:	2200      	movs	r2, #0
 8000510:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_I2C1_Init+0x50>)
 8000514:	2200      	movs	r2, #0
 8000516:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <MX_I2C1_Init+0x50>)
 800051a:	f001 f94d 	bl	80017b8 <HAL_I2C_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000524:	f000 f8da 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000524 	.word	0x20000524
 8000530:	40005400 	.word	0x40005400
 8000534:	000186a0 	.word	0x000186a0

08000538 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800053e:	f107 0308 	add.w	r3, r7, #8
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800054c:	463b      	mov	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000554:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <MX_TIM1_Init+0x98>)
 8000556:	4a1f      	ldr	r2, [pc, #124]	; (80005d4 <MX_TIM1_Init+0x9c>)
 8000558:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 800055a:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <MX_TIM1_Init+0x98>)
 800055c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000560:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000562:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <MX_TIM1_Init+0x98>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MX_TIM1_Init+0x98>)
 800056a:	2214      	movs	r2, #20
 800056c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <MX_TIM1_Init+0x98>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <MX_TIM1_Init+0x98>)
 8000576:	2200      	movs	r2, #0
 8000578:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <MX_TIM1_Init+0x98>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000580:	4813      	ldr	r0, [pc, #76]	; (80005d0 <MX_TIM1_Init+0x98>)
 8000582:	f002 f99f 	bl	80028c4 <HAL_TIM_Base_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800058c:	f000 f8a6 	bl	80006dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000594:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000596:	f107 0308 	add.w	r3, r7, #8
 800059a:	4619      	mov	r1, r3
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <MX_TIM1_Init+0x98>)
 800059e:	f002 fb69 	bl	8002c74 <HAL_TIM_ConfigClockSource>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80005a8:	f000 f898 	bl	80006dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ac:	2300      	movs	r3, #0
 80005ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005b4:	463b      	mov	r3, r7
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_TIM1_Init+0x98>)
 80005ba:	f002 fd2f 	bl	800301c <HAL_TIMEx_MasterConfigSynchronization>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80005c4:	f000 f88a 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000578 	.word	0x20000578
 80005d4:	40012c00 	.word	0x40012c00

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ec:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <MX_GPIO_Init+0xd0>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a2d      	ldr	r2, [pc, #180]	; (80006a8 <MX_GPIO_Init+0xd0>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <MX_GPIO_Init+0xd0>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0310 	and.w	r3, r3, #16
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000604:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <MX_GPIO_Init+0xd0>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a27      	ldr	r2, [pc, #156]	; (80006a8 <MX_GPIO_Init+0xd0>)
 800060a:	f043 0320 	orr.w	r3, r3, #32
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <MX_GPIO_Init+0xd0>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0320 	and.w	r3, r3, #32
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <MX_GPIO_Init+0xd0>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <MX_GPIO_Init+0xd0>)
 8000622:	f043 0304 	orr.w	r3, r3, #4
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_GPIO_Init+0xd0>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_GPIO_Init+0xd0>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <MX_GPIO_Init+0xd0>)
 800063a:	f043 0308 	orr.w	r3, r3, #8
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_GPIO_Init+0xd0>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0308 	and.w	r3, r3, #8
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000652:	4816      	ldr	r0, [pc, #88]	; (80006ac <MX_GPIO_Init+0xd4>)
 8000654:	f001 f876 	bl	8001744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000658:	2310      	movs	r3, #16
 800065a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_GPIO_Init+0xd8>)
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	4812      	ldr	r0, [pc, #72]	; (80006b4 <MX_GPIO_Init+0xdc>)
 800066c:	f000 fe54 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2302      	movs	r3, #2
 8000680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000682:	f107 0310 	add.w	r3, r7, #16
 8000686:	4619      	mov	r1, r3
 8000688:	4808      	ldr	r0, [pc, #32]	; (80006ac <MX_GPIO_Init+0xd4>)
 800068a:	f000 fe45 	bl	8001318 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	200a      	movs	r0, #10
 8000694:	f000 fe09 	bl	80012aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000698:	200a      	movs	r0, #10
 800069a:	f000 fe22 	bl	80012e2 <HAL_NVIC_EnableIRQ>

}
 800069e:	bf00      	nop
 80006a0:	3720      	adds	r7, #32
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010c00 	.word	0x40010c00
 80006b0:	10110000 	.word	0x10110000
 80006b4:	40010800 	.word	0x40010800

080006b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
	timer_durum = 1;
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim1);
 80006c6:	4804      	ldr	r0, [pc, #16]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006c8:	f002 f99e 	bl	8002a08 <HAL_TIM_Base_Stop_IT>

}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200004ab 	.word	0x200004ab
 80006d8:	20000578 	.word	0x20000578

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <Error_Handler+0x6>

080006e4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy
#include "main.h"
#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af04      	add	r7, sp, #16
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, 500);
 80006fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006fe:	9302      	str	r3, [sp, #8]
 8000700:	2301      	movs	r3, #1
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2301      	movs	r3, #1
 800070a:	2200      	movs	r2, #0
 800070c:	2178      	movs	r1, #120	; 0x78
 800070e:	4803      	ldr	r0, [pc, #12]	; (800071c <ssd1306_WriteCommand+0x2c>)
 8000710:	f001 f9ba 	bl	8001a88 <HAL_I2C_Mem_Write>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000524 	.word	0x20000524

08000720 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af04      	add	r7, sp, #16
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, 500);
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	b29b      	uxth	r3, r3
 800072e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000732:	9202      	str	r2, [sp, #8]
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2301      	movs	r3, #1
 800073c:	2240      	movs	r2, #64	; 0x40
 800073e:	2178      	movs	r1, #120	; 0x78
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <ssd1306_WriteData+0x30>)
 8000742:	f001 f9a1 	bl	8001a88 <HAL_I2C_Mem_Write>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000524 	.word	0x20000524

08000754 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000758:	f7ff ffc4 	bl	80006e4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800075c:	2064      	movs	r0, #100	; 0x64
 800075e:	f000 fcab 	bl	80010b8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000762:	2000      	movs	r0, #0
 8000764:	f000 f9e2 	bl	8000b2c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000768:	2020      	movs	r0, #32
 800076a:	f7ff ffc1 	bl	80006f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff ffbe 	bl	80006f0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000774:	20b0      	movs	r0, #176	; 0xb0
 8000776:	f7ff ffbb 	bl	80006f0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800077a:	20c8      	movs	r0, #200	; 0xc8
 800077c:	f7ff ffb8 	bl	80006f0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000780:	2000      	movs	r0, #0
 8000782:	f7ff ffb5 	bl	80006f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000786:	2010      	movs	r0, #16
 8000788:	f7ff ffb2 	bl	80006f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800078c:	2040      	movs	r0, #64	; 0x40
 800078e:	f7ff ffaf 	bl	80006f0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000792:	20ff      	movs	r0, #255	; 0xff
 8000794:	f000 f9b6 	bl	8000b04 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000798:	20a1      	movs	r0, #161	; 0xa1
 800079a:	f7ff ffa9 	bl	80006f0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800079e:	20a6      	movs	r0, #166	; 0xa6
 80007a0:	f7ff ffa6 	bl	80006f0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80007a4:	20a8      	movs	r0, #168	; 0xa8
 80007a6:	f7ff ffa3 	bl	80006f0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80007aa:	203f      	movs	r0, #63	; 0x3f
 80007ac:	f7ff ffa0 	bl	80006f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80007b0:	20a4      	movs	r0, #164	; 0xa4
 80007b2:	f7ff ff9d 	bl	80006f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80007b6:	20d3      	movs	r0, #211	; 0xd3
 80007b8:	f7ff ff9a 	bl	80006f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff ff97 	bl	80006f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80007c2:	20d5      	movs	r0, #213	; 0xd5
 80007c4:	f7ff ff94 	bl	80006f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80007c8:	20f0      	movs	r0, #240	; 0xf0
 80007ca:	f7ff ff91 	bl	80006f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80007ce:	20d9      	movs	r0, #217	; 0xd9
 80007d0:	f7ff ff8e 	bl	80006f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80007d4:	2022      	movs	r0, #34	; 0x22
 80007d6:	f7ff ff8b 	bl	80006f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80007da:	20da      	movs	r0, #218	; 0xda
 80007dc:	f7ff ff88 	bl	80006f0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80007e0:	2012      	movs	r0, #18
 80007e2:	f7ff ff85 	bl	80006f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80007e6:	20db      	movs	r0, #219	; 0xdb
 80007e8:	f7ff ff82 	bl	80006f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80007ec:	2020      	movs	r0, #32
 80007ee:	f7ff ff7f 	bl	80006f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80007f2:	208d      	movs	r0, #141	; 0x8d
 80007f4:	f7ff ff7c 	bl	80006f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80007f8:	2014      	movs	r0, #20
 80007fa:	f7ff ff79 	bl	80006f0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80007fe:	2001      	movs	r0, #1
 8000800:	f000 f994 	bl	8000b2c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000804:	2000      	movs	r0, #0
 8000806:	f000 f80f 	bl	8000828 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800080a:	f000 f82f 	bl	800086c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <ssd1306_Init+0xd0>)
 8000810:	2200      	movs	r2, #0
 8000812:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <ssd1306_Init+0xd0>)
 8000816:	2200      	movs	r2, #0
 8000818:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800081a:	4b02      	ldr	r3, [pc, #8]	; (8000824 <ssd1306_Init+0xd0>)
 800081c:	2201      	movs	r2, #1
 800081e:	715a      	strb	r2, [r3, #5]
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000494 	.word	0x20000494

08000828 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	e00d      	b.n	8000854 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d101      	bne.n	8000842 <ssd1306_Fill+0x1a>
 800083e:	2100      	movs	r1, #0
 8000840:	e000      	b.n	8000844 <ssd1306_Fill+0x1c>
 8000842:	21ff      	movs	r1, #255	; 0xff
 8000844:	4a08      	ldr	r2, [pc, #32]	; (8000868 <ssd1306_Fill+0x40>)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	4413      	add	r3, r2
 800084a:	460a      	mov	r2, r1
 800084c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	3301      	adds	r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800085a:	d3ed      	bcc.n	8000838 <ssd1306_Fill+0x10>
    }
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000094 	.word	0x20000094

0800086c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000872:	2300      	movs	r3, #0
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	e016      	b.n	80008a6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	3b50      	subs	r3, #80	; 0x50
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff36 	bl	80006f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff ff33 	bl	80006f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800088a:	2010      	movs	r0, #16
 800088c:	f7ff ff30 	bl	80006f0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	01db      	lsls	r3, r3, #7
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <ssd1306_UpdateScreen+0x48>)
 8000896:	4413      	add	r3, r2
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff40 	bl	8000720 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	3301      	adds	r3, #1
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b07      	cmp	r3, #7
 80008aa:	d9e5      	bls.n	8000878 <ssd1306_UpdateScreen+0xc>
    }
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000094 	.word	0x20000094

080008b8 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
 80008c2:	460b      	mov	r3, r1
 80008c4:	71bb      	strb	r3, [r7, #6]
 80008c6:	4613      	mov	r3, r2
 80008c8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	db48      	blt.n	8000964 <ssd1306_DrawPixel+0xac>
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	2b3f      	cmp	r3, #63	; 0x3f
 80008d6:	d845      	bhi.n	8000964 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <ssd1306_DrawPixel+0xb8>)
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d006      	beq.n	80008ee <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80008e0:	797b      	ldrb	r3, [r7, #5]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	bf0c      	ite	eq
 80008e6:	2301      	moveq	r3, #1
 80008e8:	2300      	movne	r3, #0
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80008ee:	797b      	ldrb	r3, [r7, #5]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d11a      	bne.n	800092a <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80008f4:	79fa      	ldrb	r2, [r7, #7]
 80008f6:	79bb      	ldrb	r3, [r7, #6]
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	b2d8      	uxtb	r0, r3
 80008fc:	4603      	mov	r3, r0
 80008fe:	01db      	lsls	r3, r3, #7
 8000900:	4413      	add	r3, r2
 8000902:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <ssd1306_DrawPixel+0xbc>)
 8000904:	5cd3      	ldrb	r3, [r2, r3]
 8000906:	b25a      	sxtb	r2, r3
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	2101      	movs	r1, #1
 8000910:	fa01 f303 	lsl.w	r3, r1, r3
 8000914:	b25b      	sxtb	r3, r3
 8000916:	4313      	orrs	r3, r2
 8000918:	b259      	sxtb	r1, r3
 800091a:	79fa      	ldrb	r2, [r7, #7]
 800091c:	4603      	mov	r3, r0
 800091e:	01db      	lsls	r3, r3, #7
 8000920:	4413      	add	r3, r2
 8000922:	b2c9      	uxtb	r1, r1
 8000924:	4a13      	ldr	r2, [pc, #76]	; (8000974 <ssd1306_DrawPixel+0xbc>)
 8000926:	54d1      	strb	r1, [r2, r3]
 8000928:	e01d      	b.n	8000966 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800092a:	79fa      	ldrb	r2, [r7, #7]
 800092c:	79bb      	ldrb	r3, [r7, #6]
 800092e:	08db      	lsrs	r3, r3, #3
 8000930:	b2d8      	uxtb	r0, r3
 8000932:	4603      	mov	r3, r0
 8000934:	01db      	lsls	r3, r3, #7
 8000936:	4413      	add	r3, r2
 8000938:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <ssd1306_DrawPixel+0xbc>)
 800093a:	5cd3      	ldrb	r3, [r2, r3]
 800093c:	b25a      	sxtb	r2, r3
 800093e:	79bb      	ldrb	r3, [r7, #6]
 8000940:	f003 0307 	and.w	r3, r3, #7
 8000944:	2101      	movs	r1, #1
 8000946:	fa01 f303 	lsl.w	r3, r1, r3
 800094a:	b25b      	sxtb	r3, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	b25b      	sxtb	r3, r3
 8000950:	4013      	ands	r3, r2
 8000952:	b259      	sxtb	r1, r3
 8000954:	79fa      	ldrb	r2, [r7, #7]
 8000956:	4603      	mov	r3, r0
 8000958:	01db      	lsls	r3, r3, #7
 800095a:	4413      	add	r3, r2
 800095c:	b2c9      	uxtb	r1, r1
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <ssd1306_DrawPixel+0xbc>)
 8000960:	54d1      	strb	r1, [r2, r3]
 8000962:	e000      	b.n	8000966 <ssd1306_DrawPixel+0xae>
        return;
 8000964:	bf00      	nop
    }
}
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000494 	.word	0x20000494
 8000974:	20000094 	.word	0x20000094

08000978 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	4604      	mov	r4, r0
 8000980:	1d38      	adds	r0, r7, #4
 8000982:	e880 0006 	stmia.w	r0, {r1, r2}
 8000986:	461a      	mov	r2, r3
 8000988:	4623      	mov	r3, r4
 800098a:	73fb      	strb	r3, [r7, #15]
 800098c:	4613      	mov	r3, r2
 800098e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	2b1f      	cmp	r3, #31
 8000994:	d902      	bls.n	800099c <ssd1306_WriteChar+0x24>
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	2b7e      	cmp	r3, #126	; 0x7e
 800099a:	d901      	bls.n	80009a0 <ssd1306_WriteChar+0x28>
        return 0;
 800099c:	2300      	movs	r3, #0
 800099e:	e06d      	b.n	8000a7c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80009a0:	4b38      	ldr	r3, [pc, #224]	; (8000a84 <ssd1306_WriteChar+0x10c>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	793b      	ldrb	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	2b80      	cmp	r3, #128	; 0x80
 80009ac:	dc06      	bgt.n	80009bc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80009ae:	4b35      	ldr	r3, [pc, #212]	; (8000a84 <ssd1306_WriteChar+0x10c>)
 80009b0:	885b      	ldrh	r3, [r3, #2]
 80009b2:	461a      	mov	r2, r3
 80009b4:	797b      	ldrb	r3, [r7, #5]
 80009b6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80009b8:	2b40      	cmp	r3, #64	; 0x40
 80009ba:	dd01      	ble.n	80009c0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	e05d      	b.n	8000a7c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
 80009c4:	e04c      	b.n	8000a60 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	3b20      	subs	r3, #32
 80009cc:	7979      	ldrb	r1, [r7, #5]
 80009ce:	fb01 f303 	mul.w	r3, r1, r3
 80009d2:	4619      	mov	r1, r3
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	440b      	add	r3, r1
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4413      	add	r3, r2
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	e034      	b.n	8000a50 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80009e6:	697a      	ldr	r2, [r7, #20]
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d012      	beq.n	8000a1c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <ssd1306_WriteChar+0x10c>)
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	4413      	add	r3, r2
 8000a02:	b2d8      	uxtb	r0, r3
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <ssd1306_WriteChar+0x10c>)
 8000a06:	885b      	ldrh	r3, [r3, #2]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	4413      	add	r3, r2
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	7bba      	ldrb	r2, [r7, #14]
 8000a14:	4619      	mov	r1, r3
 8000a16:	f7ff ff4f 	bl	80008b8 <ssd1306_DrawPixel>
 8000a1a:	e016      	b.n	8000a4a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <ssd1306_WriteChar+0x10c>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4413      	add	r3, r2
 8000a28:	b2d8      	uxtb	r0, r3
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <ssd1306_WriteChar+0x10c>)
 8000a2c:	885b      	ldrh	r3, [r3, #2]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	4413      	add	r3, r2
 8000a36:	b2d9      	uxtb	r1, r3
 8000a38:	7bbb      	ldrb	r3, [r7, #14]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2301      	moveq	r3, #1
 8000a40:	2300      	movne	r3, #0
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	461a      	mov	r2, r3
 8000a46:	f7ff ff37 	bl	80008b8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	793b      	ldrb	r3, [r7, #4]
 8000a52:	461a      	mov	r2, r3
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d3c5      	bcc.n	80009e6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	797b      	ldrb	r3, [r7, #5]
 8000a62:	461a      	mov	r2, r3
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d3ad      	bcc.n	80009c6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <ssd1306_WriteChar+0x10c>)
 8000a6c:	881a      	ldrh	r2, [r3, #0]
 8000a6e:	793b      	ldrb	r3, [r7, #4]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	4413      	add	r3, r2
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <ssd1306_WriteChar+0x10c>)
 8000a78:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3724      	adds	r7, #36	; 0x24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd90      	pop	{r4, r7, pc}
 8000a84:	20000494 	.word	0x20000494

08000a88 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	1d38      	adds	r0, r7, #4
 8000a92:	e880 0006 	stmia.w	r0, {r1, r2}
 8000a96:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000a98:	e012      	b.n	8000ac0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	7818      	ldrb	r0, [r3, #0]
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	1d3a      	adds	r2, r7, #4
 8000aa2:	ca06      	ldmia	r2, {r1, r2}
 8000aa4:	f7ff ff68 	bl	8000978 <ssd1306_WriteChar>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d002      	beq.n	8000aba <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	e008      	b.n	8000acc <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3301      	adds	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1e8      	bne.n	8000a9a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	781b      	ldrb	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	460a      	mov	r2, r1
 8000ade:	71fb      	strb	r3, [r7, #7]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <ssd1306_SetCursor+0x2c>)
 8000aea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000aec:	79bb      	ldrb	r3, [r7, #6]
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <ssd1306_SetCursor+0x2c>)
 8000af2:	805a      	strh	r2, [r3, #2]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000494 	.word	0x20000494

08000b04 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000b0e:	2381      	movs	r3, #129	; 0x81
 8000b10:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fdeb 	bl	80006f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fde7 	bl	80006f0 <ssd1306_WriteCommand>
}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d005      	beq.n	8000b48 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000b3c:	23af      	movs	r3, #175	; 0xaf
 8000b3e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <ssd1306_SetDisplayOn+0x38>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	719a      	strb	r2, [r3, #6]
 8000b46:	e004      	b.n	8000b52 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000b48:	23ae      	movs	r3, #174	; 0xae
 8000b4a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <ssd1306_SetDisplayOn+0x38>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fdcb 	bl	80006f0 <ssd1306_WriteCommand>
}
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000494 	.word	0x20000494

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_MspInit+0x5c>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <HAL_MspInit+0x5c>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6193      	str	r3, [r2, #24]
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_MspInit+0x5c>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_MspInit+0x5c>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <HAL_MspInit+0x5c>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	61d3      	str	r3, [r2, #28]
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <HAL_MspInit+0x5c>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <HAL_MspInit+0x60>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_MspInit+0x60>)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010000 	.word	0x40010000

08000bcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <HAL_I2C_MspInit+0x70>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d123      	bne.n	8000c34 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_I2C_MspInit+0x74>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <HAL_I2C_MspInit+0x74>)
 8000bf2:	f043 0308 	orr.w	r3, r3, #8
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_I2C_MspInit+0x74>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c04:	23c0      	movs	r3, #192	; 0xc0
 8000c06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c08:	2312      	movs	r3, #18
 8000c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4619      	mov	r1, r3
 8000c16:	480b      	ldr	r0, [pc, #44]	; (8000c44 <HAL_I2C_MspInit+0x78>)
 8000c18:	f000 fb7e 	bl	8001318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_I2C_MspInit+0x74>)
 8000c1e:	69db      	ldr	r3, [r3, #28]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_I2C_MspInit+0x74>)
 8000c22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c26:	61d3      	str	r3, [r2, #28]
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <HAL_I2C_MspInit+0x74>)
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c34:	bf00      	nop
 8000c36:	3720      	adds	r7, #32
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40005400 	.word	0x40005400
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010c00 	.word	0x40010c00

08000c48 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_I2C_MspDeInit+0x38>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d10d      	bne.n	8000c76 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_I2C_MspDeInit+0x3c>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <HAL_I2C_MspDeInit+0x3c>)
 8000c60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c64:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000c66:	2140      	movs	r1, #64	; 0x40
 8000c68:	4807      	ldr	r0, [pc, #28]	; (8000c88 <HAL_I2C_MspDeInit+0x40>)
 8000c6a:	f000 fcaf 	bl	80015cc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000c6e:	2180      	movs	r1, #128	; 0x80
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_I2C_MspDeInit+0x40>)
 8000c72:	f000 fcab 	bl	80015cc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40005400 	.word	0x40005400
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40010c00 	.word	0x40010c00

08000c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <HAL_TIM_Base_MspInit+0x74>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d12b      	bne.n	8000cf6 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_TIM_Base_MspInit+0x78>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	4a18      	ldr	r2, [pc, #96]	; (8000d04 <HAL_TIM_Base_MspInit+0x78>)
 8000ca4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ca8:	6193      	str	r3, [r2, #24]
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <HAL_TIM_Base_MspInit+0x78>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2018      	movs	r0, #24
 8000cbc:	f000 faf5 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000cc0:	2018      	movs	r0, #24
 8000cc2:	f000 fb0e 	bl	80012e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2019      	movs	r0, #25
 8000ccc:	f000 faed 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cd0:	2019      	movs	r0, #25
 8000cd2:	f000 fb06 	bl	80012e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	201a      	movs	r0, #26
 8000cdc:	f000 fae5 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000ce0:	201a      	movs	r0, #26
 8000ce2:	f000 fafe 	bl	80012e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	201b      	movs	r0, #27
 8000cec:	f000 fadd 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000cf0:	201b      	movs	r0, #27
 8000cf2:	f000 faf6 	bl	80012e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40012c00 	.word	0x40012c00
 8000d04:	40021000 	.word	0x40021000

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr

08000d4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4e:	f000 f997 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000d5c:	2010      	movs	r0, #16
 8000d5e:	f000 fd09 	bl	8001774 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

	if(timer_durum == 1)
 8000d62:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <EXTI4_IRQHandler+0xa8>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d148      	bne.n	8000dfc <EXTI4_IRQHandler+0xa4>
	{
		switch (lcd.menu)
 8000d6a:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <EXTI4_IRQHandler+0xac>)
 8000d6c:	789b      	ldrb	r3, [r3, #2]
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d83d      	bhi.n	8000dee <EXTI4_IRQHandler+0x96>
 8000d72:	a201      	add	r2, pc, #4	; (adr r2, 8000d78 <EXTI4_IRQHandler+0x20>)
 8000d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d78:	08000d89 	.word	0x08000d89
 8000d7c:	08000db3 	.word	0x08000db3
 8000d80:	08000dbd 	.word	0x08000dbd
 8000d84:	08000de3 	.word	0x08000de3
		{
		case ANA_SAYFA:
			if(lcd.secili == ANA_SAYFA_MAX_SATIR)
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <EXTI4_IRQHandler+0xac>)
 8000d8a:	785b      	ldrb	r3, [r3, #1]
 8000d8c:	2b06      	cmp	r3, #6
 8000d8e:	d103      	bne.n	8000d98 <EXTI4_IRQHandler+0x40>
			{
				lcd.secili = 1;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <EXTI4_IRQHandler+0xac>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	705a      	strb	r2, [r3, #1]
 8000d96:	e005      	b.n	8000da4 <EXTI4_IRQHandler+0x4c>
			}
			else
			{
				lcd.secili ++;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <EXTI4_IRQHandler+0xac>)
 8000d9a:	785b      	ldrb	r3, [r3, #1]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <EXTI4_IRQHandler+0xac>)
 8000da2:	705a      	strb	r2, [r3, #1]
			}
			menu_ac(ANA_SAYFA, lcd.secili);
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <EXTI4_IRQHandler+0xac>)
 8000da6:	785b      	ldrb	r3, [r3, #1]
 8000da8:	4619      	mov	r1, r3
 8000daa:	2000      	movs	r0, #0
 8000dac:	f7ff f9ce 	bl	800014c <menu_ac>
			break;
 8000db0:	e01e      	b.n	8000df0 <EXTI4_IRQHandler+0x98>
		case ADIM:
			menu_ac(ADIM, 1);
 8000db2:	2101      	movs	r1, #1
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff f9c9 	bl	800014c <menu_ac>
			break;
 8000dba:	e019      	b.n	8000df0 <EXTI4_IRQHandler+0x98>
		case TELEFON:
			if(lcd.secili == TELEFON_MAX_SATIR)
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <EXTI4_IRQHandler+0xac>)
 8000dbe:	785b      	ldrb	r3, [r3, #1]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d103      	bne.n	8000dcc <EXTI4_IRQHandler+0x74>
			{
				lcd.secili = 1;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <EXTI4_IRQHandler+0xac>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	705a      	strb	r2, [r3, #1]
 8000dca:	e002      	b.n	8000dd2 <EXTI4_IRQHandler+0x7a>
			}
			else
			{
				lcd.secili = 2;
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <EXTI4_IRQHandler+0xac>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	705a      	strb	r2, [r3, #1]
			}
			menu_ac(lcd.menu, lcd.secili);
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <EXTI4_IRQHandler+0xac>)
 8000dd4:	789a      	ldrb	r2, [r3, #2]
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <EXTI4_IRQHandler+0xac>)
 8000dd8:	785b      	ldrb	r3, [r3, #1]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4610      	mov	r0, r2
 8000dde:	f7ff f9b5 	bl	800014c <menu_ac>
		case SICAKLIK:
			menu_ac(lcd.menu, 1);
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <EXTI4_IRQHandler+0xac>)
 8000de4:	789b      	ldrb	r3, [r3, #2]
 8000de6:	2101      	movs	r1, #1
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff f9af 	bl	800014c <menu_ac>
		default:
			break;
 8000dee:	bf00      	nop
		}
		HAL_TIM_Base_Start_IT(&htim1);
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <EXTI4_IRQHandler+0xb0>)
 8000df2:	f001 fdb7 	bl	8002964 <HAL_TIM_Base_Start_IT>
		timer_durum = 0;
 8000df6:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <EXTI4_IRQHandler+0xa8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	}
  /* USER CODE END EXTI4_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200004ab 	.word	0x200004ab
 8000e04:	200004a8 	.word	0x200004a8
 8000e08:	20000578 	.word	0x20000578

08000e0c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <TIM1_BRK_IRQHandler+0x10>)
 8000e12:	f001 fe27 	bl	8002a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000578 	.word	0x20000578

08000e20 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <TIM1_UP_IRQHandler+0x10>)
 8000e26:	f001 fe1d 	bl	8002a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000578 	.word	0x20000578

08000e34 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <TIM1_TRG_COM_IRQHandler+0x10>)
 8000e3a:	f001 fe13 	bl	8002a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000578 	.word	0x20000578

08000e48 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <TIM1_CC_IRQHandler+0x10>)
 8000e4e:	f001 fe09 	bl	8002a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000578 	.word	0x20000578

08000e5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	e00a      	b.n	8000e84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e6e:	f3af 8000 	nop.w
 8000e72:	4601      	mov	r1, r0
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	b2ca      	uxtb	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf0      	blt.n	8000e6e <_read+0x12>
	}

return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	e009      	b.n	8000ebc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	dbf1      	blt.n	8000ea8 <_write+0x12>
	}
	return len;
 8000ec4:	687b      	ldr	r3, [r7, #4]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <_close>:

int _close(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef4:	605a      	str	r2, [r3, #4]
	return 0;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <_isatty>:

int _isatty(int file)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	return 1;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr

08000f16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b085      	sub	sp, #20
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
	return 0;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
	...

08000f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <_sbrk+0x5c>)
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <_sbrk+0x60>)
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <_sbrk+0x64>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <_sbrk+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d207      	bcs.n	8000f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f60:	f002 f8cc 	bl	80030fc <__errno>
 8000f64:	4602      	mov	r2, r0
 8000f66:	230c      	movs	r3, #12
 8000f68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	e009      	b.n	8000f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <_sbrk+0x64>)
 8000f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20005000 	.word	0x20005000
 8000f90:	00000400 	.word	0x00000400
 8000f94:	2000049c 	.word	0x2000049c
 8000f98:	200005c8 	.word	0x200005c8

08000f9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fa8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000faa:	e003      	b.n	8000fb4 <LoopCopyDataInit>

08000fac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000fae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fb2:	3104      	adds	r1, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fb4:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000fb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fbc:	d3f6      	bcc.n	8000fac <CopyDataInit>
  ldr r2, =_sbss
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000fc0:	e002      	b.n	8000fc8 <LoopFillZerobss>

08000fc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fc4:	f842 3b04 	str.w	r3, [r2], #4

08000fc8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000fca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fcc:	d3f9      	bcc.n	8000fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fce:	f7ff ffe5 	bl	8000f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f002 f899 	bl	8003108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fd6:	f7ff fa07 	bl	80003e8 <main>
  bx lr
 8000fda:	4770      	bx	lr
  ldr r3, =_sidata
 8000fdc:	08004f4c 	.word	0x08004f4c
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fe4:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8000fe8:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8000fec:	200005c8 	.word	0x200005c8

08000ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC1_2_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_Init+0x28>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <HAL_Init+0x28>)
 8000ffe:	f043 0310 	orr.w	r3, r3, #16
 8001002:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f945 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100a:	2000      	movs	r0, #0
 800100c:	f000 f808 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001010:	f7ff fdaa 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40022000 	.word	0x40022000

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x54>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x58>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f95d 	bl	80012fe <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e00e      	b.n	800106c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d80a      	bhi.n	800106a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f000 f925 	bl	80012aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <HAL_InitTick+0x5c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000008 	.word	0x20000008
 8001078:	20000010 	.word	0x20000010
 800107c:	2000000c 	.word	0x2000000c

08001080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_IncTick+0x1c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x20>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <HAL_IncTick+0x20>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	20000010 	.word	0x20000010
 80010a0:	200005c0 	.word	0x200005c0

080010a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b02      	ldr	r3, [pc, #8]	; (80010b4 <HAL_GetTick+0x10>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	200005c0 	.word	0x200005c0

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff fff0 	bl	80010a4 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_Delay+0x40>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffe0 	bl	80010a4 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000010 	.word	0x20000010

080010fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001118:	4013      	ands	r3, r2
 800111a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	60d3      	str	r3, [r2, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <__NVIC_GetPriorityGrouping+0x18>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	f003 0307 	and.w	r3, r3, #7
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	db0b      	blt.n	800118a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	f003 021f 	and.w	r2, r3, #31
 8001178:	4906      	ldr	r1, [pc, #24]	; (8001194 <__NVIC_EnableIRQ+0x34>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	095b      	lsrs	r3, r3, #5
 8001180:	2001      	movs	r0, #1
 8001182:	fa00 f202 	lsl.w	r2, r0, r2
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001260:	d301      	bcc.n	8001266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2301      	movs	r3, #1
 8001264:	e00f      	b.n	8001286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <SysTick_Config+0x40>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126e:	210f      	movs	r1, #15
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f7ff ff90 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <SysTick_Config+0x40>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SysTick_Config+0x40>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff2d 	bl	80010fc <__NVIC_SetPriorityGrouping>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff ff42 	bl	8001144 <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff90 	bl	80011ec <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5f 	bl	8001198 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff35 	bl	8001160 <__NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffa2 	bl	8001250 <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b480      	push	{r7}
 800131a:	b08b      	sub	sp, #44	; 0x2c
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	e127      	b.n	800157c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800132c:	2201      	movs	r2, #1
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	429a      	cmp	r2, r3
 8001346:	f040 8116 	bne.w	8001576 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b12      	cmp	r3, #18
 8001350:	d034      	beq.n	80013bc <HAL_GPIO_Init+0xa4>
 8001352:	2b12      	cmp	r3, #18
 8001354:	d80d      	bhi.n	8001372 <HAL_GPIO_Init+0x5a>
 8001356:	2b02      	cmp	r3, #2
 8001358:	d02b      	beq.n	80013b2 <HAL_GPIO_Init+0x9a>
 800135a:	2b02      	cmp	r3, #2
 800135c:	d804      	bhi.n	8001368 <HAL_GPIO_Init+0x50>
 800135e:	2b00      	cmp	r3, #0
 8001360:	d031      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
 8001362:	2b01      	cmp	r3, #1
 8001364:	d01c      	beq.n	80013a0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001366:	e048      	b.n	80013fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001368:	2b03      	cmp	r3, #3
 800136a:	d043      	beq.n	80013f4 <HAL_GPIO_Init+0xdc>
 800136c:	2b11      	cmp	r3, #17
 800136e:	d01b      	beq.n	80013a8 <HAL_GPIO_Init+0x90>
          break;
 8001370:	e043      	b.n	80013fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001372:	4a89      	ldr	r2, [pc, #548]	; (8001598 <HAL_GPIO_Init+0x280>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d026      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
 8001378:	4a87      	ldr	r2, [pc, #540]	; (8001598 <HAL_GPIO_Init+0x280>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d806      	bhi.n	800138c <HAL_GPIO_Init+0x74>
 800137e:	4a87      	ldr	r2, [pc, #540]	; (800159c <HAL_GPIO_Init+0x284>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d020      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
 8001384:	4a86      	ldr	r2, [pc, #536]	; (80015a0 <HAL_GPIO_Init+0x288>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d01d      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
          break;
 800138a:	e036      	b.n	80013fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800138c:	4a85      	ldr	r2, [pc, #532]	; (80015a4 <HAL_GPIO_Init+0x28c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d019      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
 8001392:	4a85      	ldr	r2, [pc, #532]	; (80015a8 <HAL_GPIO_Init+0x290>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d016      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
 8001398:	4a84      	ldr	r2, [pc, #528]	; (80015ac <HAL_GPIO_Init+0x294>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d013      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
          break;
 800139e:	e02c      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	623b      	str	r3, [r7, #32]
          break;
 80013a6:	e028      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	3304      	adds	r3, #4
 80013ae:	623b      	str	r3, [r7, #32]
          break;
 80013b0:	e023      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	3308      	adds	r3, #8
 80013b8:	623b      	str	r3, [r7, #32]
          break;
 80013ba:	e01e      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	330c      	adds	r3, #12
 80013c2:	623b      	str	r3, [r7, #32]
          break;
 80013c4:	e019      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ce:	2304      	movs	r3, #4
 80013d0:	623b      	str	r3, [r7, #32]
          break;
 80013d2:	e012      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d105      	bne.n	80013e8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013dc:	2308      	movs	r3, #8
 80013de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	611a      	str	r2, [r3, #16]
          break;
 80013e6:	e008      	b.n	80013fa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e8:	2308      	movs	r3, #8
 80013ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	615a      	str	r2, [r3, #20]
          break;
 80013f2:	e002      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
          break;
 80013f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	2bff      	cmp	r3, #255	; 0xff
 80013fe:	d801      	bhi.n	8001404 <HAL_GPIO_Init+0xec>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	e001      	b.n	8001408 <HAL_GPIO_Init+0xf0>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3304      	adds	r3, #4
 8001408:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	2bff      	cmp	r3, #255	; 0xff
 800140e:	d802      	bhi.n	8001416 <HAL_GPIO_Init+0xfe>
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	e002      	b.n	800141c <HAL_GPIO_Init+0x104>
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	3b08      	subs	r3, #8
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	210f      	movs	r1, #15
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	401a      	ands	r2, r3
 800142e:	6a39      	ldr	r1, [r7, #32]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	431a      	orrs	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 8096 	beq.w	8001576 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800144a:	4b59      	ldr	r3, [pc, #356]	; (80015b0 <HAL_GPIO_Init+0x298>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	4a58      	ldr	r2, [pc, #352]	; (80015b0 <HAL_GPIO_Init+0x298>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6193      	str	r3, [r2, #24]
 8001456:	4b56      	ldr	r3, [pc, #344]	; (80015b0 <HAL_GPIO_Init+0x298>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001462:	4a54      	ldr	r2, [pc, #336]	; (80015b4 <HAL_GPIO_Init+0x29c>)
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4013      	ands	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4b      	ldr	r2, [pc, #300]	; (80015b8 <HAL_GPIO_Init+0x2a0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x19e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4a      	ldr	r2, [pc, #296]	; (80015bc <HAL_GPIO_Init+0x2a4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x19a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a49      	ldr	r2, [pc, #292]	; (80015c0 <HAL_GPIO_Init+0x2a8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x196>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a48      	ldr	r2, [pc, #288]	; (80015c4 <HAL_GPIO_Init+0x2ac>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x192>
 80014a6:	2303      	movs	r3, #3
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x1a0>
 80014aa:	2304      	movs	r3, #4
 80014ac:	e004      	b.n	80014b8 <HAL_GPIO_Init+0x1a0>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e002      	b.n	80014b8 <HAL_GPIO_Init+0x1a0>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_GPIO_Init+0x1a0>
 80014b6:	2300      	movs	r3, #0
 80014b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ba:	f002 0203 	and.w	r2, r2, #3
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	4093      	lsls	r3, r2
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014c8:	493a      	ldr	r1, [pc, #232]	; (80015b4 <HAL_GPIO_Init+0x29c>)
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d006      	beq.n	80014f0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014e2:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4938      	ldr	r1, [pc, #224]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
 80014ee:	e006      	b.n	80014fe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014f0:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	4933      	ldr	r1, [pc, #204]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d006      	beq.n	8001518 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800150a:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	492e      	ldr	r1, [pc, #184]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]
 8001516:	e006      	b.n	8001526 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001518:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	43db      	mvns	r3, r3
 8001520:	4929      	ldr	r1, [pc, #164]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001522:	4013      	ands	r3, r2
 8001524:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001532:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	4924      	ldr	r1, [pc, #144]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	608b      	str	r3, [r1, #8]
 800153e:	e006      	b.n	800154e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	43db      	mvns	r3, r3
 8001548:	491f      	ldr	r1, [pc, #124]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 800154a:	4013      	ands	r3, r2
 800154c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d006      	beq.n	8001568 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800155a:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	491a      	ldr	r1, [pc, #104]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	60cb      	str	r3, [r1, #12]
 8001566:	e006      	b.n	8001576 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	43db      	mvns	r3, r3
 8001570:	4915      	ldr	r1, [pc, #84]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001572:	4013      	ands	r3, r2
 8001574:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	3301      	adds	r3, #1
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	fa22 f303 	lsr.w	r3, r2, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	f47f aed0 	bne.w	800132c <HAL_GPIO_Init+0x14>
  }
}
 800158c:	bf00      	nop
 800158e:	372c      	adds	r7, #44	; 0x2c
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	10210000 	.word	0x10210000
 800159c:	10110000 	.word	0x10110000
 80015a0:	10120000 	.word	0x10120000
 80015a4:	10310000 	.word	0x10310000
 80015a8:	10320000 	.word	0x10320000
 80015ac:	10220000 	.word	0x10220000
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010000 	.word	0x40010000
 80015b8:	40010800 	.word	0x40010800
 80015bc:	40010c00 	.word	0x40010c00
 80015c0:	40011000 	.word	0x40011000
 80015c4:	40011400 	.word	0x40011400
 80015c8:	40010400 	.word	0x40010400

080015cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80015da:	e09a      	b.n	8001712 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80015dc:	2201      	movs	r2, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 808d 	beq.w	800170c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80015f2:	4a4e      	ldr	r2, [pc, #312]	; (800172c <HAL_GPIO_DeInit+0x160>)
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fe:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4013      	ands	r3, r2
 8001612:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a46      	ldr	r2, [pc, #280]	; (8001730 <HAL_GPIO_DeInit+0x164>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d013      	beq.n	8001644 <HAL_GPIO_DeInit+0x78>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a45      	ldr	r2, [pc, #276]	; (8001734 <HAL_GPIO_DeInit+0x168>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d00d      	beq.n	8001640 <HAL_GPIO_DeInit+0x74>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a44      	ldr	r2, [pc, #272]	; (8001738 <HAL_GPIO_DeInit+0x16c>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d007      	beq.n	800163c <HAL_GPIO_DeInit+0x70>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a43      	ldr	r2, [pc, #268]	; (800173c <HAL_GPIO_DeInit+0x170>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d101      	bne.n	8001638 <HAL_GPIO_DeInit+0x6c>
 8001634:	2303      	movs	r3, #3
 8001636:	e006      	b.n	8001646 <HAL_GPIO_DeInit+0x7a>
 8001638:	2304      	movs	r3, #4
 800163a:	e004      	b.n	8001646 <HAL_GPIO_DeInit+0x7a>
 800163c:	2302      	movs	r3, #2
 800163e:	e002      	b.n	8001646 <HAL_GPIO_DeInit+0x7a>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_GPIO_DeInit+0x7a>
 8001644:	2300      	movs	r3, #0
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	f002 0203 	and.w	r2, r2, #3
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	4093      	lsls	r3, r2
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	429a      	cmp	r2, r3
 8001654:	d132      	bne.n	80016bc <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001666:	4a31      	ldr	r2, [pc, #196]	; (800172c <HAL_GPIO_DeInit+0x160>)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	43da      	mvns	r2, r3
 8001676:	482d      	ldr	r0, [pc, #180]	; (800172c <HAL_GPIO_DeInit+0x160>)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	400a      	ands	r2, r1
 800167e:	3302      	adds	r3, #2
 8001680:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001684:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <HAL_GPIO_DeInit+0x174>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	43db      	mvns	r3, r3
 800168c:	492c      	ldr	r1, [pc, #176]	; (8001740 <HAL_GPIO_DeInit+0x174>)
 800168e:	4013      	ands	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001692:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <HAL_GPIO_DeInit+0x174>)
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	43db      	mvns	r3, r3
 800169a:	4929      	ldr	r1, [pc, #164]	; (8001740 <HAL_GPIO_DeInit+0x174>)
 800169c:	4013      	ands	r3, r2
 800169e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80016a0:	4b27      	ldr	r3, [pc, #156]	; (8001740 <HAL_GPIO_DeInit+0x174>)
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	4925      	ldr	r1, [pc, #148]	; (8001740 <HAL_GPIO_DeInit+0x174>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80016ae:	4b24      	ldr	r3, [pc, #144]	; (8001740 <HAL_GPIO_DeInit+0x174>)
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	4922      	ldr	r1, [pc, #136]	; (8001740 <HAL_GPIO_DeInit+0x174>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2bff      	cmp	r3, #255	; 0xff
 80016c0:	d801      	bhi.n	80016c6 <HAL_GPIO_DeInit+0xfa>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	e001      	b.n	80016ca <HAL_GPIO_DeInit+0xfe>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3304      	adds	r3, #4
 80016ca:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2bff      	cmp	r3, #255	; 0xff
 80016d0:	d802      	bhi.n	80016d8 <HAL_GPIO_DeInit+0x10c>
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	e002      	b.n	80016de <HAL_GPIO_DeInit+0x112>
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	3b08      	subs	r3, #8
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	210f      	movs	r1, #15
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	401a      	ands	r2, r3
 80016f0:	2104      	movs	r1, #4
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	431a      	orrs	r2, r3
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	43db      	mvns	r3, r3
 8001706:	401a      	ands	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	3301      	adds	r3, #1
 8001710:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	fa22 f303 	lsr.w	r3, r2, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	f47f af5e 	bne.w	80015dc <HAL_GPIO_DeInit+0x10>
  }
}
 8001720:	bf00      	nop
 8001722:	3724      	adds	r7, #36	; 0x24
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40010000 	.word	0x40010000
 8001730:	40010800 	.word	0x40010800
 8001734:	40010c00 	.word	0x40010c00
 8001738:	40011000 	.word	0x40011000
 800173c:	40011400 	.word	0x40011400
 8001740:	40010400 	.word	0x40010400

08001744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
 8001750:	4613      	mov	r3, r2
 8001752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001754:	787b      	ldrb	r3, [r7, #1]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800175a:	887a      	ldrh	r2, [r7, #2]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001760:	e003      	b.n	800176a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001762:	887b      	ldrh	r3, [r7, #2]
 8001764:	041a      	lsls	r2, r3, #16
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	611a      	str	r2, [r3, #16]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001780:	695a      	ldr	r2, [r3, #20]
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	4013      	ands	r3, r2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d006      	beq.n	8001798 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f806 	bl	80017a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40010400 	.word	0x40010400

080017a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e11f      	b.n	8001a0a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff f9f4 	bl	8000bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2224      	movs	r2, #36	; 0x24
 80017e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0201 	bic.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800180a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800181a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800181c:	f001 f820 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 8001820:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4a7b      	ldr	r2, [pc, #492]	; (8001a14 <HAL_I2C_Init+0x25c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d807      	bhi.n	800183c <HAL_I2C_Init+0x84>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4a7a      	ldr	r2, [pc, #488]	; (8001a18 <HAL_I2C_Init+0x260>)
 8001830:	4293      	cmp	r3, r2
 8001832:	bf94      	ite	ls
 8001834:	2301      	movls	r3, #1
 8001836:	2300      	movhi	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	e006      	b.n	800184a <HAL_I2C_Init+0x92>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a77      	ldr	r2, [pc, #476]	; (8001a1c <HAL_I2C_Init+0x264>)
 8001840:	4293      	cmp	r3, r2
 8001842:	bf94      	ite	ls
 8001844:	2301      	movls	r3, #1
 8001846:	2300      	movhi	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0db      	b.n	8001a0a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4a72      	ldr	r2, [pc, #456]	; (8001a20 <HAL_I2C_Init+0x268>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	0c9b      	lsrs	r3, r3, #18
 800185c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	430a      	orrs	r2, r1
 8001870:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4a64      	ldr	r2, [pc, #400]	; (8001a14 <HAL_I2C_Init+0x25c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d802      	bhi.n	800188c <HAL_I2C_Init+0xd4>
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	3301      	adds	r3, #1
 800188a:	e009      	b.n	80018a0 <HAL_I2C_Init+0xe8>
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	4a63      	ldr	r2, [pc, #396]	; (8001a24 <HAL_I2C_Init+0x26c>)
 8001898:	fba2 2303 	umull	r2, r3, r2, r3
 800189c:	099b      	lsrs	r3, r3, #6
 800189e:	3301      	adds	r3, #1
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	430b      	orrs	r3, r1
 80018a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4956      	ldr	r1, [pc, #344]	; (8001a14 <HAL_I2C_Init+0x25c>)
 80018bc:	428b      	cmp	r3, r1
 80018be:	d80d      	bhi.n	80018dc <HAL_I2C_Init+0x124>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1e59      	subs	r1, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	bf38      	it	cc
 80018d8:	2304      	movcc	r3, #4
 80018da:	e04f      	b.n	800197c <HAL_I2C_Init+0x1c4>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d111      	bne.n	8001908 <HAL_I2C_Init+0x150>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	1e58      	subs	r0, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6859      	ldr	r1, [r3, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	440b      	add	r3, r1
 80018f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f6:	3301      	adds	r3, #1
 80018f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf0c      	ite	eq
 8001900:	2301      	moveq	r3, #1
 8001902:	2300      	movne	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	e012      	b.n	800192e <HAL_I2C_Init+0x176>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1e58      	subs	r0, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	0099      	lsls	r1, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	fbb0 f3f3 	udiv	r3, r0, r3
 800191e:	3301      	adds	r3, #1
 8001920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_I2C_Init+0x17e>
 8001932:	2301      	movs	r3, #1
 8001934:	e022      	b.n	800197c <HAL_I2C_Init+0x1c4>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10e      	bne.n	800195c <HAL_I2C_Init+0x1a4>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1e58      	subs	r0, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6859      	ldr	r1, [r3, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	440b      	add	r3, r1
 800194c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001950:	3301      	adds	r3, #1
 8001952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800195a:	e00f      	b.n	800197c <HAL_I2C_Init+0x1c4>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1e58      	subs	r0, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6859      	ldr	r1, [r3, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	0099      	lsls	r1, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001972:	3301      	adds	r3, #1
 8001974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	6809      	ldr	r1, [r1, #0]
 8001980:	4313      	orrs	r3, r2
 8001982:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69da      	ldr	r2, [r3, #28]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6911      	ldr	r1, [r2, #16]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68d2      	ldr	r2, [r2, #12]
 80019b6:	4311      	orrs	r1, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	430b      	orrs	r3, r1
 80019be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0201 	orr.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2220      	movs	r2, #32
 80019f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	000186a0 	.word	0x000186a0
 8001a18:	001e847f 	.word	0x001e847f
 8001a1c:	003d08ff 	.word	0x003d08ff
 8001a20:	431bde83 	.word	0x431bde83
 8001a24:	10624dd3 	.word	0x10624dd3

08001a28 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e021      	b.n	8001a7e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2224      	movs	r2, #36	; 0x24
 8001a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0201 	bic.w	r2, r2, #1
 8001a50:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff f8f8 	bl	8000c48 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	4608      	mov	r0, r1
 8001a92:	4611      	mov	r1, r2
 8001a94:	461a      	mov	r2, r3
 8001a96:	4603      	mov	r3, r0
 8001a98:	817b      	strh	r3, [r7, #10]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	813b      	strh	r3, [r7, #8]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001aa2:	f7ff faff 	bl	80010a4 <HAL_GetTick>
 8001aa6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b20      	cmp	r3, #32
 8001ab2:	f040 80d9 	bne.w	8001c68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	2319      	movs	r3, #25
 8001abc:	2201      	movs	r2, #1
 8001abe:	496d      	ldr	r1, [pc, #436]	; (8001c74 <HAL_I2C_Mem_Write+0x1ec>)
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f971 	bl	8001da8 <I2C_WaitOnFlagUntilTimeout>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001acc:	2302      	movs	r3, #2
 8001ace:	e0cc      	b.n	8001c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_I2C_Mem_Write+0x56>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e0c5      	b.n	8001c6a <HAL_I2C_Mem_Write+0x1e2>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d007      	beq.n	8001b04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2221      	movs	r2, #33	; 0x21
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2240      	movs	r2, #64	; 0x40
 8001b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a3a      	ldr	r2, [r7, #32]
 8001b2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4a4d      	ldr	r2, [pc, #308]	; (8001c78 <HAL_I2C_Mem_Write+0x1f0>)
 8001b44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b46:	88f8      	ldrh	r0, [r7, #6]
 8001b48:	893a      	ldrh	r2, [r7, #8]
 8001b4a:	8979      	ldrh	r1, [r7, #10]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4603      	mov	r3, r0
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f890 	bl	8001c7c <I2C_RequestMemoryWrite>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d052      	beq.n	8001c08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e081      	b.n	8001c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f9f2 	bl	8001f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00d      	beq.n	8001b92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d107      	bne.n	8001b8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e06b      	b.n	8001c6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d11b      	bne.n	8001c08 <HAL_I2C_Mem_Write+0x180>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d017      	beq.n	8001c08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1aa      	bne.n	8001b66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 f9de 	bl	8001fd6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00d      	beq.n	8001c3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d107      	bne.n	8001c38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e016      	b.n	8001c6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e000      	b.n	8001c6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c68:	2302      	movs	r3, #2
  }
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	00100002 	.word	0x00100002
 8001c78:	ffff0000 	.word	0xffff0000

08001c7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	4608      	mov	r0, r1
 8001c86:	4611      	mov	r1, r2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	817b      	strh	r3, [r7, #10]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	813b      	strh	r3, [r7, #8]
 8001c92:	4613      	mov	r3, r2
 8001c94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f878 	bl	8001da8 <I2C_WaitOnFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00d      	beq.n	8001cda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ccc:	d103      	bne.n	8001cd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e05f      	b.n	8001d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cda:	897b      	ldrh	r3, [r7, #10]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ce8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	6a3a      	ldr	r2, [r7, #32]
 8001cee:	492d      	ldr	r1, [pc, #180]	; (8001da4 <I2C_RequestMemoryWrite+0x128>)
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 f8b0 	bl	8001e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e04c      	b.n	8001d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d18:	6a39      	ldr	r1, [r7, #32]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 f91a 	bl	8001f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d107      	bne.n	8001d3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e02b      	b.n	8001d9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d48:	893b      	ldrh	r3, [r7, #8]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	611a      	str	r2, [r3, #16]
 8001d52:	e021      	b.n	8001d98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d54:	893b      	ldrh	r3, [r7, #8]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d64:	6a39      	ldr	r1, [r7, #32]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f8f4 	bl	8001f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00d      	beq.n	8001d8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d107      	bne.n	8001d8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e005      	b.n	8001d9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d8e:	893b      	ldrh	r3, [r7, #8]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	00010002 	.word	0x00010002

08001da8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001db8:	e025      	b.n	8001e06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc0:	d021      	beq.n	8001e06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc2:	f7ff f96f 	bl	80010a4 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d302      	bcc.n	8001dd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d116      	bne.n	8001e06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2220      	movs	r2, #32
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f043 0220 	orr.w	r2, r3, #32
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e023      	b.n	8001e4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	0c1b      	lsrs	r3, r3, #16
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d10d      	bne.n	8001e2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	bf0c      	ite	eq
 8001e22:	2301      	moveq	r3, #1
 8001e24:	2300      	movne	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	e00c      	b.n	8001e46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	4013      	ands	r3, r2
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bf0c      	ite	eq
 8001e3e:	2301      	moveq	r3, #1
 8001e40:	2300      	movne	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d0b6      	beq.n	8001dba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e64:	e051      	b.n	8001f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e74:	d123      	bne.n	8001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f043 0204 	orr.w	r2, r3, #4
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e046      	b.n	8001f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d021      	beq.n	8001f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ec6:	f7ff f8ed 	bl	80010a4 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d302      	bcc.n	8001edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d116      	bne.n	8001f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f043 0220 	orr.w	r2, r3, #32
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e020      	b.n	8001f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	0c1b      	lsrs	r3, r3, #16
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d10c      	bne.n	8001f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bf14      	ite	ne
 8001f26:	2301      	movne	r3, #1
 8001f28:	2300      	moveq	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	e00b      	b.n	8001f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	43da      	mvns	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf14      	ite	ne
 8001f40:	2301      	movne	r3, #1
 8001f42:	2300      	moveq	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d18d      	bne.n	8001e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f60:	e02d      	b.n	8001fbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 f878 	bl	8002058 <I2C_IsAcknowledgeFailed>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e02d      	b.n	8001fce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f78:	d021      	beq.n	8001fbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7a:	f7ff f893 	bl	80010a4 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d302      	bcc.n	8001f90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d116      	bne.n	8001fbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f043 0220 	orr.w	r2, r3, #32
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e007      	b.n	8001fce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc8:	2b80      	cmp	r3, #128	; 0x80
 8001fca:	d1ca      	bne.n	8001f62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fe2:	e02d      	b.n	8002040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f837 	bl	8002058 <I2C_IsAcknowledgeFailed>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e02d      	b.n	8002050 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffa:	d021      	beq.n	8002040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ffc:	f7ff f852 	bl	80010a4 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	429a      	cmp	r2, r3
 800200a:	d302      	bcc.n	8002012 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d116      	bne.n	8002040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f043 0220 	orr.w	r2, r3, #32
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e007      	b.n	8002050 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b04      	cmp	r3, #4
 800204c:	d1ca      	bne.n	8001fe4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800206e:	d11b      	bne.n	80020a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002078:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f043 0204 	orr.w	r2, r3, #4
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e26c      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8087 	beq.w	80021e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d4:	4b92      	ldr	r3, [pc, #584]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d00c      	beq.n	80020fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020e0:	4b8f      	ldr	r3, [pc, #572]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d112      	bne.n	8002112 <HAL_RCC_OscConfig+0x5e>
 80020ec:	4b8c      	ldr	r3, [pc, #560]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f8:	d10b      	bne.n	8002112 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fa:	4b89      	ldr	r3, [pc, #548]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d06c      	beq.n	80021e0 <HAL_RCC_OscConfig+0x12c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d168      	bne.n	80021e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e246      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x76>
 800211c:	4b80      	ldr	r3, [pc, #512]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a7f      	ldr	r2, [pc, #508]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	e02e      	b.n	8002188 <HAL_RCC_OscConfig+0xd4>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x98>
 8002132:	4b7b      	ldr	r3, [pc, #492]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a7a      	ldr	r2, [pc, #488]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b78      	ldr	r3, [pc, #480]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a77      	ldr	r2, [pc, #476]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e01d      	b.n	8002188 <HAL_RCC_OscConfig+0xd4>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0xbc>
 8002156:	4b72      	ldr	r3, [pc, #456]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a71      	ldr	r2, [pc, #452]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800215c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b6f      	ldr	r3, [pc, #444]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a6e      	ldr	r2, [pc, #440]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0xd4>
 8002170:	4b6b      	ldr	r3, [pc, #428]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a6a      	ldr	r2, [pc, #424]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b68      	ldr	r3, [pc, #416]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a67      	ldr	r2, [pc, #412]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002186:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d013      	beq.n	80021b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7fe ff88 	bl	80010a4 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002198:	f7fe ff84 	bl	80010a4 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1fa      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b5d      	ldr	r3, [pc, #372]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0xe4>
 80021b6:	e014      	b.n	80021e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7fe ff74 	bl	80010a4 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c0:	f7fe ff70 	bl	80010a4 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e1e6      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d2:	4b53      	ldr	r3, [pc, #332]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x10c>
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d063      	beq.n	80022b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ee:	4b4c      	ldr	r3, [pc, #304]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00b      	beq.n	8002212 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021fa:	4b49      	ldr	r3, [pc, #292]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b08      	cmp	r3, #8
 8002204:	d11c      	bne.n	8002240 <HAL_RCC_OscConfig+0x18c>
 8002206:	4b46      	ldr	r3, [pc, #280]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d116      	bne.n	8002240 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	4b43      	ldr	r3, [pc, #268]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <HAL_RCC_OscConfig+0x176>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d001      	beq.n	800222a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e1ba      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222a:	4b3d      	ldr	r3, [pc, #244]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4939      	ldr	r1, [pc, #228]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223e:	e03a      	b.n	80022b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d020      	beq.n	800228a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002248:	4b36      	ldr	r3, [pc, #216]	; (8002324 <HAL_RCC_OscConfig+0x270>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7fe ff29 	bl	80010a4 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002256:	f7fe ff25 	bl	80010a4 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e19b      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002274:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4927      	ldr	r1, [pc, #156]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 8002284:	4313      	orrs	r3, r2
 8002286:	600b      	str	r3, [r1, #0]
 8002288:	e015      	b.n	80022b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228a:	4b26      	ldr	r3, [pc, #152]	; (8002324 <HAL_RCC_OscConfig+0x270>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe ff08 	bl	80010a4 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002298:	f7fe ff04 	bl	80010a4 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e17a      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d03a      	beq.n	8002338 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d019      	beq.n	80022fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <HAL_RCC_OscConfig+0x274>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d0:	f7fe fee8 	bl	80010a4 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d8:	f7fe fee4 	bl	80010a4 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e15a      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022f6:	2001      	movs	r0, #1
 80022f8:	f000 fac6 	bl	8002888 <RCC_Delay>
 80022fc:	e01c      	b.n	8002338 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_RCC_OscConfig+0x274>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002304:	f7fe fece 	bl	80010a4 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230a:	e00f      	b.n	800232c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800230c:	f7fe feca 	bl	80010a4 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d908      	bls.n	800232c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e140      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	42420000 	.word	0x42420000
 8002328:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	4b9e      	ldr	r3, [pc, #632]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1e9      	bne.n	800230c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80a6 	beq.w	8002492 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234a:	4b97      	ldr	r3, [pc, #604]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10d      	bne.n	8002372 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	4b94      	ldr	r3, [pc, #592]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4a93      	ldr	r2, [pc, #588]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	61d3      	str	r3, [r2, #28]
 8002362:	4b91      	ldr	r3, [pc, #580]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236e:	2301      	movs	r3, #1
 8002370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002372:	4b8e      	ldr	r3, [pc, #568]	; (80025ac <HAL_RCC_OscConfig+0x4f8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d118      	bne.n	80023b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237e:	4b8b      	ldr	r3, [pc, #556]	; (80025ac <HAL_RCC_OscConfig+0x4f8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a8a      	ldr	r2, [pc, #552]	; (80025ac <HAL_RCC_OscConfig+0x4f8>)
 8002384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238a:	f7fe fe8b 	bl	80010a4 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002392:	f7fe fe87 	bl	80010a4 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b64      	cmp	r3, #100	; 0x64
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0fd      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	4b81      	ldr	r3, [pc, #516]	; (80025ac <HAL_RCC_OscConfig+0x4f8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x312>
 80023b8:	4b7b      	ldr	r3, [pc, #492]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4a7a      	ldr	r2, [pc, #488]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	e02d      	b.n	8002422 <HAL_RCC_OscConfig+0x36e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x334>
 80023ce:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a75      	ldr	r2, [pc, #468]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	6213      	str	r3, [r2, #32]
 80023da:	4b73      	ldr	r3, [pc, #460]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4a72      	ldr	r2, [pc, #456]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	f023 0304 	bic.w	r3, r3, #4
 80023e4:	6213      	str	r3, [r2, #32]
 80023e6:	e01c      	b.n	8002422 <HAL_RCC_OscConfig+0x36e>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d10c      	bne.n	800240a <HAL_RCC_OscConfig+0x356>
 80023f0:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a6c      	ldr	r2, [pc, #432]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	6213      	str	r3, [r2, #32]
 80023fc:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4a69      	ldr	r2, [pc, #420]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	e00b      	b.n	8002422 <HAL_RCC_OscConfig+0x36e>
 800240a:	4b67      	ldr	r3, [pc, #412]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a66      	ldr	r2, [pc, #408]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6213      	str	r3, [r2, #32]
 8002416:	4b64      	ldr	r3, [pc, #400]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a63      	ldr	r2, [pc, #396]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d015      	beq.n	8002456 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242a:	f7fe fe3b 	bl	80010a4 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7fe fe37 	bl	80010a4 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0ab      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002448:	4b57      	ldr	r3, [pc, #348]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ee      	beq.n	8002432 <HAL_RCC_OscConfig+0x37e>
 8002454:	e014      	b.n	8002480 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002456:	f7fe fe25 	bl	80010a4 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7fe fe21 	bl	80010a4 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	; 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e095      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002474:	4b4c      	ldr	r3, [pc, #304]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1ee      	bne.n	800245e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002480:	7dfb      	ldrb	r3, [r7, #23]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d105      	bne.n	8002492 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002486:	4b48      	ldr	r3, [pc, #288]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	4a47      	ldr	r2, [pc, #284]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800248c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002490:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 8081 	beq.w	800259e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800249c:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d061      	beq.n	800256c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d146      	bne.n	800253e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b0:	4b3f      	ldr	r3, [pc, #252]	; (80025b0 <HAL_RCC_OscConfig+0x4fc>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b6:	f7fe fdf5 	bl	80010a4 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024be:	f7fe fdf1 	bl	80010a4 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e067      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d0:	4b35      	ldr	r3, [pc, #212]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f0      	bne.n	80024be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e4:	d108      	bne.n	80024f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024e6:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	492d      	ldr	r1, [pc, #180]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f8:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a19      	ldr	r1, [r3, #32]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	430b      	orrs	r3, r1
 800250a:	4927      	ldr	r1, [pc, #156]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <HAL_RCC_OscConfig+0x4fc>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7fe fdc5 	bl	80010a4 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251e:	f7fe fdc1 	bl	80010a4 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e037      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x46a>
 800253c:	e02f      	b.n	800259e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_RCC_OscConfig+0x4fc>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fe fdae 	bl	80010a4 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe fdaa 	bl	80010a4 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e020      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x498>
 800256a:	e018      	b.n	800259e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e013      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	429a      	cmp	r2, r3
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d001      	beq.n	800259e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40007000 	.word	0x40007000
 80025b0:	42420060 	.word	0x42420060

080025b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0d0      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b6a      	ldr	r3, [pc, #424]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d910      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b67      	ldr	r3, [pc, #412]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 0207 	bic.w	r2, r3, #7
 80025de:	4965      	ldr	r1, [pc, #404]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	4b63      	ldr	r3, [pc, #396]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0b8      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002610:	4b59      	ldr	r3, [pc, #356]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a58      	ldr	r2, [pc, #352]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800261a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002628:	4b53      	ldr	r3, [pc, #332]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002632:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002634:	4b50      	ldr	r3, [pc, #320]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	494d      	ldr	r1, [pc, #308]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d040      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d115      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e07f      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e073      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e06b      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002692:	4b39      	ldr	r3, [pc, #228]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f023 0203 	bic.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4936      	ldr	r1, [pc, #216]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a4:	f7fe fcfe 	bl	80010a4 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ac:	f7fe fcfa 	bl	80010a4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e053      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 020c 	and.w	r2, r3, #12
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d1eb      	bne.n	80026ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d210      	bcs.n	8002704 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b24      	ldr	r3, [pc, #144]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0207 	bic.w	r2, r3, #7
 80026ea:	4922      	ldr	r1, [pc, #136]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e032      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4916      	ldr	r1, [pc, #88]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	490e      	ldr	r1, [pc, #56]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002742:	f000 f821 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8002746:	4601      	mov	r1, r0
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002754:	5cd3      	ldrb	r3, [r2, r3]
 8002756:	fa21 f303 	lsr.w	r3, r1, r3
 800275a:	4a09      	ldr	r2, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1cc>)
 800275c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCC_ClockConfig+0x1d0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fc5c 	bl	8001020 <HAL_InitTick>

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40022000 	.word	0x40022000
 8002778:	40021000 	.word	0x40021000
 800277c:	08004e94 	.word	0x08004e94
 8002780:	20000008 	.word	0x20000008
 8002784:	2000000c 	.word	0x2000000c

08002788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002788:	b490      	push	{r4, r7}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800278e:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002790:	1d3c      	adds	r4, r7, #4
 8002792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002798:	4b28      	ldr	r3, [pc, #160]	; (800283c <HAL_RCC_GetSysClockFreq+0xb4>)
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	2300      	movs	r3, #0
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027b2:	4b23      	ldr	r3, [pc, #140]	; (8002840 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d002      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x40>
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0x46>
 80027c6:	e02d      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027c8:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027ca:	623b      	str	r3, [r7, #32]
      break;
 80027cc:	e02d      	b.n	800282a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	0c9b      	lsrs	r3, r3, #18
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027da:	4413      	add	r3, r2
 80027dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d013      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ec:	4b14      	ldr	r3, [pc, #80]	; (8002840 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	0c5b      	lsrs	r3, r3, #17
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027fa:	4413      	add	r3, r2
 80027fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002800:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	4a0f      	ldr	r2, [pc, #60]	; (8002844 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002806:	fb02 f203 	mul.w	r2, r2, r3
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
 8002812:	e004      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	4a0c      	ldr	r2, [pc, #48]	; (8002848 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	623b      	str	r3, [r7, #32]
      break;
 8002822:	e002      	b.n	800282a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002824:	4b07      	ldr	r3, [pc, #28]	; (8002844 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002826:	623b      	str	r3, [r7, #32]
      break;
 8002828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282a:	6a3b      	ldr	r3, [r7, #32]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3728      	adds	r7, #40	; 0x28
 8002830:	46bd      	mov	sp, r7
 8002832:	bc90      	pop	{r4, r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	08004124 	.word	0x08004124
 800283c:	08004134 	.word	0x08004134
 8002840:	40021000 	.word	0x40021000
 8002844:	007a1200 	.word	0x007a1200
 8002848:	003d0900 	.word	0x003d0900

0800284c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002850:	4b02      	ldr	r3, [pc, #8]	; (800285c <HAL_RCC_GetHCLKFreq+0x10>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	20000008 	.word	0x20000008

08002860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002864:	f7ff fff2 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002868:	4601      	mov	r1, r0
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4a03      	ldr	r2, [pc, #12]	; (8002884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002876:	5cd3      	ldrb	r3, [r2, r3]
 8002878:	fa21 f303 	lsr.w	r3, r1, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	08004ea4 	.word	0x08004ea4

08002888 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002890:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <RCC_Delay+0x34>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <RCC_Delay+0x38>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	0a5b      	lsrs	r3, r3, #9
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	fb02 f303 	mul.w	r3, r2, r3
 80028a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028a4:	bf00      	nop
  }
  while (Delay --);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1e5a      	subs	r2, r3, #1
 80028aa:	60fa      	str	r2, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f9      	bne.n	80028a4 <RCC_Delay+0x1c>
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	20000008 	.word	0x20000008
 80028c0:	10624dd3 	.word	0x10624dd3

080028c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e041      	b.n	800295a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe f9ce 	bl	8000c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3304      	adds	r3, #4
 8002900:	4619      	mov	r1, r3
 8002902:	4610      	mov	r0, r2
 8002904:	f000 fa92 	bl	8002e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d001      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e03a      	b.n	80029f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a18      	ldr	r2, [pc, #96]	; (80029fc <HAL_TIM_Base_Start_IT+0x98>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00e      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x58>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a6:	d009      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x58>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a14      	ldr	r2, [pc, #80]	; (8002a00 <HAL_TIM_Base_Start_IT+0x9c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d004      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x58>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <HAL_TIM_Base_Start_IT+0xa0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d111      	bne.n	80029e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d010      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0201 	orr.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029de:	e007      	b.n	80029f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	40012c00 	.word	0x40012c00
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000800 	.word	0x40000800

08002a08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6a1a      	ldr	r2, [r3, #32]
 8002a26:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10f      	bne.n	8002a50 <HAL_TIM_Base_Stop_IT+0x48>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6a1a      	ldr	r2, [r3, #32]
 8002a36:	f240 4344 	movw	r3, #1092	; 0x444
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d107      	bne.n	8002a50 <HAL_TIM_Base_Stop_IT+0x48>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d122      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d11b      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0202 	mvn.w	r2, #2
 8002a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f9a4 	bl	8002df4 <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f997 	bl	8002de2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f9a6 	bl	8002e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d122      	bne.n	8002b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d11b      	bne.n	8002b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0204 	mvn.w	r2, #4
 8002ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f97a 	bl	8002df4 <HAL_TIM_IC_CaptureCallback>
 8002b00:	e005      	b.n	8002b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f96d 	bl	8002de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f97c 	bl	8002e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d122      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d11b      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0208 	mvn.w	r2, #8
 8002b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f950 	bl	8002df4 <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f943 	bl	8002de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f952 	bl	8002e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0210 	mvn.w	r2, #16
 8002b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2208      	movs	r2, #8
 8002b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f926 	bl	8002df4 <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f919 	bl	8002de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f928 	bl	8002e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d10e      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d107      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0201 	mvn.w	r2, #1
 8002be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fd fd68 	bl	80006b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf2:	2b80      	cmp	r3, #128	; 0x80
 8002bf4:	d10e      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	2b80      	cmp	r3, #128	; 0x80
 8002c02:	d107      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fa6b 	bl	80030ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d10e      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2c:	2b40      	cmp	r3, #64	; 0x40
 8002c2e:	d107      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8ec 	bl	8002e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d10e      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d107      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0220 	mvn.w	r2, #32
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fa36 	bl	80030d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_TIM_ConfigClockSource+0x18>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e0a6      	b.n	8002dda <HAL_TIM_ConfigClockSource+0x166>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002caa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	d067      	beq.n	8002d94 <HAL_TIM_ConfigClockSource+0x120>
 8002cc4:	2b40      	cmp	r3, #64	; 0x40
 8002cc6:	d80b      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x6c>
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d073      	beq.n	8002db4 <HAL_TIM_ConfigClockSource+0x140>
 8002ccc:	2b10      	cmp	r3, #16
 8002cce:	d802      	bhi.n	8002cd6 <HAL_TIM_ConfigClockSource+0x62>
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d06f      	beq.n	8002db4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002cd4:	e078      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d06c      	beq.n	8002db4 <HAL_TIM_ConfigClockSource+0x140>
 8002cda:	2b30      	cmp	r3, #48	; 0x30
 8002cdc:	d06a      	beq.n	8002db4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002cde:	e073      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ce0:	2b70      	cmp	r3, #112	; 0x70
 8002ce2:	d00d      	beq.n	8002d00 <HAL_TIM_ConfigClockSource+0x8c>
 8002ce4:	2b70      	cmp	r3, #112	; 0x70
 8002ce6:	d804      	bhi.n	8002cf2 <HAL_TIM_ConfigClockSource+0x7e>
 8002ce8:	2b50      	cmp	r3, #80	; 0x50
 8002cea:	d033      	beq.n	8002d54 <HAL_TIM_ConfigClockSource+0xe0>
 8002cec:	2b60      	cmp	r3, #96	; 0x60
 8002cee:	d041      	beq.n	8002d74 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002cf0:	e06a      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf6:	d066      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x152>
 8002cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfc:	d017      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002cfe:	e063      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6899      	ldr	r1, [r3, #8]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f000 f965 	bl	8002fde <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d22:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	609a      	str	r2, [r3, #8]
      break;
 8002d2c:	e04c      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6899      	ldr	r1, [r3, #8]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f000 f94e 	bl	8002fde <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d50:	609a      	str	r2, [r3, #8]
      break;
 8002d52:	e039      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	461a      	mov	r2, r3
 8002d62:	f000 f8c5 	bl	8002ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2150      	movs	r1, #80	; 0x50
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 f91c 	bl	8002faa <TIM_ITRx_SetConfig>
      break;
 8002d72:	e029      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	461a      	mov	r2, r3
 8002d82:	f000 f8e3 	bl	8002f4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2160      	movs	r1, #96	; 0x60
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 f90c 	bl	8002faa <TIM_ITRx_SetConfig>
      break;
 8002d92:	e019      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	461a      	mov	r2, r3
 8002da2:	f000 f8a5 	bl	8002ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2140      	movs	r1, #64	; 0x40
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 f8fc 	bl	8002faa <TIM_ITRx_SetConfig>
      break;
 8002db2:	e009      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f000 f8f3 	bl	8002faa <TIM_ITRx_SetConfig>
        break;
 8002dc4:	e000      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
	...

08002e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a29      	ldr	r2, [pc, #164]	; (8002ee4 <TIM_Base_SetConfig+0xb8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00b      	beq.n	8002e5c <TIM_Base_SetConfig+0x30>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4a:	d007      	beq.n	8002e5c <TIM_Base_SetConfig+0x30>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a26      	ldr	r2, [pc, #152]	; (8002ee8 <TIM_Base_SetConfig+0xbc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d003      	beq.n	8002e5c <TIM_Base_SetConfig+0x30>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a25      	ldr	r2, [pc, #148]	; (8002eec <TIM_Base_SetConfig+0xc0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d108      	bne.n	8002e6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <TIM_Base_SetConfig+0xb8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00b      	beq.n	8002e8e <TIM_Base_SetConfig+0x62>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7c:	d007      	beq.n	8002e8e <TIM_Base_SetConfig+0x62>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a19      	ldr	r2, [pc, #100]	; (8002ee8 <TIM_Base_SetConfig+0xbc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d003      	beq.n	8002e8e <TIM_Base_SetConfig+0x62>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a18      	ldr	r2, [pc, #96]	; (8002eec <TIM_Base_SetConfig+0xc0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d108      	bne.n	8002ea0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <TIM_Base_SetConfig+0xb8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d103      	bne.n	8002ed4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	615a      	str	r2, [r3, #20]
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr
 8002ee4:	40012c00 	.word	0x40012c00
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40000800 	.word	0x40000800

08002ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f023 0201 	bic.w	r2, r3, #1
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f023 030a 	bic.w	r3, r3, #10
 8002f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	621a      	str	r2, [r3, #32]
}
 8002f42:	bf00      	nop
 8002f44:	371c      	adds	r7, #28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f023 0210 	bic.w	r2, r3, #16
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	031b      	lsls	r3, r3, #12
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	621a      	str	r2, [r3, #32]
}
 8002fa0:	bf00      	nop
 8002fa2:	371c      	adds	r7, #28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b085      	sub	sp, #20
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f043 0307 	orr.w	r3, r3, #7
 8002fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	609a      	str	r2, [r3, #8]
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr

08002fde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b087      	sub	sp, #28
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ff8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	021a      	lsls	r2, r3, #8
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	431a      	orrs	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	4313      	orrs	r3, r2
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	609a      	str	r2, [r3, #8]
}
 8003012:	bf00      	nop
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003030:	2302      	movs	r3, #2
 8003032:	e046      	b.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a16      	ldr	r2, [pc, #88]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d00e      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003080:	d009      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a12      	ldr	r2, [pc, #72]	; (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a10      	ldr	r2, [pc, #64]	; (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d10c      	bne.n	80030b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800309c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40000800 	.word	0x40000800

080030d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr

080030ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <__errno>:
 80030fc:	4b01      	ldr	r3, [pc, #4]	; (8003104 <__errno+0x8>)
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000014 	.word	0x20000014

08003108 <__libc_init_array>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	2500      	movs	r5, #0
 800310c:	4e0c      	ldr	r6, [pc, #48]	; (8003140 <__libc_init_array+0x38>)
 800310e:	4c0d      	ldr	r4, [pc, #52]	; (8003144 <__libc_init_array+0x3c>)
 8003110:	1ba4      	subs	r4, r4, r6
 8003112:	10a4      	asrs	r4, r4, #2
 8003114:	42a5      	cmp	r5, r4
 8003116:	d109      	bne.n	800312c <__libc_init_array+0x24>
 8003118:	f000 ff74 	bl	8004004 <_init>
 800311c:	2500      	movs	r5, #0
 800311e:	4e0a      	ldr	r6, [pc, #40]	; (8003148 <__libc_init_array+0x40>)
 8003120:	4c0a      	ldr	r4, [pc, #40]	; (800314c <__libc_init_array+0x44>)
 8003122:	1ba4      	subs	r4, r4, r6
 8003124:	10a4      	asrs	r4, r4, #2
 8003126:	42a5      	cmp	r5, r4
 8003128:	d105      	bne.n	8003136 <__libc_init_array+0x2e>
 800312a:	bd70      	pop	{r4, r5, r6, pc}
 800312c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003130:	4798      	blx	r3
 8003132:	3501      	adds	r5, #1
 8003134:	e7ee      	b.n	8003114 <__libc_init_array+0xc>
 8003136:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800313a:	4798      	blx	r3
 800313c:	3501      	adds	r5, #1
 800313e:	e7f2      	b.n	8003126 <__libc_init_array+0x1e>
 8003140:	08004f44 	.word	0x08004f44
 8003144:	08004f44 	.word	0x08004f44
 8003148:	08004f44 	.word	0x08004f44
 800314c:	08004f48 	.word	0x08004f48

08003150 <memset>:
 8003150:	4603      	mov	r3, r0
 8003152:	4402      	add	r2, r0
 8003154:	4293      	cmp	r3, r2
 8003156:	d100      	bne.n	800315a <memset+0xa>
 8003158:	4770      	bx	lr
 800315a:	f803 1b01 	strb.w	r1, [r3], #1
 800315e:	e7f9      	b.n	8003154 <memset+0x4>

08003160 <iprintf>:
 8003160:	b40f      	push	{r0, r1, r2, r3}
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <iprintf+0x2c>)
 8003164:	b513      	push	{r0, r1, r4, lr}
 8003166:	681c      	ldr	r4, [r3, #0]
 8003168:	b124      	cbz	r4, 8003174 <iprintf+0x14>
 800316a:	69a3      	ldr	r3, [r4, #24]
 800316c:	b913      	cbnz	r3, 8003174 <iprintf+0x14>
 800316e:	4620      	mov	r0, r4
 8003170:	f000 fa22 	bl	80035b8 <__sinit>
 8003174:	ab05      	add	r3, sp, #20
 8003176:	9a04      	ldr	r2, [sp, #16]
 8003178:	68a1      	ldr	r1, [r4, #8]
 800317a:	4620      	mov	r0, r4
 800317c:	9301      	str	r3, [sp, #4]
 800317e:	f000 fbd7 	bl	8003930 <_vfiprintf_r>
 8003182:	b002      	add	sp, #8
 8003184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003188:	b004      	add	sp, #16
 800318a:	4770      	bx	lr
 800318c:	20000014 	.word	0x20000014

08003190 <_puts_r>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	460e      	mov	r6, r1
 8003194:	4605      	mov	r5, r0
 8003196:	b118      	cbz	r0, 80031a0 <_puts_r+0x10>
 8003198:	6983      	ldr	r3, [r0, #24]
 800319a:	b90b      	cbnz	r3, 80031a0 <_puts_r+0x10>
 800319c:	f000 fa0c 	bl	80035b8 <__sinit>
 80031a0:	69ab      	ldr	r3, [r5, #24]
 80031a2:	68ac      	ldr	r4, [r5, #8]
 80031a4:	b913      	cbnz	r3, 80031ac <_puts_r+0x1c>
 80031a6:	4628      	mov	r0, r5
 80031a8:	f000 fa06 	bl	80035b8 <__sinit>
 80031ac:	4b23      	ldr	r3, [pc, #140]	; (800323c <_puts_r+0xac>)
 80031ae:	429c      	cmp	r4, r3
 80031b0:	d117      	bne.n	80031e2 <_puts_r+0x52>
 80031b2:	686c      	ldr	r4, [r5, #4]
 80031b4:	89a3      	ldrh	r3, [r4, #12]
 80031b6:	071b      	lsls	r3, r3, #28
 80031b8:	d51d      	bpl.n	80031f6 <_puts_r+0x66>
 80031ba:	6923      	ldr	r3, [r4, #16]
 80031bc:	b1db      	cbz	r3, 80031f6 <_puts_r+0x66>
 80031be:	3e01      	subs	r6, #1
 80031c0:	68a3      	ldr	r3, [r4, #8]
 80031c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80031c6:	3b01      	subs	r3, #1
 80031c8:	60a3      	str	r3, [r4, #8]
 80031ca:	b9e9      	cbnz	r1, 8003208 <_puts_r+0x78>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	da2e      	bge.n	800322e <_puts_r+0x9e>
 80031d0:	4622      	mov	r2, r4
 80031d2:	210a      	movs	r1, #10
 80031d4:	4628      	mov	r0, r5
 80031d6:	f000 f83f 	bl	8003258 <__swbuf_r>
 80031da:	3001      	adds	r0, #1
 80031dc:	d011      	beq.n	8003202 <_puts_r+0x72>
 80031de:	200a      	movs	r0, #10
 80031e0:	e011      	b.n	8003206 <_puts_r+0x76>
 80031e2:	4b17      	ldr	r3, [pc, #92]	; (8003240 <_puts_r+0xb0>)
 80031e4:	429c      	cmp	r4, r3
 80031e6:	d101      	bne.n	80031ec <_puts_r+0x5c>
 80031e8:	68ac      	ldr	r4, [r5, #8]
 80031ea:	e7e3      	b.n	80031b4 <_puts_r+0x24>
 80031ec:	4b15      	ldr	r3, [pc, #84]	; (8003244 <_puts_r+0xb4>)
 80031ee:	429c      	cmp	r4, r3
 80031f0:	bf08      	it	eq
 80031f2:	68ec      	ldreq	r4, [r5, #12]
 80031f4:	e7de      	b.n	80031b4 <_puts_r+0x24>
 80031f6:	4621      	mov	r1, r4
 80031f8:	4628      	mov	r0, r5
 80031fa:	f000 f87f 	bl	80032fc <__swsetup_r>
 80031fe:	2800      	cmp	r0, #0
 8003200:	d0dd      	beq.n	80031be <_puts_r+0x2e>
 8003202:	f04f 30ff 	mov.w	r0, #4294967295
 8003206:	bd70      	pop	{r4, r5, r6, pc}
 8003208:	2b00      	cmp	r3, #0
 800320a:	da04      	bge.n	8003216 <_puts_r+0x86>
 800320c:	69a2      	ldr	r2, [r4, #24]
 800320e:	429a      	cmp	r2, r3
 8003210:	dc06      	bgt.n	8003220 <_puts_r+0x90>
 8003212:	290a      	cmp	r1, #10
 8003214:	d004      	beq.n	8003220 <_puts_r+0x90>
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	6022      	str	r2, [r4, #0]
 800321c:	7019      	strb	r1, [r3, #0]
 800321e:	e7cf      	b.n	80031c0 <_puts_r+0x30>
 8003220:	4622      	mov	r2, r4
 8003222:	4628      	mov	r0, r5
 8003224:	f000 f818 	bl	8003258 <__swbuf_r>
 8003228:	3001      	adds	r0, #1
 800322a:	d1c9      	bne.n	80031c0 <_puts_r+0x30>
 800322c:	e7e9      	b.n	8003202 <_puts_r+0x72>
 800322e:	200a      	movs	r0, #10
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	6022      	str	r2, [r4, #0]
 8003236:	7018      	strb	r0, [r3, #0]
 8003238:	e7e5      	b.n	8003206 <_puts_r+0x76>
 800323a:	bf00      	nop
 800323c:	08004ed0 	.word	0x08004ed0
 8003240:	08004ef0 	.word	0x08004ef0
 8003244:	08004eb0 	.word	0x08004eb0

08003248 <puts>:
 8003248:	4b02      	ldr	r3, [pc, #8]	; (8003254 <puts+0xc>)
 800324a:	4601      	mov	r1, r0
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	f7ff bf9f 	b.w	8003190 <_puts_r>
 8003252:	bf00      	nop
 8003254:	20000014 	.word	0x20000014

08003258 <__swbuf_r>:
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325a:	460e      	mov	r6, r1
 800325c:	4614      	mov	r4, r2
 800325e:	4605      	mov	r5, r0
 8003260:	b118      	cbz	r0, 800326a <__swbuf_r+0x12>
 8003262:	6983      	ldr	r3, [r0, #24]
 8003264:	b90b      	cbnz	r3, 800326a <__swbuf_r+0x12>
 8003266:	f000 f9a7 	bl	80035b8 <__sinit>
 800326a:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <__swbuf_r+0x98>)
 800326c:	429c      	cmp	r4, r3
 800326e:	d12a      	bne.n	80032c6 <__swbuf_r+0x6e>
 8003270:	686c      	ldr	r4, [r5, #4]
 8003272:	69a3      	ldr	r3, [r4, #24]
 8003274:	60a3      	str	r3, [r4, #8]
 8003276:	89a3      	ldrh	r3, [r4, #12]
 8003278:	071a      	lsls	r2, r3, #28
 800327a:	d52e      	bpl.n	80032da <__swbuf_r+0x82>
 800327c:	6923      	ldr	r3, [r4, #16]
 800327e:	b363      	cbz	r3, 80032da <__swbuf_r+0x82>
 8003280:	6923      	ldr	r3, [r4, #16]
 8003282:	6820      	ldr	r0, [r4, #0]
 8003284:	b2f6      	uxtb	r6, r6
 8003286:	1ac0      	subs	r0, r0, r3
 8003288:	6963      	ldr	r3, [r4, #20]
 800328a:	4637      	mov	r7, r6
 800328c:	4283      	cmp	r3, r0
 800328e:	dc04      	bgt.n	800329a <__swbuf_r+0x42>
 8003290:	4621      	mov	r1, r4
 8003292:	4628      	mov	r0, r5
 8003294:	f000 f926 	bl	80034e4 <_fflush_r>
 8003298:	bb28      	cbnz	r0, 80032e6 <__swbuf_r+0x8e>
 800329a:	68a3      	ldr	r3, [r4, #8]
 800329c:	3001      	adds	r0, #1
 800329e:	3b01      	subs	r3, #1
 80032a0:	60a3      	str	r3, [r4, #8]
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	6022      	str	r2, [r4, #0]
 80032a8:	701e      	strb	r6, [r3, #0]
 80032aa:	6963      	ldr	r3, [r4, #20]
 80032ac:	4283      	cmp	r3, r0
 80032ae:	d004      	beq.n	80032ba <__swbuf_r+0x62>
 80032b0:	89a3      	ldrh	r3, [r4, #12]
 80032b2:	07db      	lsls	r3, r3, #31
 80032b4:	d519      	bpl.n	80032ea <__swbuf_r+0x92>
 80032b6:	2e0a      	cmp	r6, #10
 80032b8:	d117      	bne.n	80032ea <__swbuf_r+0x92>
 80032ba:	4621      	mov	r1, r4
 80032bc:	4628      	mov	r0, r5
 80032be:	f000 f911 	bl	80034e4 <_fflush_r>
 80032c2:	b190      	cbz	r0, 80032ea <__swbuf_r+0x92>
 80032c4:	e00f      	b.n	80032e6 <__swbuf_r+0x8e>
 80032c6:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <__swbuf_r+0x9c>)
 80032c8:	429c      	cmp	r4, r3
 80032ca:	d101      	bne.n	80032d0 <__swbuf_r+0x78>
 80032cc:	68ac      	ldr	r4, [r5, #8]
 80032ce:	e7d0      	b.n	8003272 <__swbuf_r+0x1a>
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <__swbuf_r+0xa0>)
 80032d2:	429c      	cmp	r4, r3
 80032d4:	bf08      	it	eq
 80032d6:	68ec      	ldreq	r4, [r5, #12]
 80032d8:	e7cb      	b.n	8003272 <__swbuf_r+0x1a>
 80032da:	4621      	mov	r1, r4
 80032dc:	4628      	mov	r0, r5
 80032de:	f000 f80d 	bl	80032fc <__swsetup_r>
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d0cc      	beq.n	8003280 <__swbuf_r+0x28>
 80032e6:	f04f 37ff 	mov.w	r7, #4294967295
 80032ea:	4638      	mov	r0, r7
 80032ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032ee:	bf00      	nop
 80032f0:	08004ed0 	.word	0x08004ed0
 80032f4:	08004ef0 	.word	0x08004ef0
 80032f8:	08004eb0 	.word	0x08004eb0

080032fc <__swsetup_r>:
 80032fc:	4b32      	ldr	r3, [pc, #200]	; (80033c8 <__swsetup_r+0xcc>)
 80032fe:	b570      	push	{r4, r5, r6, lr}
 8003300:	681d      	ldr	r5, [r3, #0]
 8003302:	4606      	mov	r6, r0
 8003304:	460c      	mov	r4, r1
 8003306:	b125      	cbz	r5, 8003312 <__swsetup_r+0x16>
 8003308:	69ab      	ldr	r3, [r5, #24]
 800330a:	b913      	cbnz	r3, 8003312 <__swsetup_r+0x16>
 800330c:	4628      	mov	r0, r5
 800330e:	f000 f953 	bl	80035b8 <__sinit>
 8003312:	4b2e      	ldr	r3, [pc, #184]	; (80033cc <__swsetup_r+0xd0>)
 8003314:	429c      	cmp	r4, r3
 8003316:	d10f      	bne.n	8003338 <__swsetup_r+0x3c>
 8003318:	686c      	ldr	r4, [r5, #4]
 800331a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800331e:	b29a      	uxth	r2, r3
 8003320:	0715      	lsls	r5, r2, #28
 8003322:	d42c      	bmi.n	800337e <__swsetup_r+0x82>
 8003324:	06d0      	lsls	r0, r2, #27
 8003326:	d411      	bmi.n	800334c <__swsetup_r+0x50>
 8003328:	2209      	movs	r2, #9
 800332a:	6032      	str	r2, [r6, #0]
 800332c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003330:	81a3      	strh	r3, [r4, #12]
 8003332:	f04f 30ff 	mov.w	r0, #4294967295
 8003336:	e03e      	b.n	80033b6 <__swsetup_r+0xba>
 8003338:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <__swsetup_r+0xd4>)
 800333a:	429c      	cmp	r4, r3
 800333c:	d101      	bne.n	8003342 <__swsetup_r+0x46>
 800333e:	68ac      	ldr	r4, [r5, #8]
 8003340:	e7eb      	b.n	800331a <__swsetup_r+0x1e>
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <__swsetup_r+0xd8>)
 8003344:	429c      	cmp	r4, r3
 8003346:	bf08      	it	eq
 8003348:	68ec      	ldreq	r4, [r5, #12]
 800334a:	e7e6      	b.n	800331a <__swsetup_r+0x1e>
 800334c:	0751      	lsls	r1, r2, #29
 800334e:	d512      	bpl.n	8003376 <__swsetup_r+0x7a>
 8003350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003352:	b141      	cbz	r1, 8003366 <__swsetup_r+0x6a>
 8003354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003358:	4299      	cmp	r1, r3
 800335a:	d002      	beq.n	8003362 <__swsetup_r+0x66>
 800335c:	4630      	mov	r0, r6
 800335e:	f000 fa19 	bl	8003794 <_free_r>
 8003362:	2300      	movs	r3, #0
 8003364:	6363      	str	r3, [r4, #52]	; 0x34
 8003366:	89a3      	ldrh	r3, [r4, #12]
 8003368:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800336c:	81a3      	strh	r3, [r4, #12]
 800336e:	2300      	movs	r3, #0
 8003370:	6063      	str	r3, [r4, #4]
 8003372:	6923      	ldr	r3, [r4, #16]
 8003374:	6023      	str	r3, [r4, #0]
 8003376:	89a3      	ldrh	r3, [r4, #12]
 8003378:	f043 0308 	orr.w	r3, r3, #8
 800337c:	81a3      	strh	r3, [r4, #12]
 800337e:	6923      	ldr	r3, [r4, #16]
 8003380:	b94b      	cbnz	r3, 8003396 <__swsetup_r+0x9a>
 8003382:	89a3      	ldrh	r3, [r4, #12]
 8003384:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338c:	d003      	beq.n	8003396 <__swsetup_r+0x9a>
 800338e:	4621      	mov	r1, r4
 8003390:	4630      	mov	r0, r6
 8003392:	f000 f9bf 	bl	8003714 <__smakebuf_r>
 8003396:	89a2      	ldrh	r2, [r4, #12]
 8003398:	f012 0301 	ands.w	r3, r2, #1
 800339c:	d00c      	beq.n	80033b8 <__swsetup_r+0xbc>
 800339e:	2300      	movs	r3, #0
 80033a0:	60a3      	str	r3, [r4, #8]
 80033a2:	6963      	ldr	r3, [r4, #20]
 80033a4:	425b      	negs	r3, r3
 80033a6:	61a3      	str	r3, [r4, #24]
 80033a8:	6923      	ldr	r3, [r4, #16]
 80033aa:	b953      	cbnz	r3, 80033c2 <__swsetup_r+0xc6>
 80033ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80033b4:	d1ba      	bne.n	800332c <__swsetup_r+0x30>
 80033b6:	bd70      	pop	{r4, r5, r6, pc}
 80033b8:	0792      	lsls	r2, r2, #30
 80033ba:	bf58      	it	pl
 80033bc:	6963      	ldrpl	r3, [r4, #20]
 80033be:	60a3      	str	r3, [r4, #8]
 80033c0:	e7f2      	b.n	80033a8 <__swsetup_r+0xac>
 80033c2:	2000      	movs	r0, #0
 80033c4:	e7f7      	b.n	80033b6 <__swsetup_r+0xba>
 80033c6:	bf00      	nop
 80033c8:	20000014 	.word	0x20000014
 80033cc:	08004ed0 	.word	0x08004ed0
 80033d0:	08004ef0 	.word	0x08004ef0
 80033d4:	08004eb0 	.word	0x08004eb0

080033d8 <__sflush_r>:
 80033d8:	898a      	ldrh	r2, [r1, #12]
 80033da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033de:	4605      	mov	r5, r0
 80033e0:	0710      	lsls	r0, r2, #28
 80033e2:	460c      	mov	r4, r1
 80033e4:	d458      	bmi.n	8003498 <__sflush_r+0xc0>
 80033e6:	684b      	ldr	r3, [r1, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	dc05      	bgt.n	80033f8 <__sflush_r+0x20>
 80033ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	dc02      	bgt.n	80033f8 <__sflush_r+0x20>
 80033f2:	2000      	movs	r0, #0
 80033f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033fa:	2e00      	cmp	r6, #0
 80033fc:	d0f9      	beq.n	80033f2 <__sflush_r+0x1a>
 80033fe:	2300      	movs	r3, #0
 8003400:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003404:	682f      	ldr	r7, [r5, #0]
 8003406:	6a21      	ldr	r1, [r4, #32]
 8003408:	602b      	str	r3, [r5, #0]
 800340a:	d032      	beq.n	8003472 <__sflush_r+0x9a>
 800340c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800340e:	89a3      	ldrh	r3, [r4, #12]
 8003410:	075a      	lsls	r2, r3, #29
 8003412:	d505      	bpl.n	8003420 <__sflush_r+0x48>
 8003414:	6863      	ldr	r3, [r4, #4]
 8003416:	1ac0      	subs	r0, r0, r3
 8003418:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800341a:	b10b      	cbz	r3, 8003420 <__sflush_r+0x48>
 800341c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800341e:	1ac0      	subs	r0, r0, r3
 8003420:	2300      	movs	r3, #0
 8003422:	4602      	mov	r2, r0
 8003424:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003426:	6a21      	ldr	r1, [r4, #32]
 8003428:	4628      	mov	r0, r5
 800342a:	47b0      	blx	r6
 800342c:	1c43      	adds	r3, r0, #1
 800342e:	89a3      	ldrh	r3, [r4, #12]
 8003430:	d106      	bne.n	8003440 <__sflush_r+0x68>
 8003432:	6829      	ldr	r1, [r5, #0]
 8003434:	291d      	cmp	r1, #29
 8003436:	d848      	bhi.n	80034ca <__sflush_r+0xf2>
 8003438:	4a29      	ldr	r2, [pc, #164]	; (80034e0 <__sflush_r+0x108>)
 800343a:	40ca      	lsrs	r2, r1
 800343c:	07d6      	lsls	r6, r2, #31
 800343e:	d544      	bpl.n	80034ca <__sflush_r+0xf2>
 8003440:	2200      	movs	r2, #0
 8003442:	6062      	str	r2, [r4, #4]
 8003444:	6922      	ldr	r2, [r4, #16]
 8003446:	04d9      	lsls	r1, r3, #19
 8003448:	6022      	str	r2, [r4, #0]
 800344a:	d504      	bpl.n	8003456 <__sflush_r+0x7e>
 800344c:	1c42      	adds	r2, r0, #1
 800344e:	d101      	bne.n	8003454 <__sflush_r+0x7c>
 8003450:	682b      	ldr	r3, [r5, #0]
 8003452:	b903      	cbnz	r3, 8003456 <__sflush_r+0x7e>
 8003454:	6560      	str	r0, [r4, #84]	; 0x54
 8003456:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003458:	602f      	str	r7, [r5, #0]
 800345a:	2900      	cmp	r1, #0
 800345c:	d0c9      	beq.n	80033f2 <__sflush_r+0x1a>
 800345e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003462:	4299      	cmp	r1, r3
 8003464:	d002      	beq.n	800346c <__sflush_r+0x94>
 8003466:	4628      	mov	r0, r5
 8003468:	f000 f994 	bl	8003794 <_free_r>
 800346c:	2000      	movs	r0, #0
 800346e:	6360      	str	r0, [r4, #52]	; 0x34
 8003470:	e7c0      	b.n	80033f4 <__sflush_r+0x1c>
 8003472:	2301      	movs	r3, #1
 8003474:	4628      	mov	r0, r5
 8003476:	47b0      	blx	r6
 8003478:	1c41      	adds	r1, r0, #1
 800347a:	d1c8      	bne.n	800340e <__sflush_r+0x36>
 800347c:	682b      	ldr	r3, [r5, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0c5      	beq.n	800340e <__sflush_r+0x36>
 8003482:	2b1d      	cmp	r3, #29
 8003484:	d001      	beq.n	800348a <__sflush_r+0xb2>
 8003486:	2b16      	cmp	r3, #22
 8003488:	d101      	bne.n	800348e <__sflush_r+0xb6>
 800348a:	602f      	str	r7, [r5, #0]
 800348c:	e7b1      	b.n	80033f2 <__sflush_r+0x1a>
 800348e:	89a3      	ldrh	r3, [r4, #12]
 8003490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003494:	81a3      	strh	r3, [r4, #12]
 8003496:	e7ad      	b.n	80033f4 <__sflush_r+0x1c>
 8003498:	690f      	ldr	r7, [r1, #16]
 800349a:	2f00      	cmp	r7, #0
 800349c:	d0a9      	beq.n	80033f2 <__sflush_r+0x1a>
 800349e:	0793      	lsls	r3, r2, #30
 80034a0:	bf18      	it	ne
 80034a2:	2300      	movne	r3, #0
 80034a4:	680e      	ldr	r6, [r1, #0]
 80034a6:	bf08      	it	eq
 80034a8:	694b      	ldreq	r3, [r1, #20]
 80034aa:	eba6 0807 	sub.w	r8, r6, r7
 80034ae:	600f      	str	r7, [r1, #0]
 80034b0:	608b      	str	r3, [r1, #8]
 80034b2:	f1b8 0f00 	cmp.w	r8, #0
 80034b6:	dd9c      	ble.n	80033f2 <__sflush_r+0x1a>
 80034b8:	4643      	mov	r3, r8
 80034ba:	463a      	mov	r2, r7
 80034bc:	6a21      	ldr	r1, [r4, #32]
 80034be:	4628      	mov	r0, r5
 80034c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80034c2:	47b0      	blx	r6
 80034c4:	2800      	cmp	r0, #0
 80034c6:	dc06      	bgt.n	80034d6 <__sflush_r+0xfe>
 80034c8:	89a3      	ldrh	r3, [r4, #12]
 80034ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ce:	81a3      	strh	r3, [r4, #12]
 80034d0:	f04f 30ff 	mov.w	r0, #4294967295
 80034d4:	e78e      	b.n	80033f4 <__sflush_r+0x1c>
 80034d6:	4407      	add	r7, r0
 80034d8:	eba8 0800 	sub.w	r8, r8, r0
 80034dc:	e7e9      	b.n	80034b2 <__sflush_r+0xda>
 80034de:	bf00      	nop
 80034e0:	20400001 	.word	0x20400001

080034e4 <_fflush_r>:
 80034e4:	b538      	push	{r3, r4, r5, lr}
 80034e6:	690b      	ldr	r3, [r1, #16]
 80034e8:	4605      	mov	r5, r0
 80034ea:	460c      	mov	r4, r1
 80034ec:	b1db      	cbz	r3, 8003526 <_fflush_r+0x42>
 80034ee:	b118      	cbz	r0, 80034f8 <_fflush_r+0x14>
 80034f0:	6983      	ldr	r3, [r0, #24]
 80034f2:	b90b      	cbnz	r3, 80034f8 <_fflush_r+0x14>
 80034f4:	f000 f860 	bl	80035b8 <__sinit>
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <_fflush_r+0x48>)
 80034fa:	429c      	cmp	r4, r3
 80034fc:	d109      	bne.n	8003512 <_fflush_r+0x2e>
 80034fe:	686c      	ldr	r4, [r5, #4]
 8003500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003504:	b17b      	cbz	r3, 8003526 <_fflush_r+0x42>
 8003506:	4621      	mov	r1, r4
 8003508:	4628      	mov	r0, r5
 800350a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800350e:	f7ff bf63 	b.w	80033d8 <__sflush_r>
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <_fflush_r+0x4c>)
 8003514:	429c      	cmp	r4, r3
 8003516:	d101      	bne.n	800351c <_fflush_r+0x38>
 8003518:	68ac      	ldr	r4, [r5, #8]
 800351a:	e7f1      	b.n	8003500 <_fflush_r+0x1c>
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <_fflush_r+0x50>)
 800351e:	429c      	cmp	r4, r3
 8003520:	bf08      	it	eq
 8003522:	68ec      	ldreq	r4, [r5, #12]
 8003524:	e7ec      	b.n	8003500 <_fflush_r+0x1c>
 8003526:	2000      	movs	r0, #0
 8003528:	bd38      	pop	{r3, r4, r5, pc}
 800352a:	bf00      	nop
 800352c:	08004ed0 	.word	0x08004ed0
 8003530:	08004ef0 	.word	0x08004ef0
 8003534:	08004eb0 	.word	0x08004eb0

08003538 <std>:
 8003538:	2300      	movs	r3, #0
 800353a:	b510      	push	{r4, lr}
 800353c:	4604      	mov	r4, r0
 800353e:	e9c0 3300 	strd	r3, r3, [r0]
 8003542:	6083      	str	r3, [r0, #8]
 8003544:	8181      	strh	r1, [r0, #12]
 8003546:	6643      	str	r3, [r0, #100]	; 0x64
 8003548:	81c2      	strh	r2, [r0, #14]
 800354a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800354e:	6183      	str	r3, [r0, #24]
 8003550:	4619      	mov	r1, r3
 8003552:	2208      	movs	r2, #8
 8003554:	305c      	adds	r0, #92	; 0x5c
 8003556:	f7ff fdfb 	bl	8003150 <memset>
 800355a:	4b05      	ldr	r3, [pc, #20]	; (8003570 <std+0x38>)
 800355c:	6224      	str	r4, [r4, #32]
 800355e:	6263      	str	r3, [r4, #36]	; 0x24
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <std+0x3c>)
 8003562:	62a3      	str	r3, [r4, #40]	; 0x28
 8003564:	4b04      	ldr	r3, [pc, #16]	; (8003578 <std+0x40>)
 8003566:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003568:	4b04      	ldr	r3, [pc, #16]	; (800357c <std+0x44>)
 800356a:	6323      	str	r3, [r4, #48]	; 0x30
 800356c:	bd10      	pop	{r4, pc}
 800356e:	bf00      	nop
 8003570:	08003e8d 	.word	0x08003e8d
 8003574:	08003eaf 	.word	0x08003eaf
 8003578:	08003ee7 	.word	0x08003ee7
 800357c:	08003f0b 	.word	0x08003f0b

08003580 <_cleanup_r>:
 8003580:	4901      	ldr	r1, [pc, #4]	; (8003588 <_cleanup_r+0x8>)
 8003582:	f000 b885 	b.w	8003690 <_fwalk_reent>
 8003586:	bf00      	nop
 8003588:	080034e5 	.word	0x080034e5

0800358c <__sfmoreglue>:
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	2568      	movs	r5, #104	; 0x68
 8003590:	1e4a      	subs	r2, r1, #1
 8003592:	4355      	muls	r5, r2
 8003594:	460e      	mov	r6, r1
 8003596:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800359a:	f000 f947 	bl	800382c <_malloc_r>
 800359e:	4604      	mov	r4, r0
 80035a0:	b140      	cbz	r0, 80035b4 <__sfmoreglue+0x28>
 80035a2:	2100      	movs	r1, #0
 80035a4:	e9c0 1600 	strd	r1, r6, [r0]
 80035a8:	300c      	adds	r0, #12
 80035aa:	60a0      	str	r0, [r4, #8]
 80035ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80035b0:	f7ff fdce 	bl	8003150 <memset>
 80035b4:	4620      	mov	r0, r4
 80035b6:	bd70      	pop	{r4, r5, r6, pc}

080035b8 <__sinit>:
 80035b8:	6983      	ldr	r3, [r0, #24]
 80035ba:	b510      	push	{r4, lr}
 80035bc:	4604      	mov	r4, r0
 80035be:	bb33      	cbnz	r3, 800360e <__sinit+0x56>
 80035c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80035c4:	6503      	str	r3, [r0, #80]	; 0x50
 80035c6:	4b12      	ldr	r3, [pc, #72]	; (8003610 <__sinit+0x58>)
 80035c8:	4a12      	ldr	r2, [pc, #72]	; (8003614 <__sinit+0x5c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6282      	str	r2, [r0, #40]	; 0x28
 80035ce:	4298      	cmp	r0, r3
 80035d0:	bf04      	itt	eq
 80035d2:	2301      	moveq	r3, #1
 80035d4:	6183      	streq	r3, [r0, #24]
 80035d6:	f000 f81f 	bl	8003618 <__sfp>
 80035da:	6060      	str	r0, [r4, #4]
 80035dc:	4620      	mov	r0, r4
 80035de:	f000 f81b 	bl	8003618 <__sfp>
 80035e2:	60a0      	str	r0, [r4, #8]
 80035e4:	4620      	mov	r0, r4
 80035e6:	f000 f817 	bl	8003618 <__sfp>
 80035ea:	2200      	movs	r2, #0
 80035ec:	60e0      	str	r0, [r4, #12]
 80035ee:	2104      	movs	r1, #4
 80035f0:	6860      	ldr	r0, [r4, #4]
 80035f2:	f7ff ffa1 	bl	8003538 <std>
 80035f6:	2201      	movs	r2, #1
 80035f8:	2109      	movs	r1, #9
 80035fa:	68a0      	ldr	r0, [r4, #8]
 80035fc:	f7ff ff9c 	bl	8003538 <std>
 8003600:	2202      	movs	r2, #2
 8003602:	2112      	movs	r1, #18
 8003604:	68e0      	ldr	r0, [r4, #12]
 8003606:	f7ff ff97 	bl	8003538 <std>
 800360a:	2301      	movs	r3, #1
 800360c:	61a3      	str	r3, [r4, #24]
 800360e:	bd10      	pop	{r4, pc}
 8003610:	08004eac 	.word	0x08004eac
 8003614:	08003581 	.word	0x08003581

08003618 <__sfp>:
 8003618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361a:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <__sfp+0x70>)
 800361c:	4607      	mov	r7, r0
 800361e:	681e      	ldr	r6, [r3, #0]
 8003620:	69b3      	ldr	r3, [r6, #24]
 8003622:	b913      	cbnz	r3, 800362a <__sfp+0x12>
 8003624:	4630      	mov	r0, r6
 8003626:	f7ff ffc7 	bl	80035b8 <__sinit>
 800362a:	3648      	adds	r6, #72	; 0x48
 800362c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003630:	3b01      	subs	r3, #1
 8003632:	d503      	bpl.n	800363c <__sfp+0x24>
 8003634:	6833      	ldr	r3, [r6, #0]
 8003636:	b133      	cbz	r3, 8003646 <__sfp+0x2e>
 8003638:	6836      	ldr	r6, [r6, #0]
 800363a:	e7f7      	b.n	800362c <__sfp+0x14>
 800363c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003640:	b16d      	cbz	r5, 800365e <__sfp+0x46>
 8003642:	3468      	adds	r4, #104	; 0x68
 8003644:	e7f4      	b.n	8003630 <__sfp+0x18>
 8003646:	2104      	movs	r1, #4
 8003648:	4638      	mov	r0, r7
 800364a:	f7ff ff9f 	bl	800358c <__sfmoreglue>
 800364e:	6030      	str	r0, [r6, #0]
 8003650:	2800      	cmp	r0, #0
 8003652:	d1f1      	bne.n	8003638 <__sfp+0x20>
 8003654:	230c      	movs	r3, #12
 8003656:	4604      	mov	r4, r0
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	4620      	mov	r0, r4
 800365c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <__sfp+0x74>)
 8003660:	6665      	str	r5, [r4, #100]	; 0x64
 8003662:	e9c4 5500 	strd	r5, r5, [r4]
 8003666:	60a5      	str	r5, [r4, #8]
 8003668:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800366c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003670:	2208      	movs	r2, #8
 8003672:	4629      	mov	r1, r5
 8003674:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003678:	f7ff fd6a 	bl	8003150 <memset>
 800367c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003680:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003684:	e7e9      	b.n	800365a <__sfp+0x42>
 8003686:	bf00      	nop
 8003688:	08004eac 	.word	0x08004eac
 800368c:	ffff0001 	.word	0xffff0001

08003690 <_fwalk_reent>:
 8003690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003694:	4680      	mov	r8, r0
 8003696:	4689      	mov	r9, r1
 8003698:	2600      	movs	r6, #0
 800369a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800369e:	b914      	cbnz	r4, 80036a6 <_fwalk_reent+0x16>
 80036a0:	4630      	mov	r0, r6
 80036a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80036aa:	3f01      	subs	r7, #1
 80036ac:	d501      	bpl.n	80036b2 <_fwalk_reent+0x22>
 80036ae:	6824      	ldr	r4, [r4, #0]
 80036b0:	e7f5      	b.n	800369e <_fwalk_reent+0xe>
 80036b2:	89ab      	ldrh	r3, [r5, #12]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d907      	bls.n	80036c8 <_fwalk_reent+0x38>
 80036b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036bc:	3301      	adds	r3, #1
 80036be:	d003      	beq.n	80036c8 <_fwalk_reent+0x38>
 80036c0:	4629      	mov	r1, r5
 80036c2:	4640      	mov	r0, r8
 80036c4:	47c8      	blx	r9
 80036c6:	4306      	orrs	r6, r0
 80036c8:	3568      	adds	r5, #104	; 0x68
 80036ca:	e7ee      	b.n	80036aa <_fwalk_reent+0x1a>

080036cc <__swhatbuf_r>:
 80036cc:	b570      	push	{r4, r5, r6, lr}
 80036ce:	460e      	mov	r6, r1
 80036d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036d4:	b096      	sub	sp, #88	; 0x58
 80036d6:	2900      	cmp	r1, #0
 80036d8:	4614      	mov	r4, r2
 80036da:	461d      	mov	r5, r3
 80036dc:	da07      	bge.n	80036ee <__swhatbuf_r+0x22>
 80036de:	2300      	movs	r3, #0
 80036e0:	602b      	str	r3, [r5, #0]
 80036e2:	89b3      	ldrh	r3, [r6, #12]
 80036e4:	061a      	lsls	r2, r3, #24
 80036e6:	d410      	bmi.n	800370a <__swhatbuf_r+0x3e>
 80036e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ec:	e00e      	b.n	800370c <__swhatbuf_r+0x40>
 80036ee:	466a      	mov	r2, sp
 80036f0:	f000 fc32 	bl	8003f58 <_fstat_r>
 80036f4:	2800      	cmp	r0, #0
 80036f6:	dbf2      	blt.n	80036de <__swhatbuf_r+0x12>
 80036f8:	9a01      	ldr	r2, [sp, #4]
 80036fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003702:	425a      	negs	r2, r3
 8003704:	415a      	adcs	r2, r3
 8003706:	602a      	str	r2, [r5, #0]
 8003708:	e7ee      	b.n	80036e8 <__swhatbuf_r+0x1c>
 800370a:	2340      	movs	r3, #64	; 0x40
 800370c:	2000      	movs	r0, #0
 800370e:	6023      	str	r3, [r4, #0]
 8003710:	b016      	add	sp, #88	; 0x58
 8003712:	bd70      	pop	{r4, r5, r6, pc}

08003714 <__smakebuf_r>:
 8003714:	898b      	ldrh	r3, [r1, #12]
 8003716:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003718:	079d      	lsls	r5, r3, #30
 800371a:	4606      	mov	r6, r0
 800371c:	460c      	mov	r4, r1
 800371e:	d507      	bpl.n	8003730 <__smakebuf_r+0x1c>
 8003720:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	6123      	str	r3, [r4, #16]
 8003728:	2301      	movs	r3, #1
 800372a:	6163      	str	r3, [r4, #20]
 800372c:	b002      	add	sp, #8
 800372e:	bd70      	pop	{r4, r5, r6, pc}
 8003730:	ab01      	add	r3, sp, #4
 8003732:	466a      	mov	r2, sp
 8003734:	f7ff ffca 	bl	80036cc <__swhatbuf_r>
 8003738:	9900      	ldr	r1, [sp, #0]
 800373a:	4605      	mov	r5, r0
 800373c:	4630      	mov	r0, r6
 800373e:	f000 f875 	bl	800382c <_malloc_r>
 8003742:	b948      	cbnz	r0, 8003758 <__smakebuf_r+0x44>
 8003744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003748:	059a      	lsls	r2, r3, #22
 800374a:	d4ef      	bmi.n	800372c <__smakebuf_r+0x18>
 800374c:	f023 0303 	bic.w	r3, r3, #3
 8003750:	f043 0302 	orr.w	r3, r3, #2
 8003754:	81a3      	strh	r3, [r4, #12]
 8003756:	e7e3      	b.n	8003720 <__smakebuf_r+0xc>
 8003758:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <__smakebuf_r+0x7c>)
 800375a:	62b3      	str	r3, [r6, #40]	; 0x28
 800375c:	89a3      	ldrh	r3, [r4, #12]
 800375e:	6020      	str	r0, [r4, #0]
 8003760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003764:	81a3      	strh	r3, [r4, #12]
 8003766:	9b00      	ldr	r3, [sp, #0]
 8003768:	6120      	str	r0, [r4, #16]
 800376a:	6163      	str	r3, [r4, #20]
 800376c:	9b01      	ldr	r3, [sp, #4]
 800376e:	b15b      	cbz	r3, 8003788 <__smakebuf_r+0x74>
 8003770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003774:	4630      	mov	r0, r6
 8003776:	f000 fc01 	bl	8003f7c <_isatty_r>
 800377a:	b128      	cbz	r0, 8003788 <__smakebuf_r+0x74>
 800377c:	89a3      	ldrh	r3, [r4, #12]
 800377e:	f023 0303 	bic.w	r3, r3, #3
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	81a3      	strh	r3, [r4, #12]
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	431d      	orrs	r5, r3
 800378c:	81a5      	strh	r5, [r4, #12]
 800378e:	e7cd      	b.n	800372c <__smakebuf_r+0x18>
 8003790:	08003581 	.word	0x08003581

08003794 <_free_r>:
 8003794:	b538      	push	{r3, r4, r5, lr}
 8003796:	4605      	mov	r5, r0
 8003798:	2900      	cmp	r1, #0
 800379a:	d043      	beq.n	8003824 <_free_r+0x90>
 800379c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037a0:	1f0c      	subs	r4, r1, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bfb8      	it	lt
 80037a6:	18e4      	addlt	r4, r4, r3
 80037a8:	f000 fc18 	bl	8003fdc <__malloc_lock>
 80037ac:	4a1e      	ldr	r2, [pc, #120]	; (8003828 <_free_r+0x94>)
 80037ae:	6813      	ldr	r3, [r2, #0]
 80037b0:	4610      	mov	r0, r2
 80037b2:	b933      	cbnz	r3, 80037c2 <_free_r+0x2e>
 80037b4:	6063      	str	r3, [r4, #4]
 80037b6:	6014      	str	r4, [r2, #0]
 80037b8:	4628      	mov	r0, r5
 80037ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037be:	f000 bc0e 	b.w	8003fde <__malloc_unlock>
 80037c2:	42a3      	cmp	r3, r4
 80037c4:	d90b      	bls.n	80037de <_free_r+0x4a>
 80037c6:	6821      	ldr	r1, [r4, #0]
 80037c8:	1862      	adds	r2, r4, r1
 80037ca:	4293      	cmp	r3, r2
 80037cc:	bf01      	itttt	eq
 80037ce:	681a      	ldreq	r2, [r3, #0]
 80037d0:	685b      	ldreq	r3, [r3, #4]
 80037d2:	1852      	addeq	r2, r2, r1
 80037d4:	6022      	streq	r2, [r4, #0]
 80037d6:	6063      	str	r3, [r4, #4]
 80037d8:	6004      	str	r4, [r0, #0]
 80037da:	e7ed      	b.n	80037b8 <_free_r+0x24>
 80037dc:	4613      	mov	r3, r2
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	b10a      	cbz	r2, 80037e6 <_free_r+0x52>
 80037e2:	42a2      	cmp	r2, r4
 80037e4:	d9fa      	bls.n	80037dc <_free_r+0x48>
 80037e6:	6819      	ldr	r1, [r3, #0]
 80037e8:	1858      	adds	r0, r3, r1
 80037ea:	42a0      	cmp	r0, r4
 80037ec:	d10b      	bne.n	8003806 <_free_r+0x72>
 80037ee:	6820      	ldr	r0, [r4, #0]
 80037f0:	4401      	add	r1, r0
 80037f2:	1858      	adds	r0, r3, r1
 80037f4:	4282      	cmp	r2, r0
 80037f6:	6019      	str	r1, [r3, #0]
 80037f8:	d1de      	bne.n	80037b8 <_free_r+0x24>
 80037fa:	6810      	ldr	r0, [r2, #0]
 80037fc:	6852      	ldr	r2, [r2, #4]
 80037fe:	4401      	add	r1, r0
 8003800:	6019      	str	r1, [r3, #0]
 8003802:	605a      	str	r2, [r3, #4]
 8003804:	e7d8      	b.n	80037b8 <_free_r+0x24>
 8003806:	d902      	bls.n	800380e <_free_r+0x7a>
 8003808:	230c      	movs	r3, #12
 800380a:	602b      	str	r3, [r5, #0]
 800380c:	e7d4      	b.n	80037b8 <_free_r+0x24>
 800380e:	6820      	ldr	r0, [r4, #0]
 8003810:	1821      	adds	r1, r4, r0
 8003812:	428a      	cmp	r2, r1
 8003814:	bf01      	itttt	eq
 8003816:	6811      	ldreq	r1, [r2, #0]
 8003818:	6852      	ldreq	r2, [r2, #4]
 800381a:	1809      	addeq	r1, r1, r0
 800381c:	6021      	streq	r1, [r4, #0]
 800381e:	6062      	str	r2, [r4, #4]
 8003820:	605c      	str	r4, [r3, #4]
 8003822:	e7c9      	b.n	80037b8 <_free_r+0x24>
 8003824:	bd38      	pop	{r3, r4, r5, pc}
 8003826:	bf00      	nop
 8003828:	200004a0 	.word	0x200004a0

0800382c <_malloc_r>:
 800382c:	b570      	push	{r4, r5, r6, lr}
 800382e:	1ccd      	adds	r5, r1, #3
 8003830:	f025 0503 	bic.w	r5, r5, #3
 8003834:	3508      	adds	r5, #8
 8003836:	2d0c      	cmp	r5, #12
 8003838:	bf38      	it	cc
 800383a:	250c      	movcc	r5, #12
 800383c:	2d00      	cmp	r5, #0
 800383e:	4606      	mov	r6, r0
 8003840:	db01      	blt.n	8003846 <_malloc_r+0x1a>
 8003842:	42a9      	cmp	r1, r5
 8003844:	d903      	bls.n	800384e <_malloc_r+0x22>
 8003846:	230c      	movs	r3, #12
 8003848:	6033      	str	r3, [r6, #0]
 800384a:	2000      	movs	r0, #0
 800384c:	bd70      	pop	{r4, r5, r6, pc}
 800384e:	f000 fbc5 	bl	8003fdc <__malloc_lock>
 8003852:	4a21      	ldr	r2, [pc, #132]	; (80038d8 <_malloc_r+0xac>)
 8003854:	6814      	ldr	r4, [r2, #0]
 8003856:	4621      	mov	r1, r4
 8003858:	b991      	cbnz	r1, 8003880 <_malloc_r+0x54>
 800385a:	4c20      	ldr	r4, [pc, #128]	; (80038dc <_malloc_r+0xb0>)
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	b91b      	cbnz	r3, 8003868 <_malloc_r+0x3c>
 8003860:	4630      	mov	r0, r6
 8003862:	f000 fb03 	bl	8003e6c <_sbrk_r>
 8003866:	6020      	str	r0, [r4, #0]
 8003868:	4629      	mov	r1, r5
 800386a:	4630      	mov	r0, r6
 800386c:	f000 fafe 	bl	8003e6c <_sbrk_r>
 8003870:	1c43      	adds	r3, r0, #1
 8003872:	d124      	bne.n	80038be <_malloc_r+0x92>
 8003874:	230c      	movs	r3, #12
 8003876:	4630      	mov	r0, r6
 8003878:	6033      	str	r3, [r6, #0]
 800387a:	f000 fbb0 	bl	8003fde <__malloc_unlock>
 800387e:	e7e4      	b.n	800384a <_malloc_r+0x1e>
 8003880:	680b      	ldr	r3, [r1, #0]
 8003882:	1b5b      	subs	r3, r3, r5
 8003884:	d418      	bmi.n	80038b8 <_malloc_r+0x8c>
 8003886:	2b0b      	cmp	r3, #11
 8003888:	d90f      	bls.n	80038aa <_malloc_r+0x7e>
 800388a:	600b      	str	r3, [r1, #0]
 800388c:	18cc      	adds	r4, r1, r3
 800388e:	50cd      	str	r5, [r1, r3]
 8003890:	4630      	mov	r0, r6
 8003892:	f000 fba4 	bl	8003fde <__malloc_unlock>
 8003896:	f104 000b 	add.w	r0, r4, #11
 800389a:	1d23      	adds	r3, r4, #4
 800389c:	f020 0007 	bic.w	r0, r0, #7
 80038a0:	1ac3      	subs	r3, r0, r3
 80038a2:	d0d3      	beq.n	800384c <_malloc_r+0x20>
 80038a4:	425a      	negs	r2, r3
 80038a6:	50e2      	str	r2, [r4, r3]
 80038a8:	e7d0      	b.n	800384c <_malloc_r+0x20>
 80038aa:	684b      	ldr	r3, [r1, #4]
 80038ac:	428c      	cmp	r4, r1
 80038ae:	bf16      	itet	ne
 80038b0:	6063      	strne	r3, [r4, #4]
 80038b2:	6013      	streq	r3, [r2, #0]
 80038b4:	460c      	movne	r4, r1
 80038b6:	e7eb      	b.n	8003890 <_malloc_r+0x64>
 80038b8:	460c      	mov	r4, r1
 80038ba:	6849      	ldr	r1, [r1, #4]
 80038bc:	e7cc      	b.n	8003858 <_malloc_r+0x2c>
 80038be:	1cc4      	adds	r4, r0, #3
 80038c0:	f024 0403 	bic.w	r4, r4, #3
 80038c4:	42a0      	cmp	r0, r4
 80038c6:	d005      	beq.n	80038d4 <_malloc_r+0xa8>
 80038c8:	1a21      	subs	r1, r4, r0
 80038ca:	4630      	mov	r0, r6
 80038cc:	f000 face 	bl	8003e6c <_sbrk_r>
 80038d0:	3001      	adds	r0, #1
 80038d2:	d0cf      	beq.n	8003874 <_malloc_r+0x48>
 80038d4:	6025      	str	r5, [r4, #0]
 80038d6:	e7db      	b.n	8003890 <_malloc_r+0x64>
 80038d8:	200004a0 	.word	0x200004a0
 80038dc:	200004a4 	.word	0x200004a4

080038e0 <__sfputc_r>:
 80038e0:	6893      	ldr	r3, [r2, #8]
 80038e2:	b410      	push	{r4}
 80038e4:	3b01      	subs	r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	6093      	str	r3, [r2, #8]
 80038ea:	da07      	bge.n	80038fc <__sfputc_r+0x1c>
 80038ec:	6994      	ldr	r4, [r2, #24]
 80038ee:	42a3      	cmp	r3, r4
 80038f0:	db01      	blt.n	80038f6 <__sfputc_r+0x16>
 80038f2:	290a      	cmp	r1, #10
 80038f4:	d102      	bne.n	80038fc <__sfputc_r+0x1c>
 80038f6:	bc10      	pop	{r4}
 80038f8:	f7ff bcae 	b.w	8003258 <__swbuf_r>
 80038fc:	6813      	ldr	r3, [r2, #0]
 80038fe:	1c58      	adds	r0, r3, #1
 8003900:	6010      	str	r0, [r2, #0]
 8003902:	7019      	strb	r1, [r3, #0]
 8003904:	4608      	mov	r0, r1
 8003906:	bc10      	pop	{r4}
 8003908:	4770      	bx	lr

0800390a <__sfputs_r>:
 800390a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390c:	4606      	mov	r6, r0
 800390e:	460f      	mov	r7, r1
 8003910:	4614      	mov	r4, r2
 8003912:	18d5      	adds	r5, r2, r3
 8003914:	42ac      	cmp	r4, r5
 8003916:	d101      	bne.n	800391c <__sfputs_r+0x12>
 8003918:	2000      	movs	r0, #0
 800391a:	e007      	b.n	800392c <__sfputs_r+0x22>
 800391c:	463a      	mov	r2, r7
 800391e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003922:	4630      	mov	r0, r6
 8003924:	f7ff ffdc 	bl	80038e0 <__sfputc_r>
 8003928:	1c43      	adds	r3, r0, #1
 800392a:	d1f3      	bne.n	8003914 <__sfputs_r+0xa>
 800392c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003930 <_vfiprintf_r>:
 8003930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003934:	460c      	mov	r4, r1
 8003936:	b09d      	sub	sp, #116	; 0x74
 8003938:	4617      	mov	r7, r2
 800393a:	461d      	mov	r5, r3
 800393c:	4606      	mov	r6, r0
 800393e:	b118      	cbz	r0, 8003948 <_vfiprintf_r+0x18>
 8003940:	6983      	ldr	r3, [r0, #24]
 8003942:	b90b      	cbnz	r3, 8003948 <_vfiprintf_r+0x18>
 8003944:	f7ff fe38 	bl	80035b8 <__sinit>
 8003948:	4b7c      	ldr	r3, [pc, #496]	; (8003b3c <_vfiprintf_r+0x20c>)
 800394a:	429c      	cmp	r4, r3
 800394c:	d158      	bne.n	8003a00 <_vfiprintf_r+0xd0>
 800394e:	6874      	ldr	r4, [r6, #4]
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	0718      	lsls	r0, r3, #28
 8003954:	d55e      	bpl.n	8003a14 <_vfiprintf_r+0xe4>
 8003956:	6923      	ldr	r3, [r4, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d05b      	beq.n	8003a14 <_vfiprintf_r+0xe4>
 800395c:	2300      	movs	r3, #0
 800395e:	9309      	str	r3, [sp, #36]	; 0x24
 8003960:	2320      	movs	r3, #32
 8003962:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003966:	2330      	movs	r3, #48	; 0x30
 8003968:	f04f 0b01 	mov.w	fp, #1
 800396c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003970:	9503      	str	r5, [sp, #12]
 8003972:	46b8      	mov	r8, r7
 8003974:	4645      	mov	r5, r8
 8003976:	f815 3b01 	ldrb.w	r3, [r5], #1
 800397a:	b10b      	cbz	r3, 8003980 <_vfiprintf_r+0x50>
 800397c:	2b25      	cmp	r3, #37	; 0x25
 800397e:	d154      	bne.n	8003a2a <_vfiprintf_r+0xfa>
 8003980:	ebb8 0a07 	subs.w	sl, r8, r7
 8003984:	d00b      	beq.n	800399e <_vfiprintf_r+0x6e>
 8003986:	4653      	mov	r3, sl
 8003988:	463a      	mov	r2, r7
 800398a:	4621      	mov	r1, r4
 800398c:	4630      	mov	r0, r6
 800398e:	f7ff ffbc 	bl	800390a <__sfputs_r>
 8003992:	3001      	adds	r0, #1
 8003994:	f000 80c2 	beq.w	8003b1c <_vfiprintf_r+0x1ec>
 8003998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800399a:	4453      	add	r3, sl
 800399c:	9309      	str	r3, [sp, #36]	; 0x24
 800399e:	f898 3000 	ldrb.w	r3, [r8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 80ba 	beq.w	8003b1c <_vfiprintf_r+0x1ec>
 80039a8:	2300      	movs	r3, #0
 80039aa:	f04f 32ff 	mov.w	r2, #4294967295
 80039ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039b2:	9304      	str	r3, [sp, #16]
 80039b4:	9307      	str	r3, [sp, #28]
 80039b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039ba:	931a      	str	r3, [sp, #104]	; 0x68
 80039bc:	46a8      	mov	r8, r5
 80039be:	2205      	movs	r2, #5
 80039c0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80039c4:	485e      	ldr	r0, [pc, #376]	; (8003b40 <_vfiprintf_r+0x210>)
 80039c6:	f000 fafb 	bl	8003fc0 <memchr>
 80039ca:	9b04      	ldr	r3, [sp, #16]
 80039cc:	bb78      	cbnz	r0, 8003a2e <_vfiprintf_r+0xfe>
 80039ce:	06d9      	lsls	r1, r3, #27
 80039d0:	bf44      	itt	mi
 80039d2:	2220      	movmi	r2, #32
 80039d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039d8:	071a      	lsls	r2, r3, #28
 80039da:	bf44      	itt	mi
 80039dc:	222b      	movmi	r2, #43	; 0x2b
 80039de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039e2:	782a      	ldrb	r2, [r5, #0]
 80039e4:	2a2a      	cmp	r2, #42	; 0x2a
 80039e6:	d02a      	beq.n	8003a3e <_vfiprintf_r+0x10e>
 80039e8:	46a8      	mov	r8, r5
 80039ea:	2000      	movs	r0, #0
 80039ec:	250a      	movs	r5, #10
 80039ee:	9a07      	ldr	r2, [sp, #28]
 80039f0:	4641      	mov	r1, r8
 80039f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039f6:	3b30      	subs	r3, #48	; 0x30
 80039f8:	2b09      	cmp	r3, #9
 80039fa:	d969      	bls.n	8003ad0 <_vfiprintf_r+0x1a0>
 80039fc:	b360      	cbz	r0, 8003a58 <_vfiprintf_r+0x128>
 80039fe:	e024      	b.n	8003a4a <_vfiprintf_r+0x11a>
 8003a00:	4b50      	ldr	r3, [pc, #320]	; (8003b44 <_vfiprintf_r+0x214>)
 8003a02:	429c      	cmp	r4, r3
 8003a04:	d101      	bne.n	8003a0a <_vfiprintf_r+0xda>
 8003a06:	68b4      	ldr	r4, [r6, #8]
 8003a08:	e7a2      	b.n	8003950 <_vfiprintf_r+0x20>
 8003a0a:	4b4f      	ldr	r3, [pc, #316]	; (8003b48 <_vfiprintf_r+0x218>)
 8003a0c:	429c      	cmp	r4, r3
 8003a0e:	bf08      	it	eq
 8003a10:	68f4      	ldreq	r4, [r6, #12]
 8003a12:	e79d      	b.n	8003950 <_vfiprintf_r+0x20>
 8003a14:	4621      	mov	r1, r4
 8003a16:	4630      	mov	r0, r6
 8003a18:	f7ff fc70 	bl	80032fc <__swsetup_r>
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	d09d      	beq.n	800395c <_vfiprintf_r+0x2c>
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295
 8003a24:	b01d      	add	sp, #116	; 0x74
 8003a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a2a:	46a8      	mov	r8, r5
 8003a2c:	e7a2      	b.n	8003974 <_vfiprintf_r+0x44>
 8003a2e:	4a44      	ldr	r2, [pc, #272]	; (8003b40 <_vfiprintf_r+0x210>)
 8003a30:	4645      	mov	r5, r8
 8003a32:	1a80      	subs	r0, r0, r2
 8003a34:	fa0b f000 	lsl.w	r0, fp, r0
 8003a38:	4318      	orrs	r0, r3
 8003a3a:	9004      	str	r0, [sp, #16]
 8003a3c:	e7be      	b.n	80039bc <_vfiprintf_r+0x8c>
 8003a3e:	9a03      	ldr	r2, [sp, #12]
 8003a40:	1d11      	adds	r1, r2, #4
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	9103      	str	r1, [sp, #12]
 8003a46:	2a00      	cmp	r2, #0
 8003a48:	db01      	blt.n	8003a4e <_vfiprintf_r+0x11e>
 8003a4a:	9207      	str	r2, [sp, #28]
 8003a4c:	e004      	b.n	8003a58 <_vfiprintf_r+0x128>
 8003a4e:	4252      	negs	r2, r2
 8003a50:	f043 0302 	orr.w	r3, r3, #2
 8003a54:	9207      	str	r2, [sp, #28]
 8003a56:	9304      	str	r3, [sp, #16]
 8003a58:	f898 3000 	ldrb.w	r3, [r8]
 8003a5c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a5e:	d10e      	bne.n	8003a7e <_vfiprintf_r+0x14e>
 8003a60:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003a64:	2b2a      	cmp	r3, #42	; 0x2a
 8003a66:	d138      	bne.n	8003ada <_vfiprintf_r+0x1aa>
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	f108 0802 	add.w	r8, r8, #2
 8003a6e:	1d1a      	adds	r2, r3, #4
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	9203      	str	r2, [sp, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bfb8      	it	lt
 8003a78:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a7c:	9305      	str	r3, [sp, #20]
 8003a7e:	4d33      	ldr	r5, [pc, #204]	; (8003b4c <_vfiprintf_r+0x21c>)
 8003a80:	2203      	movs	r2, #3
 8003a82:	f898 1000 	ldrb.w	r1, [r8]
 8003a86:	4628      	mov	r0, r5
 8003a88:	f000 fa9a 	bl	8003fc0 <memchr>
 8003a8c:	b140      	cbz	r0, 8003aa0 <_vfiprintf_r+0x170>
 8003a8e:	2340      	movs	r3, #64	; 0x40
 8003a90:	1b40      	subs	r0, r0, r5
 8003a92:	fa03 f000 	lsl.w	r0, r3, r0
 8003a96:	9b04      	ldr	r3, [sp, #16]
 8003a98:	f108 0801 	add.w	r8, r8, #1
 8003a9c:	4303      	orrs	r3, r0
 8003a9e:	9304      	str	r3, [sp, #16]
 8003aa0:	f898 1000 	ldrb.w	r1, [r8]
 8003aa4:	2206      	movs	r2, #6
 8003aa6:	482a      	ldr	r0, [pc, #168]	; (8003b50 <_vfiprintf_r+0x220>)
 8003aa8:	f108 0701 	add.w	r7, r8, #1
 8003aac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ab0:	f000 fa86 	bl	8003fc0 <memchr>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	d037      	beq.n	8003b28 <_vfiprintf_r+0x1f8>
 8003ab8:	4b26      	ldr	r3, [pc, #152]	; (8003b54 <_vfiprintf_r+0x224>)
 8003aba:	bb1b      	cbnz	r3, 8003b04 <_vfiprintf_r+0x1d4>
 8003abc:	9b03      	ldr	r3, [sp, #12]
 8003abe:	3307      	adds	r3, #7
 8003ac0:	f023 0307 	bic.w	r3, r3, #7
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	9303      	str	r3, [sp, #12]
 8003ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aca:	444b      	add	r3, r9
 8003acc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ace:	e750      	b.n	8003972 <_vfiprintf_r+0x42>
 8003ad0:	fb05 3202 	mla	r2, r5, r2, r3
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	4688      	mov	r8, r1
 8003ad8:	e78a      	b.n	80039f0 <_vfiprintf_r+0xc0>
 8003ada:	2300      	movs	r3, #0
 8003adc:	250a      	movs	r5, #10
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f108 0801 	add.w	r8, r8, #1
 8003ae4:	9305      	str	r3, [sp, #20]
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003aec:	3a30      	subs	r2, #48	; 0x30
 8003aee:	2a09      	cmp	r2, #9
 8003af0:	d903      	bls.n	8003afa <_vfiprintf_r+0x1ca>
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0c3      	beq.n	8003a7e <_vfiprintf_r+0x14e>
 8003af6:	9105      	str	r1, [sp, #20]
 8003af8:	e7c1      	b.n	8003a7e <_vfiprintf_r+0x14e>
 8003afa:	fb05 2101 	mla	r1, r5, r1, r2
 8003afe:	2301      	movs	r3, #1
 8003b00:	4680      	mov	r8, r0
 8003b02:	e7f0      	b.n	8003ae6 <_vfiprintf_r+0x1b6>
 8003b04:	ab03      	add	r3, sp, #12
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	4622      	mov	r2, r4
 8003b0a:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <_vfiprintf_r+0x228>)
 8003b0c:	a904      	add	r1, sp, #16
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f3af 8000 	nop.w
 8003b14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003b18:	4681      	mov	r9, r0
 8003b1a:	d1d5      	bne.n	8003ac8 <_vfiprintf_r+0x198>
 8003b1c:	89a3      	ldrh	r3, [r4, #12]
 8003b1e:	065b      	lsls	r3, r3, #25
 8003b20:	f53f af7e 	bmi.w	8003a20 <_vfiprintf_r+0xf0>
 8003b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b26:	e77d      	b.n	8003a24 <_vfiprintf_r+0xf4>
 8003b28:	ab03      	add	r3, sp, #12
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	4622      	mov	r2, r4
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <_vfiprintf_r+0x228>)
 8003b30:	a904      	add	r1, sp, #16
 8003b32:	4630      	mov	r0, r6
 8003b34:	f000 f888 	bl	8003c48 <_printf_i>
 8003b38:	e7ec      	b.n	8003b14 <_vfiprintf_r+0x1e4>
 8003b3a:	bf00      	nop
 8003b3c:	08004ed0 	.word	0x08004ed0
 8003b40:	08004f10 	.word	0x08004f10
 8003b44:	08004ef0 	.word	0x08004ef0
 8003b48:	08004eb0 	.word	0x08004eb0
 8003b4c:	08004f16 	.word	0x08004f16
 8003b50:	08004f1a 	.word	0x08004f1a
 8003b54:	00000000 	.word	0x00000000
 8003b58:	0800390b 	.word	0x0800390b

08003b5c <_printf_common>:
 8003b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b60:	4691      	mov	r9, r2
 8003b62:	461f      	mov	r7, r3
 8003b64:	688a      	ldr	r2, [r1, #8]
 8003b66:	690b      	ldr	r3, [r1, #16]
 8003b68:	4606      	mov	r6, r0
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	bfb8      	it	lt
 8003b6e:	4613      	movlt	r3, r2
 8003b70:	f8c9 3000 	str.w	r3, [r9]
 8003b74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b78:	460c      	mov	r4, r1
 8003b7a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b7e:	b112      	cbz	r2, 8003b86 <_printf_common+0x2a>
 8003b80:	3301      	adds	r3, #1
 8003b82:	f8c9 3000 	str.w	r3, [r9]
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	0699      	lsls	r1, r3, #26
 8003b8a:	bf42      	ittt	mi
 8003b8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b90:	3302      	addmi	r3, #2
 8003b92:	f8c9 3000 	strmi.w	r3, [r9]
 8003b96:	6825      	ldr	r5, [r4, #0]
 8003b98:	f015 0506 	ands.w	r5, r5, #6
 8003b9c:	d107      	bne.n	8003bae <_printf_common+0x52>
 8003b9e:	f104 0a19 	add.w	sl, r4, #25
 8003ba2:	68e3      	ldr	r3, [r4, #12]
 8003ba4:	f8d9 2000 	ldr.w	r2, [r9]
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	42ab      	cmp	r3, r5
 8003bac:	dc29      	bgt.n	8003c02 <_printf_common+0xa6>
 8003bae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003bb2:	6822      	ldr	r2, [r4, #0]
 8003bb4:	3300      	adds	r3, #0
 8003bb6:	bf18      	it	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	0692      	lsls	r2, r2, #26
 8003bbc:	d42e      	bmi.n	8003c1c <_printf_common+0xc0>
 8003bbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bc2:	4639      	mov	r1, r7
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	47c0      	blx	r8
 8003bc8:	3001      	adds	r0, #1
 8003bca:	d021      	beq.n	8003c10 <_printf_common+0xb4>
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	68e5      	ldr	r5, [r4, #12]
 8003bd0:	f003 0306 	and.w	r3, r3, #6
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	bf18      	it	ne
 8003bd8:	2500      	movne	r5, #0
 8003bda:	f8d9 2000 	ldr.w	r2, [r9]
 8003bde:	f04f 0900 	mov.w	r9, #0
 8003be2:	bf08      	it	eq
 8003be4:	1aad      	subeq	r5, r5, r2
 8003be6:	68a3      	ldr	r3, [r4, #8]
 8003be8:	6922      	ldr	r2, [r4, #16]
 8003bea:	bf08      	it	eq
 8003bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	bfc4      	itt	gt
 8003bf4:	1a9b      	subgt	r3, r3, r2
 8003bf6:	18ed      	addgt	r5, r5, r3
 8003bf8:	341a      	adds	r4, #26
 8003bfa:	454d      	cmp	r5, r9
 8003bfc:	d11a      	bne.n	8003c34 <_printf_common+0xd8>
 8003bfe:	2000      	movs	r0, #0
 8003c00:	e008      	b.n	8003c14 <_printf_common+0xb8>
 8003c02:	2301      	movs	r3, #1
 8003c04:	4652      	mov	r2, sl
 8003c06:	4639      	mov	r1, r7
 8003c08:	4630      	mov	r0, r6
 8003c0a:	47c0      	blx	r8
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	d103      	bne.n	8003c18 <_printf_common+0xbc>
 8003c10:	f04f 30ff 	mov.w	r0, #4294967295
 8003c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c18:	3501      	adds	r5, #1
 8003c1a:	e7c2      	b.n	8003ba2 <_printf_common+0x46>
 8003c1c:	2030      	movs	r0, #48	; 0x30
 8003c1e:	18e1      	adds	r1, r4, r3
 8003c20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c2a:	4422      	add	r2, r4
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c32:	e7c4      	b.n	8003bbe <_printf_common+0x62>
 8003c34:	2301      	movs	r3, #1
 8003c36:	4622      	mov	r2, r4
 8003c38:	4639      	mov	r1, r7
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	47c0      	blx	r8
 8003c3e:	3001      	adds	r0, #1
 8003c40:	d0e6      	beq.n	8003c10 <_printf_common+0xb4>
 8003c42:	f109 0901 	add.w	r9, r9, #1
 8003c46:	e7d8      	b.n	8003bfa <_printf_common+0x9e>

08003c48 <_printf_i>:
 8003c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003c50:	460c      	mov	r4, r1
 8003c52:	7e09      	ldrb	r1, [r1, #24]
 8003c54:	b085      	sub	sp, #20
 8003c56:	296e      	cmp	r1, #110	; 0x6e
 8003c58:	4617      	mov	r7, r2
 8003c5a:	4606      	mov	r6, r0
 8003c5c:	4698      	mov	r8, r3
 8003c5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c60:	f000 80b3 	beq.w	8003dca <_printf_i+0x182>
 8003c64:	d822      	bhi.n	8003cac <_printf_i+0x64>
 8003c66:	2963      	cmp	r1, #99	; 0x63
 8003c68:	d036      	beq.n	8003cd8 <_printf_i+0x90>
 8003c6a:	d80a      	bhi.n	8003c82 <_printf_i+0x3a>
 8003c6c:	2900      	cmp	r1, #0
 8003c6e:	f000 80b9 	beq.w	8003de4 <_printf_i+0x19c>
 8003c72:	2958      	cmp	r1, #88	; 0x58
 8003c74:	f000 8083 	beq.w	8003d7e <_printf_i+0x136>
 8003c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c80:	e032      	b.n	8003ce8 <_printf_i+0xa0>
 8003c82:	2964      	cmp	r1, #100	; 0x64
 8003c84:	d001      	beq.n	8003c8a <_printf_i+0x42>
 8003c86:	2969      	cmp	r1, #105	; 0x69
 8003c88:	d1f6      	bne.n	8003c78 <_printf_i+0x30>
 8003c8a:	6820      	ldr	r0, [r4, #0]
 8003c8c:	6813      	ldr	r3, [r2, #0]
 8003c8e:	0605      	lsls	r5, r0, #24
 8003c90:	f103 0104 	add.w	r1, r3, #4
 8003c94:	d52a      	bpl.n	8003cec <_printf_i+0xa4>
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6011      	str	r1, [r2, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	da03      	bge.n	8003ca6 <_printf_i+0x5e>
 8003c9e:	222d      	movs	r2, #45	; 0x2d
 8003ca0:	425b      	negs	r3, r3
 8003ca2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ca6:	486f      	ldr	r0, [pc, #444]	; (8003e64 <_printf_i+0x21c>)
 8003ca8:	220a      	movs	r2, #10
 8003caa:	e039      	b.n	8003d20 <_printf_i+0xd8>
 8003cac:	2973      	cmp	r1, #115	; 0x73
 8003cae:	f000 809d 	beq.w	8003dec <_printf_i+0x1a4>
 8003cb2:	d808      	bhi.n	8003cc6 <_printf_i+0x7e>
 8003cb4:	296f      	cmp	r1, #111	; 0x6f
 8003cb6:	d020      	beq.n	8003cfa <_printf_i+0xb2>
 8003cb8:	2970      	cmp	r1, #112	; 0x70
 8003cba:	d1dd      	bne.n	8003c78 <_printf_i+0x30>
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	f043 0320 	orr.w	r3, r3, #32
 8003cc2:	6023      	str	r3, [r4, #0]
 8003cc4:	e003      	b.n	8003cce <_printf_i+0x86>
 8003cc6:	2975      	cmp	r1, #117	; 0x75
 8003cc8:	d017      	beq.n	8003cfa <_printf_i+0xb2>
 8003cca:	2978      	cmp	r1, #120	; 0x78
 8003ccc:	d1d4      	bne.n	8003c78 <_printf_i+0x30>
 8003cce:	2378      	movs	r3, #120	; 0x78
 8003cd0:	4865      	ldr	r0, [pc, #404]	; (8003e68 <_printf_i+0x220>)
 8003cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cd6:	e055      	b.n	8003d84 <_printf_i+0x13c>
 8003cd8:	6813      	ldr	r3, [r2, #0]
 8003cda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cde:	1d19      	adds	r1, r3, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6011      	str	r1, [r2, #0]
 8003ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e08c      	b.n	8003e06 <_printf_i+0x1be>
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cf2:	6011      	str	r1, [r2, #0]
 8003cf4:	bf18      	it	ne
 8003cf6:	b21b      	sxthne	r3, r3
 8003cf8:	e7cf      	b.n	8003c9a <_printf_i+0x52>
 8003cfa:	6813      	ldr	r3, [r2, #0]
 8003cfc:	6825      	ldr	r5, [r4, #0]
 8003cfe:	1d18      	adds	r0, r3, #4
 8003d00:	6010      	str	r0, [r2, #0]
 8003d02:	0628      	lsls	r0, r5, #24
 8003d04:	d501      	bpl.n	8003d0a <_printf_i+0xc2>
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	e002      	b.n	8003d10 <_printf_i+0xc8>
 8003d0a:	0668      	lsls	r0, r5, #25
 8003d0c:	d5fb      	bpl.n	8003d06 <_printf_i+0xbe>
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	296f      	cmp	r1, #111	; 0x6f
 8003d12:	bf14      	ite	ne
 8003d14:	220a      	movne	r2, #10
 8003d16:	2208      	moveq	r2, #8
 8003d18:	4852      	ldr	r0, [pc, #328]	; (8003e64 <_printf_i+0x21c>)
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d20:	6865      	ldr	r5, [r4, #4]
 8003d22:	2d00      	cmp	r5, #0
 8003d24:	60a5      	str	r5, [r4, #8]
 8003d26:	f2c0 8095 	blt.w	8003e54 <_printf_i+0x20c>
 8003d2a:	6821      	ldr	r1, [r4, #0]
 8003d2c:	f021 0104 	bic.w	r1, r1, #4
 8003d30:	6021      	str	r1, [r4, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d13d      	bne.n	8003db2 <_printf_i+0x16a>
 8003d36:	2d00      	cmp	r5, #0
 8003d38:	f040 808e 	bne.w	8003e58 <_printf_i+0x210>
 8003d3c:	4665      	mov	r5, ip
 8003d3e:	2a08      	cmp	r2, #8
 8003d40:	d10b      	bne.n	8003d5a <_printf_i+0x112>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	07db      	lsls	r3, r3, #31
 8003d46:	d508      	bpl.n	8003d5a <_printf_i+0x112>
 8003d48:	6923      	ldr	r3, [r4, #16]
 8003d4a:	6862      	ldr	r2, [r4, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	bfde      	ittt	le
 8003d50:	2330      	movle	r3, #48	; 0x30
 8003d52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d5a:	ebac 0305 	sub.w	r3, ip, r5
 8003d5e:	6123      	str	r3, [r4, #16]
 8003d60:	f8cd 8000 	str.w	r8, [sp]
 8003d64:	463b      	mov	r3, r7
 8003d66:	aa03      	add	r2, sp, #12
 8003d68:	4621      	mov	r1, r4
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	f7ff fef6 	bl	8003b5c <_printf_common>
 8003d70:	3001      	adds	r0, #1
 8003d72:	d14d      	bne.n	8003e10 <_printf_i+0x1c8>
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295
 8003d78:	b005      	add	sp, #20
 8003d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d7e:	4839      	ldr	r0, [pc, #228]	; (8003e64 <_printf_i+0x21c>)
 8003d80:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d84:	6813      	ldr	r3, [r2, #0]
 8003d86:	6821      	ldr	r1, [r4, #0]
 8003d88:	1d1d      	adds	r5, r3, #4
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6015      	str	r5, [r2, #0]
 8003d8e:	060a      	lsls	r2, r1, #24
 8003d90:	d50b      	bpl.n	8003daa <_printf_i+0x162>
 8003d92:	07ca      	lsls	r2, r1, #31
 8003d94:	bf44      	itt	mi
 8003d96:	f041 0120 	orrmi.w	r1, r1, #32
 8003d9a:	6021      	strmi	r1, [r4, #0]
 8003d9c:	b91b      	cbnz	r3, 8003da6 <_printf_i+0x15e>
 8003d9e:	6822      	ldr	r2, [r4, #0]
 8003da0:	f022 0220 	bic.w	r2, r2, #32
 8003da4:	6022      	str	r2, [r4, #0]
 8003da6:	2210      	movs	r2, #16
 8003da8:	e7b7      	b.n	8003d1a <_printf_i+0xd2>
 8003daa:	064d      	lsls	r5, r1, #25
 8003dac:	bf48      	it	mi
 8003dae:	b29b      	uxthmi	r3, r3
 8003db0:	e7ef      	b.n	8003d92 <_printf_i+0x14a>
 8003db2:	4665      	mov	r5, ip
 8003db4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003db8:	fb02 3311 	mls	r3, r2, r1, r3
 8003dbc:	5cc3      	ldrb	r3, [r0, r3]
 8003dbe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	2900      	cmp	r1, #0
 8003dc6:	d1f5      	bne.n	8003db4 <_printf_i+0x16c>
 8003dc8:	e7b9      	b.n	8003d3e <_printf_i+0xf6>
 8003dca:	6813      	ldr	r3, [r2, #0]
 8003dcc:	6825      	ldr	r5, [r4, #0]
 8003dce:	1d18      	adds	r0, r3, #4
 8003dd0:	6961      	ldr	r1, [r4, #20]
 8003dd2:	6010      	str	r0, [r2, #0]
 8003dd4:	0628      	lsls	r0, r5, #24
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	d501      	bpl.n	8003dde <_printf_i+0x196>
 8003dda:	6019      	str	r1, [r3, #0]
 8003ddc:	e002      	b.n	8003de4 <_printf_i+0x19c>
 8003dde:	066a      	lsls	r2, r5, #25
 8003de0:	d5fb      	bpl.n	8003dda <_printf_i+0x192>
 8003de2:	8019      	strh	r1, [r3, #0]
 8003de4:	2300      	movs	r3, #0
 8003de6:	4665      	mov	r5, ip
 8003de8:	6123      	str	r3, [r4, #16]
 8003dea:	e7b9      	b.n	8003d60 <_printf_i+0x118>
 8003dec:	6813      	ldr	r3, [r2, #0]
 8003dee:	1d19      	adds	r1, r3, #4
 8003df0:	6011      	str	r1, [r2, #0]
 8003df2:	681d      	ldr	r5, [r3, #0]
 8003df4:	6862      	ldr	r2, [r4, #4]
 8003df6:	2100      	movs	r1, #0
 8003df8:	4628      	mov	r0, r5
 8003dfa:	f000 f8e1 	bl	8003fc0 <memchr>
 8003dfe:	b108      	cbz	r0, 8003e04 <_printf_i+0x1bc>
 8003e00:	1b40      	subs	r0, r0, r5
 8003e02:	6060      	str	r0, [r4, #4]
 8003e04:	6863      	ldr	r3, [r4, #4]
 8003e06:	6123      	str	r3, [r4, #16]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e0e:	e7a7      	b.n	8003d60 <_printf_i+0x118>
 8003e10:	6923      	ldr	r3, [r4, #16]
 8003e12:	462a      	mov	r2, r5
 8003e14:	4639      	mov	r1, r7
 8003e16:	4630      	mov	r0, r6
 8003e18:	47c0      	blx	r8
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d0aa      	beq.n	8003d74 <_printf_i+0x12c>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	079b      	lsls	r3, r3, #30
 8003e22:	d413      	bmi.n	8003e4c <_printf_i+0x204>
 8003e24:	68e0      	ldr	r0, [r4, #12]
 8003e26:	9b03      	ldr	r3, [sp, #12]
 8003e28:	4298      	cmp	r0, r3
 8003e2a:	bfb8      	it	lt
 8003e2c:	4618      	movlt	r0, r3
 8003e2e:	e7a3      	b.n	8003d78 <_printf_i+0x130>
 8003e30:	2301      	movs	r3, #1
 8003e32:	464a      	mov	r2, r9
 8003e34:	4639      	mov	r1, r7
 8003e36:	4630      	mov	r0, r6
 8003e38:	47c0      	blx	r8
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	d09a      	beq.n	8003d74 <_printf_i+0x12c>
 8003e3e:	3501      	adds	r5, #1
 8003e40:	68e3      	ldr	r3, [r4, #12]
 8003e42:	9a03      	ldr	r2, [sp, #12]
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	42ab      	cmp	r3, r5
 8003e48:	dcf2      	bgt.n	8003e30 <_printf_i+0x1e8>
 8003e4a:	e7eb      	b.n	8003e24 <_printf_i+0x1dc>
 8003e4c:	2500      	movs	r5, #0
 8003e4e:	f104 0919 	add.w	r9, r4, #25
 8003e52:	e7f5      	b.n	8003e40 <_printf_i+0x1f8>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1ac      	bne.n	8003db2 <_printf_i+0x16a>
 8003e58:	7803      	ldrb	r3, [r0, #0]
 8003e5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e62:	e76c      	b.n	8003d3e <_printf_i+0xf6>
 8003e64:	08004f21 	.word	0x08004f21
 8003e68:	08004f32 	.word	0x08004f32

08003e6c <_sbrk_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	2300      	movs	r3, #0
 8003e70:	4c05      	ldr	r4, [pc, #20]	; (8003e88 <_sbrk_r+0x1c>)
 8003e72:	4605      	mov	r5, r0
 8003e74:	4608      	mov	r0, r1
 8003e76:	6023      	str	r3, [r4, #0]
 8003e78:	f7fd f85a 	bl	8000f30 <_sbrk>
 8003e7c:	1c43      	adds	r3, r0, #1
 8003e7e:	d102      	bne.n	8003e86 <_sbrk_r+0x1a>
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	b103      	cbz	r3, 8003e86 <_sbrk_r+0x1a>
 8003e84:	602b      	str	r3, [r5, #0]
 8003e86:	bd38      	pop	{r3, r4, r5, pc}
 8003e88:	200005c4 	.word	0x200005c4

08003e8c <__sread>:
 8003e8c:	b510      	push	{r4, lr}
 8003e8e:	460c      	mov	r4, r1
 8003e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e94:	f000 f8a4 	bl	8003fe0 <_read_r>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	bfab      	itete	ge
 8003e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8003ea0:	181b      	addge	r3, r3, r0
 8003ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ea6:	bfac      	ite	ge
 8003ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003eaa:	81a3      	strhlt	r3, [r4, #12]
 8003eac:	bd10      	pop	{r4, pc}

08003eae <__swrite>:
 8003eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb2:	461f      	mov	r7, r3
 8003eb4:	898b      	ldrh	r3, [r1, #12]
 8003eb6:	4605      	mov	r5, r0
 8003eb8:	05db      	lsls	r3, r3, #23
 8003eba:	460c      	mov	r4, r1
 8003ebc:	4616      	mov	r6, r2
 8003ebe:	d505      	bpl.n	8003ecc <__swrite+0x1e>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec8:	f000 f868 	bl	8003f9c <_lseek_r>
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	4632      	mov	r2, r6
 8003ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ed4:	81a3      	strh	r3, [r4, #12]
 8003ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eda:	463b      	mov	r3, r7
 8003edc:	4628      	mov	r0, r5
 8003ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee2:	f000 b817 	b.w	8003f14 <_write_r>

08003ee6 <__sseek>:
 8003ee6:	b510      	push	{r4, lr}
 8003ee8:	460c      	mov	r4, r1
 8003eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eee:	f000 f855 	bl	8003f9c <_lseek_r>
 8003ef2:	1c43      	adds	r3, r0, #1
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	bf15      	itete	ne
 8003ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f02:	81a3      	strheq	r3, [r4, #12]
 8003f04:	bf18      	it	ne
 8003f06:	81a3      	strhne	r3, [r4, #12]
 8003f08:	bd10      	pop	{r4, pc}

08003f0a <__sclose>:
 8003f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f0e:	f000 b813 	b.w	8003f38 <_close_r>
	...

08003f14 <_write_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4605      	mov	r5, r0
 8003f18:	4608      	mov	r0, r1
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	4c05      	ldr	r4, [pc, #20]	; (8003f34 <_write_r+0x20>)
 8003f20:	6022      	str	r2, [r4, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f7fc ffb7 	bl	8000e96 <_write>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d102      	bne.n	8003f32 <_write_r+0x1e>
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	b103      	cbz	r3, 8003f32 <_write_r+0x1e>
 8003f30:	602b      	str	r3, [r5, #0]
 8003f32:	bd38      	pop	{r3, r4, r5, pc}
 8003f34:	200005c4 	.word	0x200005c4

08003f38 <_close_r>:
 8003f38:	b538      	push	{r3, r4, r5, lr}
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	4c05      	ldr	r4, [pc, #20]	; (8003f54 <_close_r+0x1c>)
 8003f3e:	4605      	mov	r5, r0
 8003f40:	4608      	mov	r0, r1
 8003f42:	6023      	str	r3, [r4, #0]
 8003f44:	f7fc ffc3 	bl	8000ece <_close>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d102      	bne.n	8003f52 <_close_r+0x1a>
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	b103      	cbz	r3, 8003f52 <_close_r+0x1a>
 8003f50:	602b      	str	r3, [r5, #0]
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
 8003f54:	200005c4 	.word	0x200005c4

08003f58 <_fstat_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	4c06      	ldr	r4, [pc, #24]	; (8003f78 <_fstat_r+0x20>)
 8003f5e:	4605      	mov	r5, r0
 8003f60:	4608      	mov	r0, r1
 8003f62:	4611      	mov	r1, r2
 8003f64:	6023      	str	r3, [r4, #0]
 8003f66:	f7fc ffbd 	bl	8000ee4 <_fstat>
 8003f6a:	1c43      	adds	r3, r0, #1
 8003f6c:	d102      	bne.n	8003f74 <_fstat_r+0x1c>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	b103      	cbz	r3, 8003f74 <_fstat_r+0x1c>
 8003f72:	602b      	str	r3, [r5, #0]
 8003f74:	bd38      	pop	{r3, r4, r5, pc}
 8003f76:	bf00      	nop
 8003f78:	200005c4 	.word	0x200005c4

08003f7c <_isatty_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	2300      	movs	r3, #0
 8003f80:	4c05      	ldr	r4, [pc, #20]	; (8003f98 <_isatty_r+0x1c>)
 8003f82:	4605      	mov	r5, r0
 8003f84:	4608      	mov	r0, r1
 8003f86:	6023      	str	r3, [r4, #0]
 8003f88:	f7fc ffbb 	bl	8000f02 <_isatty>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d102      	bne.n	8003f96 <_isatty_r+0x1a>
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	b103      	cbz	r3, 8003f96 <_isatty_r+0x1a>
 8003f94:	602b      	str	r3, [r5, #0]
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	200005c4 	.word	0x200005c4

08003f9c <_lseek_r>:
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	4605      	mov	r5, r0
 8003fa0:	4608      	mov	r0, r1
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4c05      	ldr	r4, [pc, #20]	; (8003fbc <_lseek_r+0x20>)
 8003fa8:	6022      	str	r2, [r4, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f7fc ffb3 	bl	8000f16 <_lseek>
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	d102      	bne.n	8003fba <_lseek_r+0x1e>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	b103      	cbz	r3, 8003fba <_lseek_r+0x1e>
 8003fb8:	602b      	str	r3, [r5, #0]
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	200005c4 	.word	0x200005c4

08003fc0 <memchr>:
 8003fc0:	b510      	push	{r4, lr}
 8003fc2:	b2c9      	uxtb	r1, r1
 8003fc4:	4402      	add	r2, r0
 8003fc6:	4290      	cmp	r0, r2
 8003fc8:	4603      	mov	r3, r0
 8003fca:	d101      	bne.n	8003fd0 <memchr+0x10>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e003      	b.n	8003fd8 <memchr+0x18>
 8003fd0:	781c      	ldrb	r4, [r3, #0]
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	428c      	cmp	r4, r1
 8003fd6:	d1f6      	bne.n	8003fc6 <memchr+0x6>
 8003fd8:	4618      	mov	r0, r3
 8003fda:	bd10      	pop	{r4, pc}

08003fdc <__malloc_lock>:
 8003fdc:	4770      	bx	lr

08003fde <__malloc_unlock>:
 8003fde:	4770      	bx	lr

08003fe0 <_read_r>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	4605      	mov	r5, r0
 8003fe4:	4608      	mov	r0, r1
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	2200      	movs	r2, #0
 8003fea:	4c05      	ldr	r4, [pc, #20]	; (8004000 <_read_r+0x20>)
 8003fec:	6022      	str	r2, [r4, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f7fc ff34 	bl	8000e5c <_read>
 8003ff4:	1c43      	adds	r3, r0, #1
 8003ff6:	d102      	bne.n	8003ffe <_read_r+0x1e>
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	b103      	cbz	r3, 8003ffe <_read_r+0x1e>
 8003ffc:	602b      	str	r3, [r5, #0]
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
 8004000:	200005c4 	.word	0x200005c4

08004004 <_init>:
 8004004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004006:	bf00      	nop
 8004008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400a:	bc08      	pop	{r3}
 800400c:	469e      	mov	lr, r3
 800400e:	4770      	bx	lr

08004010 <_fini>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	bf00      	nop
 8004014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004016:	bc08      	pop	{r3}
 8004018:	469e      	mov	lr, r3
 800401a:	4770      	bx	lr
