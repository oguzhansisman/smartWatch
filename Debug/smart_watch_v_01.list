
smart_watch_v_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005350  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec0  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800631c  0800631c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800631c  0800631c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800631c  0800631c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800631c  0800631c  0001631c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006320  08006320  00016320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  20000078  0800639c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  0800639c  00020740  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f956  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020d2  00000000  00000000  0002f9f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e30  00000000  00000000  00031ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d48  00000000  00000000  00032900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000185bd  00000000  00000000  00033648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b931  00000000  00000000  0004bc05  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bb3e  00000000  00000000  00057536  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3074  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e6c  00000000  00000000  000e30f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08005444 	.word	0x08005444

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08005444 	.word	0x08005444

0800014c <D2B>:
#include "ds3231.h"
#include "ssd1306.h"
#include "stdio.h"

static uint8_t D2B(uint8_t decimal)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  return (((decimal / 10) << 4) | (decimal % 10));
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	4a0d      	ldr	r2, [pc, #52]	; (8000190 <D2B+0x44>)
 800015a:	fba2 2303 	umull	r2, r3, r2, r3
 800015e:	08db      	lsrs	r3, r3, #3
 8000160:	b2db      	uxtb	r3, r3
 8000162:	011b      	lsls	r3, r3, #4
 8000164:	b258      	sxtb	r0, r3
 8000166:	79fa      	ldrb	r2, [r7, #7]
 8000168:	4b09      	ldr	r3, [pc, #36]	; (8000190 <D2B+0x44>)
 800016a:	fba3 1302 	umull	r1, r3, r3, r2
 800016e:	08d9      	lsrs	r1, r3, #3
 8000170:	460b      	mov	r3, r1
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	440b      	add	r3, r1
 8000176:	005b      	lsls	r3, r3, #1
 8000178:	1ad3      	subs	r3, r2, r3
 800017a:	b2db      	uxtb	r3, r3
 800017c:	b25b      	sxtb	r3, r3
 800017e:	4303      	orrs	r3, r0
 8000180:	b25b      	sxtb	r3, r3
 8000182:	b2db      	uxtb	r3, r3
}
 8000184:	4618      	mov	r0, r3
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	cccccccd 	.word	0xcccccccd

08000194 <B2D>:

static uint8_t B2D(uint8_t bcd)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	091b      	lsrs	r3, r3, #4
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	461a      	mov	r2, r3
 80001a6:	0092      	lsls	r2, r2, #2
 80001a8:	4413      	add	r3, r2
 80001aa:	005b      	lsls	r3, r3, #1
 80001ac:	b2da      	uxtb	r2, r3
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	f003 030f 	and.w	r3, r3, #15
 80001b4:	b2db      	uxtb	r3, r3
 80001b6:	4413      	add	r3, r2
 80001b8:	b2db      	uxtb	r3, r3
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	370c      	adds	r7, #12
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr

080001c4 <ds3231_zaman_oku>:


void ds3231_zaman_oku(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, zaman_t *zaman)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b088      	sub	sp, #32
 80001c8:	af02      	add	r7, sp, #8
 80001ca:	60f8      	str	r0, [r7, #12]
 80001cc:	460b      	mov	r3, r1
 80001ce:	607a      	str	r2, [r7, #4]
 80001d0:	817b      	strh	r3, [r7, #10]
	uint8_t temp[8];
	temp[0] = DS3231_SECONDS_REG;
 80001d2:	2300      	movs	r3, #0
 80001d4:	743b      	strb	r3, [r7, #16]

	HAL_I2C_Master_Transmit(hi2c, DevAddress, &temp[0], 1, 500);
 80001d6:	f107 0210 	add.w	r2, r7, #16
 80001da:	8979      	ldrh	r1, [r7, #10]
 80001dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001e0:	9300      	str	r3, [sp, #0]
 80001e2:	2301      	movs	r3, #1
 80001e4:	68f8      	ldr	r0, [r7, #12]
 80001e6:	f002 fca3 	bl	8002b30 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, DevAddress, &temp[1], 7, 500);
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	1c5a      	adds	r2, r3, #1
 80001f0:	8979      	ldrh	r1, [r7, #10]
 80001f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001f6:	9300      	str	r3, [sp, #0]
 80001f8:	2307      	movs	r3, #7
 80001fa:	68f8      	ldr	r0, [r7, #12]
 80001fc:	f002 fd96 	bl	8002d2c <HAL_I2C_Master_Receive>

	zaman->saniye = B2D(temp[1]);
 8000200:	7c7b      	ldrb	r3, [r7, #17]
 8000202:	4618      	mov	r0, r3
 8000204:	f7ff ffc6 	bl	8000194 <B2D>
 8000208:	4603      	mov	r3, r0
 800020a:	461a      	mov	r2, r3
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	719a      	strb	r2, [r3, #6]
	zaman->dakika = B2D(temp[2]);
 8000210:	7cbb      	ldrb	r3, [r7, #18]
 8000212:	4618      	mov	r0, r3
 8000214:	f7ff ffbe 	bl	8000194 <B2D>
 8000218:	4603      	mov	r3, r0
 800021a:	461a      	mov	r2, r3
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	715a      	strb	r2, [r3, #5]
	zaman->saat   = B2D(temp[3]);
 8000220:	7cfb      	ldrb	r3, [r7, #19]
 8000222:	4618      	mov	r0, r3
 8000224:	f7ff ffb6 	bl	8000194 <B2D>
 8000228:	4603      	mov	r3, r0
 800022a:	461a      	mov	r2, r3
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	711a      	strb	r2, [r3, #4]
	zaman->gun    = B2D(temp[4]);
 8000230:	7d3b      	ldrb	r3, [r7, #20]
 8000232:	4618      	mov	r0, r3
 8000234:	f7ff ffae 	bl	8000194 <B2D>
 8000238:	4603      	mov	r3, r0
 800023a:	461a      	mov	r2, r3
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	709a      	strb	r2, [r3, #2]
	zaman->ay_gun = B2D(temp[5]);
 8000240:	7d7b      	ldrb	r3, [r7, #21]
 8000242:	4618      	mov	r0, r3
 8000244:	f7ff ffa6 	bl	8000194 <B2D>
 8000248:	4603      	mov	r3, r0
 800024a:	461a      	mov	r2, r3
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	70da      	strb	r2, [r3, #3]
	zaman->ay     = B2D(temp[6]);
 8000250:	7dbb      	ldrb	r3, [r7, #22]
 8000252:	4618      	mov	r0, r3
 8000254:	f7ff ff9e 	bl	8000194 <B2D>
 8000258:	4603      	mov	r3, r0
 800025a:	461a      	mov	r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	705a      	strb	r2, [r3, #1]
	zaman->yil    = B2D(temp[7]);
 8000260:	7dfb      	ldrb	r3, [r7, #23]
 8000262:	4618      	mov	r0, r3
 8000264:	f7ff ff96 	bl	8000194 <B2D>
 8000268:	4603      	mov	r3, r0
 800026a:	461a      	mov	r2, r3
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	701a      	strb	r2, [r3, #0]
}
 8000270:	bf00      	nop
 8000272:	3718      	adds	r7, #24
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <ds3231_zaman_ayarla>:

void ds3231_zaman_ayarla(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, saat_ayarlama_t zaman)
{
 8000278:	b082      	sub	sp, #8
 800027a:	b580      	push	{r7, lr}
 800027c:	b086      	sub	sp, #24
 800027e:	af02      	add	r7, sp, #8
 8000280:	6078      	str	r0, [r7, #4]
 8000282:	f107 0018 	add.w	r0, r7, #24
 8000286:	e880 000c 	stmia.w	r0, {r2, r3}
 800028a:	460b      	mov	r3, r1
 800028c:	807b      	strh	r3, [r7, #2]
	uint8_t temp[8];
	temp[0] = 0x00;
 800028e:	2300      	movs	r3, #0
 8000290:	723b      	strb	r3, [r7, #8]
	temp[1] = D2B(zaman.saniye);
 8000292:	7ebb      	ldrb	r3, [r7, #26]
 8000294:	4618      	mov	r0, r3
 8000296:	f7ff ff59 	bl	800014c <D2B>
 800029a:	4603      	mov	r3, r0
 800029c:	727b      	strb	r3, [r7, #9]
	temp[2] = D2B(zaman.dakika);
 800029e:	7e7b      	ldrb	r3, [r7, #25]
 80002a0:	4618      	mov	r0, r3
 80002a2:	f7ff ff53 	bl	800014c <D2B>
 80002a6:	4603      	mov	r3, r0
 80002a8:	72bb      	strb	r3, [r7, #10]
	temp[3] = D2B(zaman.saat);
 80002aa:	7e3b      	ldrb	r3, [r7, #24]
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff4d 	bl	800014c <D2B>
 80002b2:	4603      	mov	r3, r0
 80002b4:	72fb      	strb	r3, [r7, #11]
	//TODO: tarih ayarlanmasi eklenecek
	temp[4] = PAZARTESI;
 80002b6:	2301      	movs	r3, #1
 80002b8:	733b      	strb	r3, [r7, #12]
	temp[5] = 19;
 80002ba:	2313      	movs	r3, #19
 80002bc:	737b      	strb	r3, [r7, #13]
	temp[6] = 4;
 80002be:	2304      	movs	r3, #4
 80002c0:	73bb      	strb	r3, [r7, #14]
	temp[7] = 20;
 80002c2:	2314      	movs	r3, #20
 80002c4:	73fb      	strb	r3, [r7, #15]

	while( ( HAL_I2C_GetState(hi2c) == HAL_I2C_STATE_BUSY ) || ( HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY ) );
 80002c6:	bf00      	nop
 80002c8:	6878      	ldr	r0, [r7, #4]
 80002ca:	f003 f883 	bl	80033d4 <HAL_I2C_GetState>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b24      	cmp	r3, #36	; 0x24
 80002d2:	d0f9      	beq.n	80002c8 <ds3231_zaman_ayarla+0x50>
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f003 f87d 	bl	80033d4 <HAL_I2C_GetState>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b20      	cmp	r3, #32
 80002de:	d1f3      	bne.n	80002c8 <ds3231_zaman_ayarla+0x50>
	HAL_I2C_Master_Transmit(hi2c, DevAddress, temp, 8, 500);
 80002e0:	f107 0208 	add.w	r2, r7, #8
 80002e4:	8879      	ldrh	r1, [r7, #2]
 80002e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2308      	movs	r3, #8
 80002ee:	6878      	ldr	r0, [r7, #4]
 80002f0:	f002 fc1e 	bl	8002b30 <HAL_I2C_Master_Transmit>
//	HAL_I2C_Master_Transmit_DMA(hi2c, DevAddress, temp, 8);

}
 80002f4:	bf00      	nop
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002fe:	b002      	add	sp, #8
 8000300:	4770      	bx	lr
	...

08000304 <menu_ac>:




void menu_ac(uint8_t menu, uint8_t secili)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	460a      	mov	r2, r1
 800030e:	71fb      	strb	r3, [r7, #7]
 8000310:	4613      	mov	r3, r2
 8000312:	71bb      	strb	r3, [r7, #6]
	switch(menu)
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	2b06      	cmp	r3, #6
 8000318:	d82d      	bhi.n	8000376 <menu_ac+0x72>
 800031a:	a201      	add	r2, pc, #4	; (adr r2, 8000320 <menu_ac+0x1c>)
 800031c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000320:	0800033d 	.word	0x0800033d
 8000324:	08000347 	.word	0x08000347
 8000328:	08000351 	.word	0x08000351
 800032c:	0800035b 	.word	0x0800035b
 8000330:	08000365 	.word	0x08000365
 8000334:	0800036b 	.word	0x0800036b
 8000338:	08000371 	.word	0x08000371
	{
		case ANA_SAYFA:
			anasayfa_ac(secili);
 800033c:	79bb      	ldrb	r3, [r7, #6]
 800033e:	4618      	mov	r0, r3
 8000340:	f000 f96c 	bl	800061c <anasayfa_ac>
			break;
 8000344:	e018      	b.n	8000378 <menu_ac+0x74>
		case NABIZ:
			nabiz_menu_ac(secili);
 8000346:	79bb      	ldrb	r3, [r7, #6]
 8000348:	4618      	mov	r0, r3
 800034a:	f000 f93f 	bl	80005cc <nabiz_menu_ac>
			break;
 800034e:	e013      	b.n	8000378 <menu_ac+0x74>
		case ADIM:
			adim_menu_ac(secili);
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f912 	bl	800057c <adim_menu_ac>
			break;
 8000358:	e00e      	b.n	8000378 <menu_ac+0x74>
		case TELEFON:
			telefon_menu_ac(secili);
 800035a:	79bb      	ldrb	r3, [r7, #6]
 800035c:	4618      	mov	r0, r3
 800035e:	f000 f881 	bl	8000464 <telefon_menu_ac>
			break;
 8000362:	e009      	b.n	8000378 <menu_ac+0x74>
		case SICAKLIK:
			sicaklik_menu_ac();
 8000364:	f000 f85a 	bl	800041c <sicaklik_menu_ac>
			break;
 8000368:	e006      	b.n	8000378 <menu_ac+0x74>
		case SAAT:
			saat_goster();
 800036a:	f000 fa57 	bl	800081c <saat_goster>
			break;
 800036e:	e003      	b.n	8000378 <menu_ac+0x74>
		case SAAT_AYAR:
			saat_ayar_goster();
 8000370:	f000 f806 	bl	8000380 <saat_ayar_goster>
			break;
 8000374:	e000      	b.n	8000378 <menu_ac+0x74>
		default:
			break;
 8000376:	bf00      	nop
	}
}
 8000378:	bf00      	nop
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <saat_ayar_goster>:

void saat_ayar_goster()
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	sprintf(zaman_ayarlama.c_saat  , "%02d", zaman_ayarlama.saat  );
 8000384:	4b1e      	ldr	r3, [pc, #120]	; (8000400 <saat_ayar_goster+0x80>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	461a      	mov	r2, r3
 800038a:	491e      	ldr	r1, [pc, #120]	; (8000404 <saat_ayar_goster+0x84>)
 800038c:	481e      	ldr	r0, [pc, #120]	; (8000408 <saat_ayar_goster+0x88>)
 800038e:	f004 fc6b 	bl	8004c68 <siprintf>
	sprintf(zaman_ayarlama.c_dakika, "%02d", zaman_ayarlama.dakika);
 8000392:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <saat_ayar_goster+0x80>)
 8000394:	785b      	ldrb	r3, [r3, #1]
 8000396:	461a      	mov	r2, r3
 8000398:	491a      	ldr	r1, [pc, #104]	; (8000404 <saat_ayar_goster+0x84>)
 800039a:	481c      	ldr	r0, [pc, #112]	; (800040c <saat_ayar_goster+0x8c>)
 800039c:	f004 fc64 	bl	8004c68 <siprintf>
	sprintf(zaman_ayarlama.c_saniye, "%02d", zaman_ayarlama.saniye);
 80003a0:	4b17      	ldr	r3, [pc, #92]	; (8000400 <saat_ayar_goster+0x80>)
 80003a2:	789b      	ldrb	r3, [r3, #2]
 80003a4:	461a      	mov	r2, r3
 80003a6:	4917      	ldr	r1, [pc, #92]	; (8000404 <saat_ayar_goster+0x84>)
 80003a8:	4819      	ldr	r0, [pc, #100]	; (8000410 <saat_ayar_goster+0x90>)
 80003aa:	f004 fc5d 	bl	8004c68 <siprintf>

	ssd1306_Fill(Black);
 80003ae:	2000      	movs	r0, #0
 80003b0:	f000 fe84 	bl	80010bc <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 80003b4:	2100      	movs	r1, #0
 80003b6:	2002      	movs	r0, #2
 80003b8:	f000 ffd6 	bl	8001368 <ssd1306_SetCursor>
	ssd1306_WriteString(zaman_ayarlama.c_saat, Font_11x18, White);
 80003bc:	4a15      	ldr	r2, [pc, #84]	; (8000414 <saat_ayar_goster+0x94>)
 80003be:	2301      	movs	r3, #1
 80003c0:	ca06      	ldmia	r2, {r1, r2}
 80003c2:	4811      	ldr	r0, [pc, #68]	; (8000408 <saat_ayar_goster+0x88>)
 80003c4:	f000 ffaa 	bl	800131c <ssd1306_WriteString>
	ssd1306_WriteString(".", Font_11x18, White);
 80003c8:	4a12      	ldr	r2, [pc, #72]	; (8000414 <saat_ayar_goster+0x94>)
 80003ca:	2301      	movs	r3, #1
 80003cc:	ca06      	ldmia	r2, {r1, r2}
 80003ce:	4812      	ldr	r0, [pc, #72]	; (8000418 <saat_ayar_goster+0x98>)
 80003d0:	f000 ffa4 	bl	800131c <ssd1306_WriteString>
	ssd1306_WriteString(zaman_ayarlama.c_dakika, Font_11x18, White);
 80003d4:	4a0f      	ldr	r2, [pc, #60]	; (8000414 <saat_ayar_goster+0x94>)
 80003d6:	2301      	movs	r3, #1
 80003d8:	ca06      	ldmia	r2, {r1, r2}
 80003da:	480c      	ldr	r0, [pc, #48]	; (800040c <saat_ayar_goster+0x8c>)
 80003dc:	f000 ff9e 	bl	800131c <ssd1306_WriteString>
	ssd1306_WriteString(".", Font_11x18, White);
 80003e0:	4a0c      	ldr	r2, [pc, #48]	; (8000414 <saat_ayar_goster+0x94>)
 80003e2:	2301      	movs	r3, #1
 80003e4:	ca06      	ldmia	r2, {r1, r2}
 80003e6:	480c      	ldr	r0, [pc, #48]	; (8000418 <saat_ayar_goster+0x98>)
 80003e8:	f000 ff98 	bl	800131c <ssd1306_WriteString>
	ssd1306_WriteString(zaman_ayarlama.c_saniye, Font_11x18, White);
 80003ec:	4a09      	ldr	r2, [pc, #36]	; (8000414 <saat_ayar_goster+0x94>)
 80003ee:	2301      	movs	r3, #1
 80003f0:	ca06      	ldmia	r2, {r1, r2}
 80003f2:	4807      	ldr	r0, [pc, #28]	; (8000410 <saat_ayar_goster+0x90>)
 80003f4:	f000 ff92 	bl	800131c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80003f8:	f000 fe82 	bl	8001100 <ssd1306_UpdateScreen>
}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000530 	.word	0x20000530
 8000404:	0800545c 	.word	0x0800545c
 8000408:	20000533 	.word	0x20000533
 800040c:	20000547 	.word	0x20000547
 8000410:	2000055b 	.word	0x2000055b
 8000414:	20000000 	.word	0x20000000
 8000418:	08005464 	.word	0x08005464

0800041c <sicaklik_menu_ac>:

void sicaklik_menu_ac()
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000420:	2000      	movs	r0, #0
 8000422:	f000 fe4b 	bl	80010bc <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 8000426:	2100      	movs	r1, #0
 8000428:	2002      	movs	r0, #2
 800042a:	f000 ff9d 	bl	8001368 <ssd1306_SetCursor>
	ssd1306_WriteString("Sicaklik: 30", Font_11x18, White);
 800042e:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <sicaklik_menu_ac+0x3c>)
 8000430:	2301      	movs	r3, #1
 8000432:	ca06      	ldmia	r2, {r1, r2}
 8000434:	4809      	ldr	r0, [pc, #36]	; (800045c <sicaklik_menu_ac+0x40>)
 8000436:	f000 ff71 	bl	800131c <ssd1306_WriteString>
	ssd1306_SetCursor(2, 19);
 800043a:	2113      	movs	r1, #19
 800043c:	2002      	movs	r0, #2
 800043e:	f000 ff93 	bl	8001368 <ssd1306_SetCursor>
	ssd1306_WriteString("->Geri don", Font_11x18, White);
 8000442:	4a05      	ldr	r2, [pc, #20]	; (8000458 <sicaklik_menu_ac+0x3c>)
 8000444:	2301      	movs	r3, #1
 8000446:	ca06      	ldmia	r2, {r1, r2}
 8000448:	4805      	ldr	r0, [pc, #20]	; (8000460 <sicaklik_menu_ac+0x44>)
 800044a:	f000 ff67 	bl	800131c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800044e:	f000 fe57 	bl	8001100 <ssd1306_UpdateScreen>
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000000 	.word	0x20000000
 800045c:	08005468 	.word	0x08005468
 8000460:	08005478 	.word	0x08005478

08000464 <telefon_menu_ac>:

void telefon_menu_ac(uint8_t secili)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
	switch(secili)
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d028      	beq.n	80004c6 <telefon_menu_ac+0x62>
 8000474:	2b03      	cmp	r3, #3
 8000476:	d04a      	beq.n	800050e <telefon_menu_ac+0xaa>
 8000478:	2b01      	cmp	r3, #1
 800047a:	d000      	beq.n	800047e <telefon_menu_ac+0x1a>
		ssd1306_WriteString("->Geri Don", Font_11x18, White);
		ssd1306_UpdateScreen();
		break;
	}

}
 800047c:	e06b      	b.n	8000556 <telefon_menu_ac+0xf2>
		ssd1306_Fill(Black);
 800047e:	2000      	movs	r0, #0
 8000480:	f000 fe1c 	bl	80010bc <ssd1306_Fill>
		ssd1306_SetCursor(2, 0);
 8000484:	2100      	movs	r1, #0
 8000486:	2002      	movs	r0, #2
 8000488:	f000 ff6e 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("->Tlf Bagla", Font_11x18, White);
 800048c:	4a34      	ldr	r2, [pc, #208]	; (8000560 <telefon_menu_ac+0xfc>)
 800048e:	2301      	movs	r3, #1
 8000490:	ca06      	ldmia	r2, {r1, r2}
 8000492:	4834      	ldr	r0, [pc, #208]	; (8000564 <telefon_menu_ac+0x100>)
 8000494:	f000 ff42 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 8000498:	2113      	movs	r1, #19
 800049a:	2002      	movs	r0, #2
 800049c:	f000 ff64 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Tlf Bag.Kes", Font_11x18, White);
 80004a0:	4a2f      	ldr	r2, [pc, #188]	; (8000560 <telefon_menu_ac+0xfc>)
 80004a2:	2301      	movs	r3, #1
 80004a4:	ca06      	ldmia	r2, {r1, r2}
 80004a6:	4830      	ldr	r0, [pc, #192]	; (8000568 <telefon_menu_ac+0x104>)
 80004a8:	f000 ff38 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 80004ac:	2126      	movs	r1, #38	; 0x26
 80004ae:	2002      	movs	r0, #2
 80004b0:	f000 ff5a 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Geri Don", Font_11x18, White);
 80004b4:	4a2a      	ldr	r2, [pc, #168]	; (8000560 <telefon_menu_ac+0xfc>)
 80004b6:	2301      	movs	r3, #1
 80004b8:	ca06      	ldmia	r2, {r1, r2}
 80004ba:	482c      	ldr	r0, [pc, #176]	; (800056c <telefon_menu_ac+0x108>)
 80004bc:	f000 ff2e 	bl	800131c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80004c0:	f000 fe1e 	bl	8001100 <ssd1306_UpdateScreen>
		break;
 80004c4:	e047      	b.n	8000556 <telefon_menu_ac+0xf2>
		ssd1306_Fill(Black);
 80004c6:	2000      	movs	r0, #0
 80004c8:	f000 fdf8 	bl	80010bc <ssd1306_Fill>
		ssd1306_SetCursor(2, 0);
 80004cc:	2100      	movs	r1, #0
 80004ce:	2002      	movs	r0, #2
 80004d0:	f000 ff4a 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Tlf Bagla", Font_11x18, White);
 80004d4:	4a22      	ldr	r2, [pc, #136]	; (8000560 <telefon_menu_ac+0xfc>)
 80004d6:	2301      	movs	r3, #1
 80004d8:	ca06      	ldmia	r2, {r1, r2}
 80004da:	4825      	ldr	r0, [pc, #148]	; (8000570 <telefon_menu_ac+0x10c>)
 80004dc:	f000 ff1e 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 80004e0:	2113      	movs	r1, #19
 80004e2:	2002      	movs	r0, #2
 80004e4:	f000 ff40 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("->Tlf Bag.Kes", Font_11x18, White);
 80004e8:	4a1d      	ldr	r2, [pc, #116]	; (8000560 <telefon_menu_ac+0xfc>)
 80004ea:	2301      	movs	r3, #1
 80004ec:	ca06      	ldmia	r2, {r1, r2}
 80004ee:	4821      	ldr	r0, [pc, #132]	; (8000574 <telefon_menu_ac+0x110>)
 80004f0:	f000 ff14 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 80004f4:	2126      	movs	r1, #38	; 0x26
 80004f6:	2002      	movs	r0, #2
 80004f8:	f000 ff36 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Geri Don", Font_11x18, White);
 80004fc:	4a18      	ldr	r2, [pc, #96]	; (8000560 <telefon_menu_ac+0xfc>)
 80004fe:	2301      	movs	r3, #1
 8000500:	ca06      	ldmia	r2, {r1, r2}
 8000502:	481a      	ldr	r0, [pc, #104]	; (800056c <telefon_menu_ac+0x108>)
 8000504:	f000 ff0a 	bl	800131c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000508:	f000 fdfa 	bl	8001100 <ssd1306_UpdateScreen>
		break;
 800050c:	e023      	b.n	8000556 <telefon_menu_ac+0xf2>
		ssd1306_Fill(Black);
 800050e:	2000      	movs	r0, #0
 8000510:	f000 fdd4 	bl	80010bc <ssd1306_Fill>
		ssd1306_SetCursor(2, 0);
 8000514:	2100      	movs	r1, #0
 8000516:	2002      	movs	r0, #2
 8000518:	f000 ff26 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Tlf Bagla", Font_11x18, White);
 800051c:	4a10      	ldr	r2, [pc, #64]	; (8000560 <telefon_menu_ac+0xfc>)
 800051e:	2301      	movs	r3, #1
 8000520:	ca06      	ldmia	r2, {r1, r2}
 8000522:	4813      	ldr	r0, [pc, #76]	; (8000570 <telefon_menu_ac+0x10c>)
 8000524:	f000 fefa 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 8000528:	2113      	movs	r1, #19
 800052a:	2002      	movs	r0, #2
 800052c:	f000 ff1c 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Tlf Bag.Kes", Font_11x18, White);
 8000530:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <telefon_menu_ac+0xfc>)
 8000532:	2301      	movs	r3, #1
 8000534:	ca06      	ldmia	r2, {r1, r2}
 8000536:	480c      	ldr	r0, [pc, #48]	; (8000568 <telefon_menu_ac+0x104>)
 8000538:	f000 fef0 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 800053c:	2126      	movs	r1, #38	; 0x26
 800053e:	2002      	movs	r0, #2
 8000540:	f000 ff12 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("->Geri Don", Font_11x18, White);
 8000544:	4a06      	ldr	r2, [pc, #24]	; (8000560 <telefon_menu_ac+0xfc>)
 8000546:	2301      	movs	r3, #1
 8000548:	ca06      	ldmia	r2, {r1, r2}
 800054a:	480b      	ldr	r0, [pc, #44]	; (8000578 <telefon_menu_ac+0x114>)
 800054c:	f000 fee6 	bl	800131c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000550:	f000 fdd6 	bl	8001100 <ssd1306_UpdateScreen>
		break;
 8000554:	bf00      	nop
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000000 	.word	0x20000000
 8000564:	08005484 	.word	0x08005484
 8000568:	08005490 	.word	0x08005490
 800056c:	0800549c 	.word	0x0800549c
 8000570:	080054a8 	.word	0x080054a8
 8000574:	080054b4 	.word	0x080054b4
 8000578:	080054c4 	.word	0x080054c4

0800057c <adim_menu_ac>:

void adim_menu_ac(uint8_t secili)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	ssd1306_Fill(Black);
 8000586:	2000      	movs	r0, #0
 8000588:	f000 fd98 	bl	80010bc <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 800058c:	2100      	movs	r1, #0
 800058e:	2002      	movs	r0, #2
 8000590:	f000 feea 	bl	8001368 <ssd1306_SetCursor>
	ssd1306_WriteString("Adim Sayisi: 90", Font_11x18, White);
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <adim_menu_ac+0x44>)
 8000596:	2301      	movs	r3, #1
 8000598:	ca06      	ldmia	r2, {r1, r2}
 800059a:	480a      	ldr	r0, [pc, #40]	; (80005c4 <adim_menu_ac+0x48>)
 800059c:	f000 febe 	bl	800131c <ssd1306_WriteString>
	ssd1306_SetCursor(2, 19);
 80005a0:	2113      	movs	r1, #19
 80005a2:	2002      	movs	r0, #2
 80005a4:	f000 fee0 	bl	8001368 <ssd1306_SetCursor>
	ssd1306_WriteString("->Geri don", Font_11x18, White);
 80005a8:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <adim_menu_ac+0x44>)
 80005aa:	2301      	movs	r3, #1
 80005ac:	ca06      	ldmia	r2, {r1, r2}
 80005ae:	4806      	ldr	r0, [pc, #24]	; (80005c8 <adim_menu_ac+0x4c>)
 80005b0:	f000 feb4 	bl	800131c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80005b4:	f000 fda4 	bl	8001100 <ssd1306_UpdateScreen>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000000 	.word	0x20000000
 80005c4:	080054d0 	.word	0x080054d0
 80005c8:	08005478 	.word	0x08005478

080005cc <nabiz_menu_ac>:

void nabiz_menu_ac(uint8_t secili)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	ssd1306_Fill(Black);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 fd70 	bl	80010bc <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 80005dc:	2100      	movs	r1, #0
 80005de:	2002      	movs	r0, #2
 80005e0:	f000 fec2 	bl	8001368 <ssd1306_SetCursor>
	ssd1306_WriteString("Nabiz : 90", Font_11x18, White);
 80005e4:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <nabiz_menu_ac+0x44>)
 80005e6:	2301      	movs	r3, #1
 80005e8:	ca06      	ldmia	r2, {r1, r2}
 80005ea:	480a      	ldr	r0, [pc, #40]	; (8000614 <nabiz_menu_ac+0x48>)
 80005ec:	f000 fe96 	bl	800131c <ssd1306_WriteString>
	ssd1306_SetCursor(2, 19);
 80005f0:	2113      	movs	r1, #19
 80005f2:	2002      	movs	r0, #2
 80005f4:	f000 feb8 	bl	8001368 <ssd1306_SetCursor>
	ssd1306_WriteString("->Geri don", Font_11x18, White);
 80005f8:	4a05      	ldr	r2, [pc, #20]	; (8000610 <nabiz_menu_ac+0x44>)
 80005fa:	2301      	movs	r3, #1
 80005fc:	ca06      	ldmia	r2, {r1, r2}
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <nabiz_menu_ac+0x4c>)
 8000600:	f000 fe8c 	bl	800131c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000604:	f000 fd7c 	bl	8001100 <ssd1306_UpdateScreen>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000000 	.word	0x20000000
 8000614:	080054e0 	.word	0x080054e0
 8000618:	08005478 	.word	0x08005478

0800061c <anasayfa_ac>:

void anasayfa_ac(uint8_t secili)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	ssd1306_Fill(Black);
 8000626:	2000      	movs	r0, #0
 8000628:	f000 fd48 	bl	80010bc <ssd1306_Fill>
	switch(secili)
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	3b01      	subs	r3, #1
 8000630:	2b05      	cmp	r3, #5
 8000632:	f200 80d5 	bhi.w	80007e0 <anasayfa_ac+0x1c4>
 8000636:	a201      	add	r2, pc, #4	; (adr r2, 800063c <anasayfa_ac+0x20>)
 8000638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063c:	08000655 	.word	0x08000655
 8000640:	08000697 	.word	0x08000697
 8000644:	080006d9 	.word	0x080006d9
 8000648:	0800071b 	.word	0x0800071b
 800064c:	0800075d 	.word	0x0800075d
 8000650:	0800079f 	.word	0x0800079f
	{
	case 1:
		ssd1306_SetCursor(2, 0);
 8000654:	2100      	movs	r1, #0
 8000656:	2002      	movs	r0, #2
 8000658:	f000 fe86 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("->Nabiz", Font_11x18, White);
 800065c:	4a63      	ldr	r2, [pc, #396]	; (80007ec <anasayfa_ac+0x1d0>)
 800065e:	2301      	movs	r3, #1
 8000660:	ca06      	ldmia	r2, {r1, r2}
 8000662:	4863      	ldr	r0, [pc, #396]	; (80007f0 <anasayfa_ac+0x1d4>)
 8000664:	f000 fe5a 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 8000668:	2113      	movs	r1, #19
 800066a:	2002      	movs	r0, #2
 800066c:	f000 fe7c 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Adim", Font_11x18, White);
 8000670:	4a5e      	ldr	r2, [pc, #376]	; (80007ec <anasayfa_ac+0x1d0>)
 8000672:	2301      	movs	r3, #1
 8000674:	ca06      	ldmia	r2, {r1, r2}
 8000676:	485f      	ldr	r0, [pc, #380]	; (80007f4 <anasayfa_ac+0x1d8>)
 8000678:	f000 fe50 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 800067c:	2126      	movs	r1, #38	; 0x26
 800067e:	2002      	movs	r0, #2
 8000680:	f000 fe72 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 8000684:	4a59      	ldr	r2, [pc, #356]	; (80007ec <anasayfa_ac+0x1d0>)
 8000686:	2301      	movs	r3, #1
 8000688:	ca06      	ldmia	r2, {r1, r2}
 800068a:	485b      	ldr	r0, [pc, #364]	; (80007f8 <anasayfa_ac+0x1dc>)
 800068c:	f000 fe46 	bl	800131c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000690:	f000 fd36 	bl	8001100 <ssd1306_UpdateScreen>
		break;
 8000694:	e0a5      	b.n	80007e2 <anasayfa_ac+0x1c6>
	case 2:
		ssd1306_SetCursor(2, 0);
 8000696:	2100      	movs	r1, #0
 8000698:	2002      	movs	r0, #2
 800069a:	f000 fe65 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Nabiz", Font_11x18, White);
 800069e:	4a53      	ldr	r2, [pc, #332]	; (80007ec <anasayfa_ac+0x1d0>)
 80006a0:	2301      	movs	r3, #1
 80006a2:	ca06      	ldmia	r2, {r1, r2}
 80006a4:	4855      	ldr	r0, [pc, #340]	; (80007fc <anasayfa_ac+0x1e0>)
 80006a6:	f000 fe39 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 80006aa:	2113      	movs	r1, #19
 80006ac:	2002      	movs	r0, #2
 80006ae:	f000 fe5b 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("->Adim", Font_11x18, White);
 80006b2:	4a4e      	ldr	r2, [pc, #312]	; (80007ec <anasayfa_ac+0x1d0>)
 80006b4:	2301      	movs	r3, #1
 80006b6:	ca06      	ldmia	r2, {r1, r2}
 80006b8:	4851      	ldr	r0, [pc, #324]	; (8000800 <anasayfa_ac+0x1e4>)
 80006ba:	f000 fe2f 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 80006be:	2126      	movs	r1, #38	; 0x26
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 fe51 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 80006c6:	4a49      	ldr	r2, [pc, #292]	; (80007ec <anasayfa_ac+0x1d0>)
 80006c8:	2301      	movs	r3, #1
 80006ca:	ca06      	ldmia	r2, {r1, r2}
 80006cc:	484a      	ldr	r0, [pc, #296]	; (80007f8 <anasayfa_ac+0x1dc>)
 80006ce:	f000 fe25 	bl	800131c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80006d2:	f000 fd15 	bl	8001100 <ssd1306_UpdateScreen>
		break;
 80006d6:	e084      	b.n	80007e2 <anasayfa_ac+0x1c6>
	case 3:
		ssd1306_SetCursor(2, 0);
 80006d8:	2100      	movs	r1, #0
 80006da:	2002      	movs	r0, #2
 80006dc:	f000 fe44 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Nabiz", Font_11x18, White);
 80006e0:	4a42      	ldr	r2, [pc, #264]	; (80007ec <anasayfa_ac+0x1d0>)
 80006e2:	2301      	movs	r3, #1
 80006e4:	ca06      	ldmia	r2, {r1, r2}
 80006e6:	4845      	ldr	r0, [pc, #276]	; (80007fc <anasayfa_ac+0x1e0>)
 80006e8:	f000 fe18 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 80006ec:	2113      	movs	r1, #19
 80006ee:	2002      	movs	r0, #2
 80006f0:	f000 fe3a 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Adim", Font_11x18, White);
 80006f4:	4a3d      	ldr	r2, [pc, #244]	; (80007ec <anasayfa_ac+0x1d0>)
 80006f6:	2301      	movs	r3, #1
 80006f8:	ca06      	ldmia	r2, {r1, r2}
 80006fa:	483e      	ldr	r0, [pc, #248]	; (80007f4 <anasayfa_ac+0x1d8>)
 80006fc:	f000 fe0e 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 8000700:	2126      	movs	r1, #38	; 0x26
 8000702:	2002      	movs	r0, #2
 8000704:	f000 fe30 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("->Telefon", Font_11x18, White);
 8000708:	4a38      	ldr	r2, [pc, #224]	; (80007ec <anasayfa_ac+0x1d0>)
 800070a:	2301      	movs	r3, #1
 800070c:	ca06      	ldmia	r2, {r1, r2}
 800070e:	483d      	ldr	r0, [pc, #244]	; (8000804 <anasayfa_ac+0x1e8>)
 8000710:	f000 fe04 	bl	800131c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000714:	f000 fcf4 	bl	8001100 <ssd1306_UpdateScreen>
		break;
 8000718:	e063      	b.n	80007e2 <anasayfa_ac+0x1c6>
	case 4:
		ssd1306_SetCursor(2, 0);
 800071a:	2100      	movs	r1, #0
 800071c:	2002      	movs	r0, #2
 800071e:	f000 fe23 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Adim", Font_11x18, White);
 8000722:	4a32      	ldr	r2, [pc, #200]	; (80007ec <anasayfa_ac+0x1d0>)
 8000724:	2301      	movs	r3, #1
 8000726:	ca06      	ldmia	r2, {r1, r2}
 8000728:	4832      	ldr	r0, [pc, #200]	; (80007f4 <anasayfa_ac+0x1d8>)
 800072a:	f000 fdf7 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 800072e:	2113      	movs	r1, #19
 8000730:	2002      	movs	r0, #2
 8000732:	f000 fe19 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 8000736:	4a2d      	ldr	r2, [pc, #180]	; (80007ec <anasayfa_ac+0x1d0>)
 8000738:	2301      	movs	r3, #1
 800073a:	ca06      	ldmia	r2, {r1, r2}
 800073c:	482e      	ldr	r0, [pc, #184]	; (80007f8 <anasayfa_ac+0x1dc>)
 800073e:	f000 fded 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 8000742:	2126      	movs	r1, #38	; 0x26
 8000744:	2002      	movs	r0, #2
 8000746:	f000 fe0f 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("->Sicaklik", Font_11x18, White);
 800074a:	4a28      	ldr	r2, [pc, #160]	; (80007ec <anasayfa_ac+0x1d0>)
 800074c:	2301      	movs	r3, #1
 800074e:	ca06      	ldmia	r2, {r1, r2}
 8000750:	482d      	ldr	r0, [pc, #180]	; (8000808 <anasayfa_ac+0x1ec>)
 8000752:	f000 fde3 	bl	800131c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000756:	f000 fcd3 	bl	8001100 <ssd1306_UpdateScreen>
		break;
 800075a:	e042      	b.n	80007e2 <anasayfa_ac+0x1c6>
	case 5:
		ssd1306_SetCursor(2, 0);
 800075c:	2100      	movs	r1, #0
 800075e:	2002      	movs	r0, #2
 8000760:	f000 fe02 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <anasayfa_ac+0x1d0>)
 8000766:	2301      	movs	r3, #1
 8000768:	ca06      	ldmia	r2, {r1, r2}
 800076a:	4823      	ldr	r0, [pc, #140]	; (80007f8 <anasayfa_ac+0x1dc>)
 800076c:	f000 fdd6 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 8000770:	2113      	movs	r1, #19
 8000772:	2002      	movs	r0, #2
 8000774:	f000 fdf8 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Sicaklik", Font_11x18, White);
 8000778:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <anasayfa_ac+0x1d0>)
 800077a:	2301      	movs	r3, #1
 800077c:	ca06      	ldmia	r2, {r1, r2}
 800077e:	4823      	ldr	r0, [pc, #140]	; (800080c <anasayfa_ac+0x1f0>)
 8000780:	f000 fdcc 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 8000784:	2126      	movs	r1, #38	; 0x26
 8000786:	2002      	movs	r0, #2
 8000788:	f000 fdee 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("->Saat Yuzu", Font_11x18, White);
 800078c:	4a17      	ldr	r2, [pc, #92]	; (80007ec <anasayfa_ac+0x1d0>)
 800078e:	2301      	movs	r3, #1
 8000790:	ca06      	ldmia	r2, {r1, r2}
 8000792:	481f      	ldr	r0, [pc, #124]	; (8000810 <anasayfa_ac+0x1f4>)
 8000794:	f000 fdc2 	bl	800131c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000798:	f000 fcb2 	bl	8001100 <ssd1306_UpdateScreen>
		break;
 800079c:	e021      	b.n	80007e2 <anasayfa_ac+0x1c6>
	case 6:
		ssd1306_SetCursor(2, 0);
 800079e:	2100      	movs	r1, #0
 80007a0:	2002      	movs	r0, #2
 80007a2:	f000 fde1 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Sicaklik", Font_11x18, White);
 80007a6:	4a11      	ldr	r2, [pc, #68]	; (80007ec <anasayfa_ac+0x1d0>)
 80007a8:	2301      	movs	r3, #1
 80007aa:	ca06      	ldmia	r2, {r1, r2}
 80007ac:	4817      	ldr	r0, [pc, #92]	; (800080c <anasayfa_ac+0x1f0>)
 80007ae:	f000 fdb5 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 80007b2:	2113      	movs	r1, #19
 80007b4:	2002      	movs	r0, #2
 80007b6:	f000 fdd7 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("Saat Yuzu", Font_11x18, White);
 80007ba:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <anasayfa_ac+0x1d0>)
 80007bc:	2301      	movs	r3, #1
 80007be:	ca06      	ldmia	r2, {r1, r2}
 80007c0:	4814      	ldr	r0, [pc, #80]	; (8000814 <anasayfa_ac+0x1f8>)
 80007c2:	f000 fdab 	bl	800131c <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 80007c6:	2126      	movs	r1, #38	; 0x26
 80007c8:	2002      	movs	r0, #2
 80007ca:	f000 fdcd 	bl	8001368 <ssd1306_SetCursor>
		ssd1306_WriteString("->Saat Ayarla", Font_11x18, White);
 80007ce:	4a07      	ldr	r2, [pc, #28]	; (80007ec <anasayfa_ac+0x1d0>)
 80007d0:	2301      	movs	r3, #1
 80007d2:	ca06      	ldmia	r2, {r1, r2}
 80007d4:	4810      	ldr	r0, [pc, #64]	; (8000818 <anasayfa_ac+0x1fc>)
 80007d6:	f000 fda1 	bl	800131c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80007da:	f000 fc91 	bl	8001100 <ssd1306_UpdateScreen>
		break;
 80007de:	e000      	b.n	80007e2 <anasayfa_ac+0x1c6>
	default:
		break;
 80007e0:	bf00      	nop
	}

}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000000 	.word	0x20000000
 80007f0:	080054ec 	.word	0x080054ec
 80007f4:	080054f4 	.word	0x080054f4
 80007f8:	080054fc 	.word	0x080054fc
 80007fc:	08005504 	.word	0x08005504
 8000800:	0800550c 	.word	0x0800550c
 8000804:	08005514 	.word	0x08005514
 8000808:	08005520 	.word	0x08005520
 800080c:	0800552c 	.word	0x0800552c
 8000810:	08005538 	.word	0x08005538
 8000814:	08005544 	.word	0x08005544
 8000818:	08005550 	.word	0x08005550

0800081c <saat_goster>:


void saat_goster()
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

	sprintf(saat, "%02d", zaman.saat);
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <saat_goster+0x80>)
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	461a      	mov	r2, r3
 8000826:	491e      	ldr	r1, [pc, #120]	; (80008a0 <saat_goster+0x84>)
 8000828:	481e      	ldr	r0, [pc, #120]	; (80008a4 <saat_goster+0x88>)
 800082a:	f004 fa1d 	bl	8004c68 <siprintf>
	sprintf(dakika, "%02d", zaman.dakika);
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <saat_goster+0x80>)
 8000830:	795b      	ldrb	r3, [r3, #5]
 8000832:	461a      	mov	r2, r3
 8000834:	491a      	ldr	r1, [pc, #104]	; (80008a0 <saat_goster+0x84>)
 8000836:	481c      	ldr	r0, [pc, #112]	; (80008a8 <saat_goster+0x8c>)
 8000838:	f004 fa16 	bl	8004c68 <siprintf>
	sprintf(saniye, "%02d", zaman.saniye);
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <saat_goster+0x80>)
 800083e:	799b      	ldrb	r3, [r3, #6]
 8000840:	461a      	mov	r2, r3
 8000842:	4917      	ldr	r1, [pc, #92]	; (80008a0 <saat_goster+0x84>)
 8000844:	4819      	ldr	r0, [pc, #100]	; (80008ac <saat_goster+0x90>)
 8000846:	f004 fa0f 	bl	8004c68 <siprintf>

	ssd1306_Fill(Black);
 800084a:	2000      	movs	r0, #0
 800084c:	f000 fc36 	bl	80010bc <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 8000850:	2100      	movs	r1, #0
 8000852:	2002      	movs	r0, #2
 8000854:	f000 fd88 	bl	8001368 <ssd1306_SetCursor>
	ssd1306_WriteString(saat, Font_11x18, White);
 8000858:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <saat_goster+0x94>)
 800085a:	2301      	movs	r3, #1
 800085c:	ca06      	ldmia	r2, {r1, r2}
 800085e:	4811      	ldr	r0, [pc, #68]	; (80008a4 <saat_goster+0x88>)
 8000860:	f000 fd5c 	bl	800131c <ssd1306_WriteString>
	ssd1306_WriteString(".", Font_11x18, White);
 8000864:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <saat_goster+0x94>)
 8000866:	2301      	movs	r3, #1
 8000868:	ca06      	ldmia	r2, {r1, r2}
 800086a:	4812      	ldr	r0, [pc, #72]	; (80008b4 <saat_goster+0x98>)
 800086c:	f000 fd56 	bl	800131c <ssd1306_WriteString>
	ssd1306_WriteString(dakika, Font_11x18, White);
 8000870:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <saat_goster+0x94>)
 8000872:	2301      	movs	r3, #1
 8000874:	ca06      	ldmia	r2, {r1, r2}
 8000876:	480c      	ldr	r0, [pc, #48]	; (80008a8 <saat_goster+0x8c>)
 8000878:	f000 fd50 	bl	800131c <ssd1306_WriteString>
	ssd1306_WriteString(".", Font_11x18, White);
 800087c:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <saat_goster+0x94>)
 800087e:	2301      	movs	r3, #1
 8000880:	ca06      	ldmia	r2, {r1, r2}
 8000882:	480c      	ldr	r0, [pc, #48]	; (80008b4 <saat_goster+0x98>)
 8000884:	f000 fd4a 	bl	800131c <ssd1306_WriteString>
	ssd1306_WriteString(saniye, Font_11x18, White);
 8000888:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <saat_goster+0x94>)
 800088a:	2301      	movs	r3, #1
 800088c:	ca06      	ldmia	r2, {r1, r2}
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <saat_goster+0x90>)
 8000890:	f000 fd44 	bl	800131c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000894:	f000 fc34 	bl	8001100 <ssd1306_UpdateScreen>
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000051c 	.word	0x2000051c
 80008a0:	0800545c 	.word	0x0800545c
 80008a4:	20000508 	.word	0x20000508
 80008a8:	200004c4 	.word	0x200004c4
 80008ac:	200004b0 	.word	0x200004b0
 80008b0:	20000000 	.word	0x20000000
 80008b4:	08005464 	.word	0x08005464

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008bc:	f001 fa18 	bl	8001cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c0:	f000 f878 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c4:	f000 fa14 	bl	8000cf0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008c8:	f000 f9f4 	bl	8000cb4 <MX_DMA_Init>
  MX_I2C1_Init();
 80008cc:	f000 f8ac 	bl	8000a28 <MX_I2C1_Init>
  MX_TIM1_Init();
 80008d0:	f000 f906 	bl	8000ae0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008d4:	f000 f954 	bl	8000b80 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008d8:	f000 f99e 	bl	8000c18 <MX_TIM3_Init>
  MX_I2C2_Init();
 80008dc:	f000 f8d2 	bl	8000a84 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  	_5_saniye = 0;
 80008e0:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <main+0xd8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
    sistem_zamani.clock_tick_1_ms = 0;
 80008e6:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <main+0xdc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]

	ssd1306_Init();
 80008ec:	f000 fb7c 	bl	8000fe8 <ssd1306_Init>

	ssd1306_Fill(Black);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f000 fbe3 	bl	80010bc <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80008f6:	f000 fc03 	bl	8001100 <ssd1306_UpdateScreen>

//	zaman_ayarlama.dakika = 11;
//	zaman_ayarlama.saat = 19;
//	zaman_ayarlama.saniye = 31;
//	ds3231_zaman_ayarla(&hi2c1, 0xD0, zaman_ayarlama);
	timer_durum = 1;
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <main+0xe0>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	701a      	strb	r2, [r3, #0]
	lcd.secili = 1;
 8000900:	4b26      	ldr	r3, [pc, #152]	; (800099c <main+0xe4>)
 8000902:	2201      	movs	r2, #1
 8000904:	705a      	strb	r2, [r3, #1]
	lcd.menu = ANA_SAYFA;
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <main+0xe4>)
 8000908:	2200      	movs	r2, #0
 800090a:	709a      	strb	r2, [r3, #2]
	HAL_I2C_DeInit(&hi2c1);
 800090c:	4824      	ldr	r0, [pc, #144]	; (80009a0 <main+0xe8>)
 800090e:	f002 f8df 	bl	8002ad0 <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c1);
 8000912:	4823      	ldr	r0, [pc, #140]	; (80009a0 <main+0xe8>)
 8000914:	f001 ffa4 	bl	8002860 <HAL_I2C_Init>

	HAL_TIM_Base_Start_IT(&htim2);
 8000918:	4822      	ldr	r0, [pc, #136]	; (80009a4 <main+0xec>)
 800091a:	f003 fd83 	bl	8004424 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800091e:	4822      	ldr	r0, [pc, #136]	; (80009a8 <main+0xf0>)
 8000920:	f003 fd80 	bl	8004424 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(sistem_zamani._1Hz_bayrak == 1)
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <main+0xdc>)
 8000926:	7a5b      	ldrb	r3, [r3, #9]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d106      	bne.n	800093a <main+0x82>
	  {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800092c:	2102      	movs	r1, #2
 800092e:	481f      	ldr	r0, [pc, #124]	; (80009ac <main+0xf4>)
 8000930:	f001 ff5a 	bl	80027e8 <HAL_GPIO_TogglePin>
		  sistem_zamani._1Hz_bayrak = 0;
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <main+0xdc>)
 8000936:	2200      	movs	r2, #0
 8000938:	725a      	strb	r2, [r3, #9]
	  }
	  if(sistem_zamani._2Hz_bayrak == 1)
 800093a:	4b16      	ldr	r3, [pc, #88]	; (8000994 <main+0xdc>)
 800093c:	7a1b      	ldrb	r3, [r3, #8]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d102      	bne.n	8000948 <main+0x90>
	  {

		  sistem_zamani._2Hz_bayrak = 0;
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <main+0xdc>)
 8000944:	2200      	movs	r2, #0
 8000946:	721a      	strb	r2, [r3, #8]
	  }
	  if(sistem_zamani._50Hz_bayrak == 1)
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <main+0xdc>)
 800094a:	79db      	ldrb	r3, [r3, #7]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d10a      	bne.n	8000966 <main+0xae>
	  {
		  menu_ac(lcd.menu, lcd.secili);
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <main+0xe4>)
 8000952:	789a      	ldrb	r2, [r3, #2]
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <main+0xe4>)
 8000956:	785b      	ldrb	r3, [r3, #1]
 8000958:	4619      	mov	r1, r3
 800095a:	4610      	mov	r0, r2
 800095c:	f7ff fcd2 	bl	8000304 <menu_ac>
		  sistem_zamani._50Hz_bayrak = 0;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <main+0xdc>)
 8000962:	2200      	movs	r2, #0
 8000964:	71da      	strb	r2, [r3, #7]
	  }
	  if(sistem_zamani._100Hz_bayrak == 1)
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <main+0xdc>)
 8000968:	799b      	ldrb	r3, [r3, #6]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d107      	bne.n	800097e <main+0xc6>
	  {

		  ds3231_zaman_oku(&hi2c1, 0xD0, &zaman);
 800096e:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <main+0xf8>)
 8000970:	21d0      	movs	r1, #208	; 0xd0
 8000972:	480b      	ldr	r0, [pc, #44]	; (80009a0 <main+0xe8>)
 8000974:	f7ff fc26 	bl	80001c4 <ds3231_zaman_oku>

		  sistem_zamani._100Hz_bayrak = 0;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <main+0xdc>)
 800097a:	2200      	movs	r2, #0
 800097c:	719a      	strb	r2, [r3, #6]
	  }
	  if(sistem_zamani._200Hz_bayrak == 1)
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <main+0xdc>)
 8000980:	795b      	ldrb	r3, [r3, #5]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d1ce      	bne.n	8000924 <main+0x6c>
	  {

		  sistem_zamani._200Hz_bayrak = 0;
 8000986:	4b03      	ldr	r3, [pc, #12]	; (8000994 <main+0xdc>)
 8000988:	2200      	movs	r2, #0
 800098a:	715a      	strb	r2, [r3, #5]
	  if(sistem_zamani._1Hz_bayrak == 1)
 800098c:	e7ca      	b.n	8000924 <main+0x6c>
 800098e:	bf00      	nop
 8000990:	200004ab 	.word	0x200004ab
 8000994:	20000524 	.word	0x20000524
 8000998:	200004ac 	.word	0x200004ac
 800099c:	200004a8 	.word	0x200004a8
 80009a0:	200005b8 	.word	0x200005b8
 80009a4:	200006f0 	.word	0x200006f0
 80009a8:	20000660 	.word	0x20000660
 80009ac:	40010c00 	.word	0x40010c00
 80009b0:	2000051c 	.word	0x2000051c

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b090      	sub	sp, #64	; 0x40
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 0318 	add.w	r3, r7, #24
 80009be:	2228      	movs	r2, #40	; 0x28
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f004 f948 	bl	8004c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e4:	f107 0318 	add.w	r3, r7, #24
 80009e8:	4618      	mov	r0, r3
 80009ea:	f003 f8c3 	bl	8003b74 <HAL_RCC_OscConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0x44>
  {
    Error_Handler();
 80009f4:	f000 fabc 	bl	8000f70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f8:	230f      	movs	r3, #15
 80009fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80009fc:	2301      	movs	r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 fb2f 	bl	8004074 <HAL_RCC_ClockConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000a1c:	f000 faa8 	bl	8000f70 <Error_Handler>
  }
}
 8000a20:	bf00      	nop
 8000a22:	3740      	adds	r7, #64	; 0x40
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a2e:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <MX_I2C1_Init+0x54>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a34:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <MX_I2C1_Init+0x58>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a66:	f001 fefb 	bl	8002860 <HAL_I2C_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a70:	f000 fa7e 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200005b8 	.word	0x200005b8
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	000186a0 	.word	0x000186a0

08000a84 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000a8a:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <MX_I2C2_Init+0x54>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000a90:	4a12      	ldr	r2, [pc, #72]	; (8000adc <MX_I2C2_Init+0x58>)
 8000a92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000aa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_I2C2_Init+0x50>)
 8000ac2:	f001 fecd 	bl	8002860 <HAL_I2C_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000acc:	f000 fa50 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000060c 	.word	0x2000060c
 8000ad8:	40005800 	.word	0x40005800
 8000adc:	000186a0 	.word	0x000186a0

08000ae0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af4:	463b      	mov	r3, r7
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <MX_TIM1_Init+0x98>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <MX_TIM1_Init+0x9c>)
 8000b00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_TIM1_Init+0x98>)
 8000b04:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000b08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <MX_TIM1_Init+0x98>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <MX_TIM1_Init+0x98>)
 8000b12:	2232      	movs	r2, #50	; 0x32
 8000b14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <MX_TIM1_Init+0x98>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_TIM1_Init+0x98>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_TIM1_Init+0x98>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b28:	4813      	ldr	r0, [pc, #76]	; (8000b78 <MX_TIM1_Init+0x98>)
 8000b2a:	f003 fc2b 	bl	8004384 <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b34:	f000 fa1c 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <MX_TIM1_Init+0x98>)
 8000b46:	f003 fdf5 	bl	8004734 <HAL_TIM_ConfigClockSource>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b50:	f000 fa0e 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_TIM1_Init+0x98>)
 8000b62:	f003 ffbb 	bl	8004adc <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b6c:	f000 fa00 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200006a8 	.word	0x200006a8
 8000b7c:	40012c00 	.word	0x40012c00

08000b80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	463b      	mov	r3, r7
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bb2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000bb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bc4:	4813      	ldr	r0, [pc, #76]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bc6:	f003 fbdd 	bl	8004384 <HAL_TIM_Base_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bd0:	f000 f9ce 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	4619      	mov	r1, r3
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000be2:	f003 fda7 	bl	8004734 <HAL_TIM_ConfigClockSource>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bec:	f000 f9c0 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bfe:	f003 ff6d 	bl	8004adc <HAL_TIMEx_MasterConfigSynchronization>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c08:	f000 f9b2 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200006f0 	.word	0x200006f0

08000c18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c36:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <MX_TIM3_Init+0x98>)
 8000c38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c4a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000c4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c5c:	4813      	ldr	r0, [pc, #76]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c5e:	f003 fb91 	bl	8004384 <HAL_TIM_Base_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c68:	f000 f982 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	4619      	mov	r1, r3
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c7a:	f003 fd5b 	bl	8004734 <HAL_TIM_ConfigClockSource>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c84:	f000 f974 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_TIM3_Init+0x94>)
 8000c96:	f003 ff21 	bl	8004adc <HAL_TIMEx_MasterConfigSynchronization>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ca0:	f000 f966 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000660 	.word	0x20000660
 8000cb0:	40000400 	.word	0x40000400

08000cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_DMA_Init+0x38>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <MX_DMA_Init+0x38>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6153      	str	r3, [r2, #20]
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_DMA_Init+0x38>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2010      	movs	r0, #16
 8000cd8:	f001 f965 	bl	8001fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000cdc:	2010      	movs	r0, #16
 8000cde:	f001 f97e 	bl	8001fde <HAL_NVIC_EnableIRQ>

}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000

08000cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d04:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <MX_GPIO_Init+0xdc>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a30      	ldr	r2, [pc, #192]	; (8000dcc <MX_GPIO_Init+0xdc>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <MX_GPIO_Init+0xdc>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0310 	and.w	r3, r3, #16
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <MX_GPIO_Init+0xdc>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a2a      	ldr	r2, [pc, #168]	; (8000dcc <MX_GPIO_Init+0xdc>)
 8000d22:	f043 0320 	orr.w	r3, r3, #32
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <MX_GPIO_Init+0xdc>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0320 	and.w	r3, r3, #32
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <MX_GPIO_Init+0xdc>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a24      	ldr	r2, [pc, #144]	; (8000dcc <MX_GPIO_Init+0xdc>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <MX_GPIO_Init+0xdc>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MX_GPIO_Init+0xdc>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <MX_GPIO_Init+0xdc>)
 8000d52:	f043 0308 	orr.w	r3, r3, #8
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_GPIO_Init+0xdc>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0308 	and.w	r3, r3, #8
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2102      	movs	r1, #2
 8000d68:	4819      	ldr	r0, [pc, #100]	; (8000dd0 <MX_GPIO_Init+0xe0>)
 8000d6a:	f001 fd25 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d6e:	2330      	movs	r3, #48	; 0x30
 8000d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_GPIO_Init+0xe4>)
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4815      	ldr	r0, [pc, #84]	; (8000dd8 <MX_GPIO_Init+0xe8>)
 8000d82:	f001 fb03 	bl	800238c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d86:	2302      	movs	r3, #2
 8000d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <MX_GPIO_Init+0xe0>)
 8000d9e:	f001 faf5 	bl	800238c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	200a      	movs	r0, #10
 8000da8:	f001 f8fd 	bl	8001fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000dac:	200a      	movs	r0, #10
 8000dae:	f001 f916 	bl	8001fde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2017      	movs	r0, #23
 8000db8:	f001 f8f5 	bl	8001fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000dbc:	2017      	movs	r0, #23
 8000dbe:	f001 f90e 	bl	8001fde <HAL_NVIC_EnableIRQ>

}
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010c00 	.word	0x40010c00
 8000dd4:	10110000 	.word	0x10110000
 8000dd8:	40010800 	.word	0x40010800

08000ddc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  if(htim == &htim1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a59      	ldr	r2, [pc, #356]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d106      	bne.n	8000dfa <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
		timer_durum = 1;
 8000dec:	4b58      	ldr	r3, [pc, #352]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 8000df2:	4856      	ldr	r0, [pc, #344]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000df4:	f003 fb68 	bl	80044c8 <HAL_TIM_Base_Stop_IT>
		  menu_ac(lcd.menu, lcd.secili);
		  HAL_TIM_Base_Stop_IT(&htim3);
		  htim3.Instance->CNT = 0x00;
	  }
  }
}
 8000df8:	e0a4      	b.n	8000f44 <HAL_TIM_PeriodElapsedCallback+0x168>
  else if (htim == &htim2)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a55      	ldr	r2, [pc, #340]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d17d      	bne.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x122>
	  HAL_TIM_Base_Stop_IT(&htim2);
 8000e02:	4854      	ldr	r0, [pc, #336]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000e04:	f003 fb60 	bl	80044c8 <HAL_TIM_Base_Stop_IT>
	  sistem_zamani.clock_tick_1_ms++;
 8000e08:	4b53      	ldr	r3, [pc, #332]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a52      	ldr	r2, [pc, #328]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e10:	6013      	str	r3, [r2, #0]
	  if(sistem_zamani.clock_tick_1_ms % 1000 == 0 )
 8000e12:	4b51      	ldr	r3, [pc, #324]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4b51      	ldr	r3, [pc, #324]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e18:	fba3 1302 	umull	r1, r3, r3, r2
 8000e1c:	099b      	lsrs	r3, r3, #6
 8000e1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e22:	fb01 f303 	mul.w	r3, r1, r3
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d109      	bne.n	8000e40 <HAL_TIM_PeriodElapsedCallback+0x64>
		  if(sistem_zamani._1Hz_bayrak == 1)
 8000e2c:	4b4a      	ldr	r3, [pc, #296]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e2e:	7a5b      	ldrb	r3, [r3, #9]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d102      	bne.n	8000e3a <HAL_TIM_PeriodElapsedCallback+0x5e>
			  sistem_zamani.zaman_asimi = 1;
 8000e34:	4b48      	ldr	r3, [pc, #288]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	729a      	strb	r2, [r3, #10]
		  sistem_zamani._1Hz_bayrak = 1;
 8000e3a:	4b47      	ldr	r3, [pc, #284]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	725a      	strb	r2, [r3, #9]
	  if(sistem_zamani.clock_tick_1_ms % 500 == 0 )
 8000e40:	4b45      	ldr	r3, [pc, #276]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b45      	ldr	r3, [pc, #276]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e46:	fba3 1302 	umull	r1, r3, r3, r2
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e50:	fb01 f303 	mul.w	r3, r1, r3
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d109      	bne.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x92>
		  if(sistem_zamani._2Hz_bayrak == 1)
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e5c:	7a1b      	ldrb	r3, [r3, #8]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d102      	bne.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x8c>
			  sistem_zamani.zaman_asimi = 1;
 8000e62:	4b3d      	ldr	r3, [pc, #244]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	729a      	strb	r2, [r3, #10]
		  sistem_zamani._2Hz_bayrak = 1;
 8000e68:	4b3b      	ldr	r3, [pc, #236]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	721a      	strb	r2, [r3, #8]
	  if(sistem_zamani.clock_tick_1_ms % 20 == 0 )
 8000e6e:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e70:	6819      	ldr	r1, [r3, #0]
 8000e72:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e74:	fba3 2301 	umull	r2, r3, r3, r1
 8000e78:	091a      	lsrs	r2, r3, #4
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	1aca      	subs	r2, r1, r3
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	d109      	bne.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0xc0>
		  if(sistem_zamani._50Hz_bayrak == 1)
 8000e88:	4b33      	ldr	r3, [pc, #204]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e8a:	79db      	ldrb	r3, [r3, #7]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d102      	bne.n	8000e96 <HAL_TIM_PeriodElapsedCallback+0xba>
			  sistem_zamani.zaman_asimi = 1;
 8000e90:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	729a      	strb	r2, [r3, #10]
		  sistem_zamani._50Hz_bayrak = 1;
 8000e96:	4b30      	ldr	r3, [pc, #192]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	71da      	strb	r2, [r3, #7]
	  if(sistem_zamani.clock_tick_1_ms % 10 == 0)
 8000e9c:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e9e:	6819      	ldr	r1, [r3, #0]
 8000ea0:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	1aca      	subs	r2, r1, r3
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d109      	bne.n	8000eca <HAL_TIM_PeriodElapsedCallback+0xee>
		  if(sistem_zamani._100Hz_bayrak == 1)
 8000eb6:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000eb8:	799b      	ldrb	r3, [r3, #6]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d102      	bne.n	8000ec4 <HAL_TIM_PeriodElapsedCallback+0xe8>
			  sistem_zamani.zaman_asimi = 1;
 8000ebe:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	729a      	strb	r2, [r3, #10]
		  sistem_zamani._100Hz_bayrak = 1;
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	719a      	strb	r2, [r3, #6]
	  if(sistem_zamani.clock_tick_1_ms % 5 == 0)
 8000eca:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ecc:	6819      	ldr	r1, [r3, #0]
 8000ece:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000ed0:	fba3 2301 	umull	r2, r3, r3, r1
 8000ed4:	089a      	lsrs	r2, r3, #2
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	1aca      	subs	r2, r1, r3
 8000ede:	2a00      	cmp	r2, #0
 8000ee0:	d109      	bne.n	8000ef6 <HAL_TIM_PeriodElapsedCallback+0x11a>
		  if(sistem_zamani._200Hz_bayrak == 1)
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ee4:	795b      	ldrb	r3, [r3, #5]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d102      	bne.n	8000ef0 <HAL_TIM_PeriodElapsedCallback+0x114>
			  sistem_zamani.zaman_asimi = 1;
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	729a      	strb	r2, [r3, #10]
		  sistem_zamani._200Hz_bayrak = 1;
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	715a      	strb	r2, [r3, #5]
		HAL_TIM_Base_Start_IT(&htim2);
 8000ef6:	4817      	ldr	r0, [pc, #92]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000ef8:	f003 fa94 	bl	8004424 <HAL_TIM_Base_Start_IT>
}
 8000efc:	e022      	b.n	8000f44 <HAL_TIM_PeriodElapsedCallback+0x168>
  else if(htim == &htim3)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a18      	ldr	r2, [pc, #96]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d11e      	bne.n	8000f44 <HAL_TIM_PeriodElapsedCallback+0x168>
	  _5_saniye ++;
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f10:	701a      	strb	r2, [r3, #0]
	  if(_5_saniye == 5)
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b05      	cmp	r3, #5
 8000f18:	d114      	bne.n	8000f44 <HAL_TIM_PeriodElapsedCallback+0x168>
		  lcd.menu = SAAT;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f1c:	2205      	movs	r2, #5
 8000f1e:	709a      	strb	r2, [r3, #2]
		  lcd.secili = 1;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	705a      	strb	r2, [r3, #1]
		  menu_ac(lcd.menu, lcd.secili);
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f28:	789a      	ldrb	r2, [r3, #2]
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f2c:	785b      	ldrb	r3, [r3, #1]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4610      	mov	r0, r2
 8000f32:	f7ff f9e7 	bl	8000304 <menu_ac>
		  HAL_TIM_Base_Stop_IT(&htim3);
 8000f36:	480b      	ldr	r0, [pc, #44]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f38:	f003 fac6 	bl	80044c8 <HAL_TIM_Base_Stop_IT>
		  htim3.Instance->CNT = 0x00;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200006a8 	.word	0x200006a8
 8000f50:	200004ac 	.word	0x200004ac
 8000f54:	200006f0 	.word	0x200006f0
 8000f58:	20000524 	.word	0x20000524
 8000f5c:	10624dd3 	.word	0x10624dd3
 8000f60:	cccccccd 	.word	0xcccccccd
 8000f64:	20000660 	.word	0x20000660
 8000f68:	200004ab 	.word	0x200004ab
 8000f6c:	200004a8 	.word	0x200004a8

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <Error_Handler+0x6>

08000f78 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy
#include "main.h"
#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, 500);
 8000f8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f92:	9302      	str	r3, [sp, #8]
 8000f94:	2301      	movs	r3, #1
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	1dfb      	adds	r3, r7, #7
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2178      	movs	r1, #120	; 0x78
 8000fa2:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <ssd1306_WriteCommand+0x2c>)
 8000fa4:	f002 f91c 	bl	80031e0 <HAL_I2C_Mem_Write>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000060c 	.word	0x2000060c

08000fb4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af04      	add	r7, sp, #16
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, 500);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fc6:	9202      	str	r2, [sp, #8]
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	2240      	movs	r2, #64	; 0x40
 8000fd2:	2178      	movs	r1, #120	; 0x78
 8000fd4:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <ssd1306_WriteData+0x30>)
 8000fd6:	f002 f903 	bl	80031e0 <HAL_I2C_Mem_Write>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000060c 	.word	0x2000060c

08000fe8 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000fec:	f7ff ffc4 	bl	8000f78 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000ff0:	2064      	movs	r0, #100	; 0x64
 8000ff2:	f000 fedf 	bl	8001db4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f000 f9e2 	bl	80013c0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000ffc:	2020      	movs	r0, #32
 8000ffe:	f7ff ffc1 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff ffbe 	bl	8000f84 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001008:	20b0      	movs	r0, #176	; 0xb0
 800100a:	f7ff ffbb 	bl	8000f84 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800100e:	20c8      	movs	r0, #200	; 0xc8
 8001010:	f7ff ffb8 	bl	8000f84 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff ffb5 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800101a:	2010      	movs	r0, #16
 800101c:	f7ff ffb2 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001020:	2040      	movs	r0, #64	; 0x40
 8001022:	f7ff ffaf 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001026:	20ff      	movs	r0, #255	; 0xff
 8001028:	f000 f9b6 	bl	8001398 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800102c:	20a1      	movs	r0, #161	; 0xa1
 800102e:	f7ff ffa9 	bl	8000f84 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001032:	20a6      	movs	r0, #166	; 0xa6
 8001034:	f7ff ffa6 	bl	8000f84 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001038:	20a8      	movs	r0, #168	; 0xa8
 800103a:	f7ff ffa3 	bl	8000f84 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800103e:	203f      	movs	r0, #63	; 0x3f
 8001040:	f7ff ffa0 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001044:	20a4      	movs	r0, #164	; 0xa4
 8001046:	f7ff ff9d 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800104a:	20d3      	movs	r0, #211	; 0xd3
 800104c:	f7ff ff9a 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001050:	2000      	movs	r0, #0
 8001052:	f7ff ff97 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001056:	20d5      	movs	r0, #213	; 0xd5
 8001058:	f7ff ff94 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800105c:	20f0      	movs	r0, #240	; 0xf0
 800105e:	f7ff ff91 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001062:	20d9      	movs	r0, #217	; 0xd9
 8001064:	f7ff ff8e 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001068:	2022      	movs	r0, #34	; 0x22
 800106a:	f7ff ff8b 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800106e:	20da      	movs	r0, #218	; 0xda
 8001070:	f7ff ff88 	bl	8000f84 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001074:	2012      	movs	r0, #18
 8001076:	f7ff ff85 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800107a:	20db      	movs	r0, #219	; 0xdb
 800107c:	f7ff ff82 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001080:	2020      	movs	r0, #32
 8001082:	f7ff ff7f 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001086:	208d      	movs	r0, #141	; 0x8d
 8001088:	f7ff ff7c 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800108c:	2014      	movs	r0, #20
 800108e:	f7ff ff79 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001092:	2001      	movs	r0, #1
 8001094:	f000 f994 	bl	80013c0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001098:	2000      	movs	r0, #0
 800109a:	f000 f80f 	bl	80010bc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800109e:	f000 f82f 	bl	8001100 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <ssd1306_Init+0xd0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <ssd1306_Init+0xd0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80010ae:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <ssd1306_Init+0xd0>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	715a      	strb	r2, [r3, #5]
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000494 	.word	0x20000494

080010bc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e00d      	b.n	80010e8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <ssd1306_Fill+0x1a>
 80010d2:	2100      	movs	r1, #0
 80010d4:	e000      	b.n	80010d8 <ssd1306_Fill+0x1c>
 80010d6:	21ff      	movs	r1, #255	; 0xff
 80010d8:	4a08      	ldr	r2, [pc, #32]	; (80010fc <ssd1306_Fill+0x40>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4413      	add	r3, r2
 80010de:	460a      	mov	r2, r1
 80010e0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ee:	d3ed      	bcc.n	80010cc <ssd1306_Fill+0x10>
    }
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000094 	.word	0x20000094

08001100 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001106:	2300      	movs	r3, #0
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	e016      	b.n	800113a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	3b50      	subs	r3, #80	; 0x50
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff36 	bl	8000f84 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff ff33 	bl	8000f84 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800111e:	2010      	movs	r0, #16
 8001120:	f7ff ff30 	bl	8000f84 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	01db      	lsls	r3, r3, #7
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <ssd1306_UpdateScreen+0x48>)
 800112a:	4413      	add	r3, r2
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff40 	bl	8000fb4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	3301      	adds	r3, #1
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b07      	cmp	r3, #7
 800113e:	d9e5      	bls.n	800110c <ssd1306_UpdateScreen+0xc>
    }
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000094 	.word	0x20000094

0800114c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	460b      	mov	r3, r1
 8001158:	71bb      	strb	r3, [r7, #6]
 800115a:	4613      	mov	r3, r2
 800115c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db48      	blt.n	80011f8 <ssd1306_DrawPixel+0xac>
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	2b3f      	cmp	r3, #63	; 0x3f
 800116a:	d845      	bhi.n	80011f8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <ssd1306_DrawPixel+0xb8>)
 800116e:	791b      	ldrb	r3, [r3, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d006      	beq.n	8001182 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001174:	797b      	ldrb	r3, [r7, #5]
 8001176:	2b00      	cmp	r3, #0
 8001178:	bf0c      	ite	eq
 800117a:	2301      	moveq	r3, #1
 800117c:	2300      	movne	r3, #0
 800117e:	b2db      	uxtb	r3, r3
 8001180:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8001182:	797b      	ldrb	r3, [r7, #5]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d11a      	bne.n	80011be <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001188:	79fa      	ldrb	r2, [r7, #7]
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	b2d8      	uxtb	r0, r3
 8001190:	4603      	mov	r3, r0
 8001192:	01db      	lsls	r3, r3, #7
 8001194:	4413      	add	r3, r2
 8001196:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <ssd1306_DrawPixel+0xbc>)
 8001198:	5cd3      	ldrb	r3, [r2, r3]
 800119a:	b25a      	sxtb	r2, r3
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	2101      	movs	r1, #1
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b259      	sxtb	r1, r3
 80011ae:	79fa      	ldrb	r2, [r7, #7]
 80011b0:	4603      	mov	r3, r0
 80011b2:	01db      	lsls	r3, r3, #7
 80011b4:	4413      	add	r3, r2
 80011b6:	b2c9      	uxtb	r1, r1
 80011b8:	4a13      	ldr	r2, [pc, #76]	; (8001208 <ssd1306_DrawPixel+0xbc>)
 80011ba:	54d1      	strb	r1, [r2, r3]
 80011bc:	e01d      	b.n	80011fa <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80011be:	79fa      	ldrb	r2, [r7, #7]
 80011c0:	79bb      	ldrb	r3, [r7, #6]
 80011c2:	08db      	lsrs	r3, r3, #3
 80011c4:	b2d8      	uxtb	r0, r3
 80011c6:	4603      	mov	r3, r0
 80011c8:	01db      	lsls	r3, r3, #7
 80011ca:	4413      	add	r3, r2
 80011cc:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <ssd1306_DrawPixel+0xbc>)
 80011ce:	5cd3      	ldrb	r3, [r2, r3]
 80011d0:	b25a      	sxtb	r2, r3
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	2101      	movs	r1, #1
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	4013      	ands	r3, r2
 80011e6:	b259      	sxtb	r1, r3
 80011e8:	79fa      	ldrb	r2, [r7, #7]
 80011ea:	4603      	mov	r3, r0
 80011ec:	01db      	lsls	r3, r3, #7
 80011ee:	4413      	add	r3, r2
 80011f0:	b2c9      	uxtb	r1, r1
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <ssd1306_DrawPixel+0xbc>)
 80011f4:	54d1      	strb	r1, [r2, r3]
 80011f6:	e000      	b.n	80011fa <ssd1306_DrawPixel+0xae>
        return;
 80011f8:	bf00      	nop
    }
}
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000494 	.word	0x20000494
 8001208:	20000094 	.word	0x20000094

0800120c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	4604      	mov	r4, r0
 8001214:	1d38      	adds	r0, r7, #4
 8001216:	e880 0006 	stmia.w	r0, {r1, r2}
 800121a:	461a      	mov	r2, r3
 800121c:	4623      	mov	r3, r4
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	4613      	mov	r3, r2
 8001222:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	2b1f      	cmp	r3, #31
 8001228:	d902      	bls.n	8001230 <ssd1306_WriteChar+0x24>
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	2b7e      	cmp	r3, #126	; 0x7e
 800122e:	d901      	bls.n	8001234 <ssd1306_WriteChar+0x28>
        return 0;
 8001230:	2300      	movs	r3, #0
 8001232:	e06d      	b.n	8001310 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001234:	4b38      	ldr	r3, [pc, #224]	; (8001318 <ssd1306_WriteChar+0x10c>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	793b      	ldrb	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	2b80      	cmp	r3, #128	; 0x80
 8001240:	dc06      	bgt.n	8001250 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001242:	4b35      	ldr	r3, [pc, #212]	; (8001318 <ssd1306_WriteChar+0x10c>)
 8001244:	885b      	ldrh	r3, [r3, #2]
 8001246:	461a      	mov	r2, r3
 8001248:	797b      	ldrb	r3, [r7, #5]
 800124a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800124c:	2b40      	cmp	r3, #64	; 0x40
 800124e:	dd01      	ble.n	8001254 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001250:	2300      	movs	r3, #0
 8001252:	e05d      	b.n	8001310 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	e04c      	b.n	80012f4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	3b20      	subs	r3, #32
 8001260:	7979      	ldrb	r1, [r7, #5]
 8001262:	fb01 f303 	mul.w	r3, r1, r3
 8001266:	4619      	mov	r1, r3
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	440b      	add	r3, r1
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	e034      	b.n	80012e4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d012      	beq.n	80012b0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800128a:	4b23      	ldr	r3, [pc, #140]	; (8001318 <ssd1306_WriteChar+0x10c>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	4413      	add	r3, r2
 8001296:	b2d8      	uxtb	r0, r3
 8001298:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <ssd1306_WriteChar+0x10c>)
 800129a:	885b      	ldrh	r3, [r3, #2]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	4413      	add	r3, r2
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	7bba      	ldrb	r2, [r7, #14]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f7ff ff4f 	bl	800114c <ssd1306_DrawPixel>
 80012ae:	e016      	b.n	80012de <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <ssd1306_WriteChar+0x10c>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	b2d8      	uxtb	r0, r3
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <ssd1306_WriteChar+0x10c>)
 80012c0:	885b      	ldrh	r3, [r3, #2]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4413      	add	r3, r2
 80012ca:	b2d9      	uxtb	r1, r3
 80012cc:	7bbb      	ldrb	r3, [r7, #14]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	bf0c      	ite	eq
 80012d2:	2301      	moveq	r3, #1
 80012d4:	2300      	movne	r3, #0
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	461a      	mov	r2, r3
 80012da:	f7ff ff37 	bl	800114c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	3301      	adds	r3, #1
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	793b      	ldrb	r3, [r7, #4]
 80012e6:	461a      	mov	r2, r3
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d3c5      	bcc.n	800127a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3301      	adds	r3, #1
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	797b      	ldrb	r3, [r7, #5]
 80012f6:	461a      	mov	r2, r3
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d3ad      	bcc.n	800125a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <ssd1306_WriteChar+0x10c>)
 8001300:	881a      	ldrh	r2, [r3, #0]
 8001302:	793b      	ldrb	r3, [r7, #4]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	b29a      	uxth	r2, r3
 800130a:	4b03      	ldr	r3, [pc, #12]	; (8001318 <ssd1306_WriteChar+0x10c>)
 800130c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800130e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3724      	adds	r7, #36	; 0x24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd90      	pop	{r4, r7, pc}
 8001318:	20000494 	.word	0x20000494

0800131c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	1d38      	adds	r0, r7, #4
 8001326:	e880 0006 	stmia.w	r0, {r1, r2}
 800132a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800132c:	e012      	b.n	8001354 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	7818      	ldrb	r0, [r3, #0]
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	1d3a      	adds	r2, r7, #4
 8001336:	ca06      	ldmia	r2, {r1, r2}
 8001338:	f7ff ff68 	bl	800120c <ssd1306_WriteChar>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d002      	beq.n	800134e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	e008      	b.n	8001360 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3301      	adds	r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e8      	bne.n	800132e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	781b      	ldrb	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	460a      	mov	r2, r1
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	4613      	mov	r3, r2
 8001376:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	b29a      	uxth	r2, r3
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <ssd1306_SetCursor+0x2c>)
 800137e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <ssd1306_SetCursor+0x2c>)
 8001386:	805a      	strh	r2, [r3, #2]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000494 	.word	0x20000494

08001398 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80013a2:	2381      	movs	r3, #129	; 0x81
 80013a4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fdeb 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fde7 	bl	8000f84 <ssd1306_WriteCommand>
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80013d0:	23af      	movs	r3, #175	; 0xaf
 80013d2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <ssd1306_SetDisplayOn+0x38>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	719a      	strb	r2, [r3, #6]
 80013da:	e004      	b.n	80013e6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80013dc:	23ae      	movs	r3, #174	; 0xae
 80013de:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <ssd1306_SetDisplayOn+0x38>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fdcb 	bl	8000f84 <ssd1306_WriteCommand>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000494 	.word	0x20000494

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_MspInit+0x5c>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <HAL_MspInit+0x5c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6193      	str	r3, [r2, #24]
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_MspInit+0x5c>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_MspInit+0x5c>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <HAL_MspInit+0x5c>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	61d3      	str	r3, [r2, #28]
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_MspInit+0x5c>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_MspInit+0x60>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <HAL_MspInit+0x60>)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40021000 	.word	0x40021000
 800145c:	40010000 	.word	0x40010000

08001460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0318 	add.w	r3, r7, #24
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a3e      	ldr	r2, [pc, #248]	; (8001574 <HAL_I2C_MspInit+0x114>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d14a      	bne.n	8001516 <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001480:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <HAL_I2C_MspInit+0x118>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a3c      	ldr	r2, [pc, #240]	; (8001578 <HAL_I2C_MspInit+0x118>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <HAL_I2C_MspInit+0x118>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001498:	23c0      	movs	r3, #192	; 0xc0
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149c:	2312      	movs	r3, #18
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 0318 	add.w	r3, r7, #24
 80014a8:	4619      	mov	r1, r3
 80014aa:	4834      	ldr	r0, [pc, #208]	; (800157c <HAL_I2C_MspInit+0x11c>)
 80014ac:	f000 ff6e 	bl	800238c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b0:	4b31      	ldr	r3, [pc, #196]	; (8001578 <HAL_I2C_MspInit+0x118>)
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	4a30      	ldr	r2, [pc, #192]	; (8001578 <HAL_I2C_MspInit+0x118>)
 80014b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ba:	61d3      	str	r3, [r2, #28]
 80014bc:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <HAL_I2C_MspInit+0x118>)
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80014c8:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <HAL_I2C_MspInit+0x120>)
 80014ca:	4a2e      	ldr	r2, [pc, #184]	; (8001584 <HAL_I2C_MspInit+0x124>)
 80014cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ce:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <HAL_I2C_MspInit+0x120>)
 80014d0:	2210      	movs	r2, #16
 80014d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <HAL_I2C_MspInit+0x120>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <HAL_I2C_MspInit+0x120>)
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_I2C_MspInit+0x120>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_I2C_MspInit+0x120>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_I2C_MspInit+0x120>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <HAL_I2C_MspInit+0x120>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80014f8:	4821      	ldr	r0, [pc, #132]	; (8001580 <HAL_I2C_MspInit+0x120>)
 80014fa:	f000 fd8b 	bl	8002014 <HAL_DMA_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001504:	f7ff fd34 	bl	8000f70 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <HAL_I2C_MspInit+0x120>)
 800150c:	635a      	str	r2, [r3, #52]	; 0x34
 800150e:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <HAL_I2C_MspInit+0x120>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001514:	e029      	b.n	800156a <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C2)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <HAL_I2C_MspInit+0x128>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d124      	bne.n	800156a <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_I2C_MspInit+0x118>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a14      	ldr	r2, [pc, #80]	; (8001578 <HAL_I2C_MspInit+0x118>)
 8001526:	f043 0308 	orr.w	r3, r3, #8
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_I2C_MspInit+0x118>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001538:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153e:	2312      	movs	r3, #18
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001546:	f107 0318 	add.w	r3, r7, #24
 800154a:	4619      	mov	r1, r3
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <HAL_I2C_MspInit+0x11c>)
 800154e:	f000 ff1d 	bl	800238c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_I2C_MspInit+0x118>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_I2C_MspInit+0x118>)
 8001558:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800155c:	61d3      	str	r3, [r2, #28]
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_I2C_MspInit+0x118>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40005400 	.word	0x40005400
 8001578:	40021000 	.word	0x40021000
 800157c:	40010c00 	.word	0x40010c00
 8001580:	20000574 	.word	0x20000574
 8001584:	4002006c 	.word	0x4002006c
 8001588:	40005800 	.word	0x40005800

0800158c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <HAL_I2C_MspDeInit+0x6c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d113      	bne.n	80015c6 <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <HAL_I2C_MspDeInit+0x70>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a16      	ldr	r2, [pc, #88]	; (80015fc <HAL_I2C_MspDeInit+0x70>)
 80015a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015a8:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80015aa:	2140      	movs	r1, #64	; 0x40
 80015ac:	4814      	ldr	r0, [pc, #80]	; (8001600 <HAL_I2C_MspDeInit+0x74>)
 80015ae:	f001 f847 	bl	8002640 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	4812      	ldr	r0, [pc, #72]	; (8001600 <HAL_I2C_MspDeInit+0x74>)
 80015b6:	f001 f843 	bl	8002640 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fd82 	bl	80020c8 <HAL_DMA_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80015c4:	e014      	b.n	80015f0 <HAL_I2C_MspDeInit+0x64>
  else if(hi2c->Instance==I2C2)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <HAL_I2C_MspDeInit+0x78>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d10f      	bne.n	80015f0 <HAL_I2C_MspDeInit+0x64>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_I2C_MspDeInit+0x70>)
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	4a09      	ldr	r2, [pc, #36]	; (80015fc <HAL_I2C_MspDeInit+0x70>)
 80015d6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80015da:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80015dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015e0:	4807      	ldr	r0, [pc, #28]	; (8001600 <HAL_I2C_MspDeInit+0x74>)
 80015e2:	f001 f82d 	bl	8002640 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80015e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_I2C_MspDeInit+0x74>)
 80015ec:	f001 f828 	bl	8002640 <HAL_GPIO_DeInit>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40005400 	.word	0x40005400
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010c00 	.word	0x40010c00
 8001604:	40005800 	.word	0x40005800

08001608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2f      	ldr	r2, [pc, #188]	; (80016d4 <HAL_TIM_Base_MspInit+0xcc>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12c      	bne.n	8001674 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800161a:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <HAL_TIM_Base_MspInit+0xd0>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	4a2e      	ldr	r2, [pc, #184]	; (80016d8 <HAL_TIM_Base_MspInit+0xd0>)
 8001620:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001624:	6193      	str	r3, [r2, #24]
 8001626:	4b2c      	ldr	r3, [pc, #176]	; (80016d8 <HAL_TIM_Base_MspInit+0xd0>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2018      	movs	r0, #24
 8001638:	f000 fcb5 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800163c:	2018      	movs	r0, #24
 800163e:	f000 fcce 	bl	8001fde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2019      	movs	r0, #25
 8001648:	f000 fcad 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800164c:	2019      	movs	r0, #25
 800164e:	f000 fcc6 	bl	8001fde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	201a      	movs	r0, #26
 8001658:	f000 fca5 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800165c:	201a      	movs	r0, #26
 800165e:	f000 fcbe 	bl	8001fde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	201b      	movs	r0, #27
 8001668:	f000 fc9d 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800166c:	201b      	movs	r0, #27
 800166e:	f000 fcb6 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001672:	e02a      	b.n	80016ca <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167c:	d114      	bne.n	80016a8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_TIM_Base_MspInit+0xd0>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a15      	ldr	r2, [pc, #84]	; (80016d8 <HAL_TIM_Base_MspInit+0xd0>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_TIM_Base_MspInit+0xd0>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	201c      	movs	r0, #28
 800169c:	f000 fc83 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016a0:	201c      	movs	r0, #28
 80016a2:	f000 fc9c 	bl	8001fde <HAL_NVIC_EnableIRQ>
}
 80016a6:	e010      	b.n	80016ca <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <HAL_TIM_Base_MspInit+0xd4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d10b      	bne.n	80016ca <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_TIM_Base_MspInit+0xd0>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <HAL_TIM_Base_MspInit+0xd0>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	61d3      	str	r3, [r2, #28]
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_TIM_Base_MspInit+0xd0>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40012c00 	.word	0x40012c00
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40000400 	.word	0x40000400

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <NMI_Handler+0x4>

080016e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <MemManage_Handler+0x4>

080016f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <BusFault_Handler+0x4>

080016f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <UsageFault_Handler+0x4>

080016fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001726:	f000 fb29 	bl	8001d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	//HAREKET BUTONU
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001734:	2010      	movs	r0, #16
 8001736:	f001 f871 	bl	800281c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim3);
 800173a:	488b      	ldr	r0, [pc, #556]	; (8001968 <EXTI4_IRQHandler+0x238>)
 800173c:	f002 fec4 	bl	80044c8 <HAL_TIM_Base_Stop_IT>
  htim3.Instance->CNT = 0x00;
 8001740:	4b89      	ldr	r3, [pc, #548]	; (8001968 <EXTI4_IRQHandler+0x238>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim3);
 8001748:	4887      	ldr	r0, [pc, #540]	; (8001968 <EXTI4_IRQHandler+0x238>)
 800174a:	f002 fe6b 	bl	8004424 <HAL_TIM_Base_Start_IT>

	if(timer_durum == 1)
 800174e:	4b87      	ldr	r3, [pc, #540]	; (800196c <EXTI4_IRQHandler+0x23c>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	f040 8106 	bne.w	8001964 <EXTI4_IRQHandler+0x234>
	{
		switch (lcd.menu)
 8001758:	4b85      	ldr	r3, [pc, #532]	; (8001970 <EXTI4_IRQHandler+0x240>)
 800175a:	789b      	ldrb	r3, [r3, #2]
 800175c:	2b06      	cmp	r3, #6
 800175e:	f200 80f8 	bhi.w	8001952 <EXTI4_IRQHandler+0x222>
 8001762:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <EXTI4_IRQHandler+0x38>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	08001785 	.word	0x08001785
 800176c:	080017b9 	.word	0x080017b9
 8001770:	080017a3 	.word	0x080017a3
 8001774:	080017c7 	.word	0x080017c7
 8001778:	080017e5 	.word	0x080017e5
 800177c:	080017ed 	.word	0x080017ed
 8001780:	080017f3 	.word	0x080017f3
		{
		case ANA_SAYFA:
			if(lcd.secili == ANA_SAYFA_MAX_SATIR)
 8001784:	4b7a      	ldr	r3, [pc, #488]	; (8001970 <EXTI4_IRQHandler+0x240>)
 8001786:	785b      	ldrb	r3, [r3, #1]
 8001788:	2b06      	cmp	r3, #6
 800178a:	d103      	bne.n	8001794 <EXTI4_IRQHandler+0x64>
			{
				lcd.secili = 1;
 800178c:	4b78      	ldr	r3, [pc, #480]	; (8001970 <EXTI4_IRQHandler+0x240>)
 800178e:	2201      	movs	r2, #1
 8001790:	705a      	strb	r2, [r3, #1]
			else
			{
				lcd.secili ++;
			}
//			menu_ac(ANA_SAYFA, lcd.secili);
			break;
 8001792:	e0e1      	b.n	8001958 <EXTI4_IRQHandler+0x228>
				lcd.secili ++;
 8001794:	4b76      	ldr	r3, [pc, #472]	; (8001970 <EXTI4_IRQHandler+0x240>)
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	3301      	adds	r3, #1
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b74      	ldr	r3, [pc, #464]	; (8001970 <EXTI4_IRQHandler+0x240>)
 800179e:	705a      	strb	r2, [r3, #1]
			break;
 80017a0:	e0da      	b.n	8001958 <EXTI4_IRQHandler+0x228>
		case ADIM:

			lcd.menu = ADIM;
 80017a2:	4b73      	ldr	r3, [pc, #460]	; (8001970 <EXTI4_IRQHandler+0x240>)
 80017a4:	2202      	movs	r2, #2
 80017a6:	709a      	strb	r2, [r3, #2]
			lcd.secili = 1;
 80017a8:	4b71      	ldr	r3, [pc, #452]	; (8001970 <EXTI4_IRQHandler+0x240>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	705a      	strb	r2, [r3, #1]
			menu_ac(ADIM, 1);
 80017ae:	2101      	movs	r1, #1
 80017b0:	2002      	movs	r0, #2
 80017b2:	f7fe fda7 	bl	8000304 <menu_ac>
			break;
 80017b6:	e0cf      	b.n	8001958 <EXTI4_IRQHandler+0x228>
		case NABIZ:
			lcd.menu = NABIZ;
 80017b8:	4b6d      	ldr	r3, [pc, #436]	; (8001970 <EXTI4_IRQHandler+0x240>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	709a      	strb	r2, [r3, #2]
			lcd.secili = 1;
 80017be:	4b6c      	ldr	r3, [pc, #432]	; (8001970 <EXTI4_IRQHandler+0x240>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	705a      	strb	r2, [r3, #1]
//			menu_ac(lcd.menu, lcd.secili);
			break;
 80017c4:	e0c8      	b.n	8001958 <EXTI4_IRQHandler+0x228>
		case TELEFON:
			if(lcd.secili == TELEFON_MAX_SATIR)
 80017c6:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <EXTI4_IRQHandler+0x240>)
 80017c8:	785b      	ldrb	r3, [r3, #1]
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d103      	bne.n	80017d6 <EXTI4_IRQHandler+0xa6>
			{
				lcd.secili = 1;
 80017ce:	4b68      	ldr	r3, [pc, #416]	; (8001970 <EXTI4_IRQHandler+0x240>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	705a      	strb	r2, [r3, #1]
			else
			{
				lcd.secili ++;
			}
//			menu_ac(lcd.menu, lcd.secili);
			break;
 80017d4:	e0c0      	b.n	8001958 <EXTI4_IRQHandler+0x228>
				lcd.secili ++;
 80017d6:	4b66      	ldr	r3, [pc, #408]	; (8001970 <EXTI4_IRQHandler+0x240>)
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	3301      	adds	r3, #1
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4b64      	ldr	r3, [pc, #400]	; (8001970 <EXTI4_IRQHandler+0x240>)
 80017e0:	705a      	strb	r2, [r3, #1]
			break;
 80017e2:	e0b9      	b.n	8001958 <EXTI4_IRQHandler+0x228>
		case SICAKLIK:
			lcd.secili = 1;
 80017e4:	4b62      	ldr	r3, [pc, #392]	; (8001970 <EXTI4_IRQHandler+0x240>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	705a      	strb	r2, [r3, #1]
//			menu_ac(lcd.menu, 1);
			break;
 80017ea:	e0b5      	b.n	8001958 <EXTI4_IRQHandler+0x228>
		case SAAT:
			lcd.secili = 1;
 80017ec:	4b60      	ldr	r3, [pc, #384]	; (8001970 <EXTI4_IRQHandler+0x240>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	705a      	strb	r2, [r3, #1]
		case SAAT_AYAR:
			switch(zaman_ayarlama.saat_ayar_digit)
 80017f2:	4b60      	ldr	r3, [pc, #384]	; (8001974 <EXTI4_IRQHandler+0x244>)
 80017f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80017f8:	2b06      	cmp	r3, #6
 80017fa:	f200 80ac 	bhi.w	8001956 <EXTI4_IRQHandler+0x226>
 80017fe:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <EXTI4_IRQHandler+0xd4>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001821 	.word	0x08001821
 8001808:	08001849 	.word	0x08001849
 800180c:	08001881 	.word	0x08001881
 8001810:	080018a7 	.word	0x080018a7
 8001814:	080018df 	.word	0x080018df
 8001818:	08001905 	.word	0x08001905
 800181c:	0800193d 	.word	0x0800193d
			{
			case SAAT_ONDALIK:
				zaman_ayarlama.saat += 10;
 8001820:	4b54      	ldr	r3, [pc, #336]	; (8001974 <EXTI4_IRQHandler+0x244>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	330a      	adds	r3, #10
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b52      	ldr	r3, [pc, #328]	; (8001974 <EXTI4_IRQHandler+0x244>)
 800182a:	701a      	strb	r2, [r3, #0]
				if(zaman_ayarlama.saat / 10 == 6 )
 800182c:	4b51      	ldr	r3, [pc, #324]	; (8001974 <EXTI4_IRQHandler+0x244>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	3b3c      	subs	r3, #60	; 0x3c
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b09      	cmp	r3, #9
 8001836:	f200 8086 	bhi.w	8001946 <EXTI4_IRQHandler+0x216>
				{
					zaman_ayarlama.saat -= 60;
 800183a:	4b4e      	ldr	r3, [pc, #312]	; (8001974 <EXTI4_IRQHandler+0x244>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	3b3c      	subs	r3, #60	; 0x3c
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b4c      	ldr	r3, [pc, #304]	; (8001974 <EXTI4_IRQHandler+0x244>)
 8001844:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001846:	e07e      	b.n	8001946 <EXTI4_IRQHandler+0x216>
			case SAAT_BIRLIK:
				if(zaman_ayarlama.saat % 10 == 9)
 8001848:	4b4a      	ldr	r3, [pc, #296]	; (8001974 <EXTI4_IRQHandler+0x244>)
 800184a:	781a      	ldrb	r2, [r3, #0]
 800184c:	4b4a      	ldr	r3, [pc, #296]	; (8001978 <EXTI4_IRQHandler+0x248>)
 800184e:	fba3 1302 	umull	r1, r3, r3, r2
 8001852:	08d9      	lsrs	r1, r3, #3
 8001854:	460b      	mov	r3, r1
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b09      	cmp	r3, #9
 8001862:	d106      	bne.n	8001872 <EXTI4_IRQHandler+0x142>
				{
					zaman_ayarlama.saat = zaman_ayarlama.saat + 1 - 10;
 8001864:	4b43      	ldr	r3, [pc, #268]	; (8001974 <EXTI4_IRQHandler+0x244>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	3b09      	subs	r3, #9
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b41      	ldr	r3, [pc, #260]	; (8001974 <EXTI4_IRQHandler+0x244>)
 800186e:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					zaman_ayarlama.saat = zaman_ayarlama.saat + 1 ;
				}
				break;
 8001870:	e06e      	b.n	8001950 <EXTI4_IRQHandler+0x220>
					zaman_ayarlama.saat = zaman_ayarlama.saat + 1 ;
 8001872:	4b40      	ldr	r3, [pc, #256]	; (8001974 <EXTI4_IRQHandler+0x244>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <EXTI4_IRQHandler+0x244>)
 800187c:	701a      	strb	r2, [r3, #0]
				break;
 800187e:	e067      	b.n	8001950 <EXTI4_IRQHandler+0x220>
			case DAKIKA_ONDALIK:
				zaman_ayarlama.dakika += 10;
 8001880:	4b3c      	ldr	r3, [pc, #240]	; (8001974 <EXTI4_IRQHandler+0x244>)
 8001882:	785b      	ldrb	r3, [r3, #1]
 8001884:	330a      	adds	r3, #10
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b3a      	ldr	r3, [pc, #232]	; (8001974 <EXTI4_IRQHandler+0x244>)
 800188a:	705a      	strb	r2, [r3, #1]
				if(zaman_ayarlama.dakika / 10 == 6 )
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <EXTI4_IRQHandler+0x244>)
 800188e:	785b      	ldrb	r3, [r3, #1]
 8001890:	3b3c      	subs	r3, #60	; 0x3c
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b09      	cmp	r3, #9
 8001896:	d858      	bhi.n	800194a <EXTI4_IRQHandler+0x21a>
				{
					zaman_ayarlama.dakika -= 60;
 8001898:	4b36      	ldr	r3, [pc, #216]	; (8001974 <EXTI4_IRQHandler+0x244>)
 800189a:	785b      	ldrb	r3, [r3, #1]
 800189c:	3b3c      	subs	r3, #60	; 0x3c
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	4b34      	ldr	r3, [pc, #208]	; (8001974 <EXTI4_IRQHandler+0x244>)
 80018a2:	705a      	strb	r2, [r3, #1]
				}
				break;
 80018a4:	e051      	b.n	800194a <EXTI4_IRQHandler+0x21a>
			case DAKIKA_BIRLIK:
				if(zaman_ayarlama.dakika % 10 == 9)
 80018a6:	4b33      	ldr	r3, [pc, #204]	; (8001974 <EXTI4_IRQHandler+0x244>)
 80018a8:	785a      	ldrb	r2, [r3, #1]
 80018aa:	4b33      	ldr	r3, [pc, #204]	; (8001978 <EXTI4_IRQHandler+0x248>)
 80018ac:	fba3 1302 	umull	r1, r3, r3, r2
 80018b0:	08d9      	lsrs	r1, r3, #3
 80018b2:	460b      	mov	r3, r1
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b09      	cmp	r3, #9
 80018c0:	d106      	bne.n	80018d0 <EXTI4_IRQHandler+0x1a0>
				{
					zaman_ayarlama.dakika = zaman_ayarlama.dakika + 1 - 10;
 80018c2:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <EXTI4_IRQHandler+0x244>)
 80018c4:	785b      	ldrb	r3, [r3, #1]
 80018c6:	3b09      	subs	r3, #9
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <EXTI4_IRQHandler+0x244>)
 80018cc:	705a      	strb	r2, [r3, #1]
				}
				else
				{
					zaman_ayarlama.dakika = zaman_ayarlama.dakika + 1 ;
				}
				break;
 80018ce:	e03f      	b.n	8001950 <EXTI4_IRQHandler+0x220>
					zaman_ayarlama.dakika = zaman_ayarlama.dakika + 1 ;
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <EXTI4_IRQHandler+0x244>)
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	3301      	adds	r3, #1
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	4b26      	ldr	r3, [pc, #152]	; (8001974 <EXTI4_IRQHandler+0x244>)
 80018da:	705a      	strb	r2, [r3, #1]
				break;
 80018dc:	e038      	b.n	8001950 <EXTI4_IRQHandler+0x220>
			case SANIYE_ONDALIK:
				zaman_ayarlama.saniye += 10;
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <EXTI4_IRQHandler+0x244>)
 80018e0:	789b      	ldrb	r3, [r3, #2]
 80018e2:	330a      	adds	r3, #10
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4b23      	ldr	r3, [pc, #140]	; (8001974 <EXTI4_IRQHandler+0x244>)
 80018e8:	709a      	strb	r2, [r3, #2]
				if(zaman_ayarlama.saniye / 10 == 6 )
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <EXTI4_IRQHandler+0x244>)
 80018ec:	789b      	ldrb	r3, [r3, #2]
 80018ee:	3b3c      	subs	r3, #60	; 0x3c
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b09      	cmp	r3, #9
 80018f4:	d82b      	bhi.n	800194e <EXTI4_IRQHandler+0x21e>
				{
					zaman_ayarlama.saniye -= 60;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <EXTI4_IRQHandler+0x244>)
 80018f8:	789b      	ldrb	r3, [r3, #2]
 80018fa:	3b3c      	subs	r3, #60	; 0x3c
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <EXTI4_IRQHandler+0x244>)
 8001900:	709a      	strb	r2, [r3, #2]
				}
				break;
 8001902:	e024      	b.n	800194e <EXTI4_IRQHandler+0x21e>
			case SANIYE_BIRLIK:
				if(zaman_ayarlama.saniye % 10 == 9)
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <EXTI4_IRQHandler+0x244>)
 8001906:	789a      	ldrb	r2, [r3, #2]
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <EXTI4_IRQHandler+0x248>)
 800190a:	fba3 1302 	umull	r1, r3, r3, r2
 800190e:	08d9      	lsrs	r1, r3, #3
 8001910:	460b      	mov	r3, r1
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b09      	cmp	r3, #9
 800191e:	d106      	bne.n	800192e <EXTI4_IRQHandler+0x1fe>
				{
					zaman_ayarlama.saniye = zaman_ayarlama.saniye + 1 - 10;
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <EXTI4_IRQHandler+0x244>)
 8001922:	789b      	ldrb	r3, [r3, #2]
 8001924:	3b09      	subs	r3, #9
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <EXTI4_IRQHandler+0x244>)
 800192a:	709a      	strb	r2, [r3, #2]
				}
				else
				{
					zaman_ayarlama.saniye = zaman_ayarlama.saniye + 1 ;
				}
				break;
 800192c:	e010      	b.n	8001950 <EXTI4_IRQHandler+0x220>
					zaman_ayarlama.saniye = zaman_ayarlama.saniye + 1 ;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <EXTI4_IRQHandler+0x244>)
 8001930:	789b      	ldrb	r3, [r3, #2]
 8001932:	3301      	adds	r3, #1
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <EXTI4_IRQHandler+0x244>)
 8001938:	709a      	strb	r2, [r3, #2]
				break;
 800193a:	e009      	b.n	8001950 <EXTI4_IRQHandler+0x220>
			case SET_SAAT:
				zaman_ayarlama.saat_ayar_digit = SAAT_ONDALIK;
 800193c:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <EXTI4_IRQHandler+0x244>)
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				break;
 8001944:	e004      	b.n	8001950 <EXTI4_IRQHandler+0x220>
				break;
 8001946:	bf00      	nop
 8001948:	e005      	b.n	8001956 <EXTI4_IRQHandler+0x226>
				break;
 800194a:	bf00      	nop
 800194c:	e003      	b.n	8001956 <EXTI4_IRQHandler+0x226>
				break;
 800194e:	bf00      	nop
			}
			break;
 8001950:	e001      	b.n	8001956 <EXTI4_IRQHandler+0x226>

		default:
			break;
 8001952:	bf00      	nop
 8001954:	e000      	b.n	8001958 <EXTI4_IRQHandler+0x228>
			break;
 8001956:	bf00      	nop
		}
		HAL_TIM_Base_Start_IT(&htim1);
 8001958:	4808      	ldr	r0, [pc, #32]	; (800197c <EXTI4_IRQHandler+0x24c>)
 800195a:	f002 fd63 	bl	8004424 <HAL_TIM_Base_Start_IT>
		timer_durum = 0;
 800195e:	4b03      	ldr	r3, [pc, #12]	; (800196c <EXTI4_IRQHandler+0x23c>)
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	}
  /* USER CODE END EXTI4_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000660 	.word	0x20000660
 800196c:	200004ac 	.word	0x200004ac
 8001970:	200004a8 	.word	0x200004a8
 8001974:	20000530 	.word	0x20000530
 8001978:	cccccccd 	.word	0xcccccccd
 800197c:	200006a8 	.word	0x200006a8

08001980 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <DMA1_Channel6_IRQHandler+0x10>)
 8001986:	f000 fbfb 	bl	8002180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000574 	.word	0x20000574

08001994 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001998:	b08e      	sub	sp, #56	; 0x38
 800199a:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	//SECME BUTONU
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800199c:	2020      	movs	r0, #32
 800199e:	f000 ff3d 	bl	800281c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  HAL_TIM_Base_Stop_IT(&htim3);
 80019a2:	4883      	ldr	r0, [pc, #524]	; (8001bb0 <EXTI9_5_IRQHandler+0x21c>)
 80019a4:	f002 fd90 	bl	80044c8 <HAL_TIM_Base_Stop_IT>
  htim3.Instance->CNT = 0x00;
 80019a8:	4b81      	ldr	r3, [pc, #516]	; (8001bb0 <EXTI9_5_IRQHandler+0x21c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2200      	movs	r2, #0
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim3);
 80019b0:	487f      	ldr	r0, [pc, #508]	; (8001bb0 <EXTI9_5_IRQHandler+0x21c>)
 80019b2:	f002 fd37 	bl	8004424 <HAL_TIM_Base_Start_IT>

	if(timer_durum == 1)
 80019b6:	4b7f      	ldr	r3, [pc, #508]	; (8001bb4 <EXTI9_5_IRQHandler+0x220>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	f040 80f4 	bne.w	8001ba8 <EXTI9_5_IRQHandler+0x214>
	{
		switch (lcd.menu)
 80019c0:	4b7d      	ldr	r3, [pc, #500]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 80019c2:	789b      	ldrb	r3, [r3, #2]
 80019c4:	2b06      	cmp	r3, #6
 80019c6:	f200 80e8 	bhi.w	8001b9a <EXTI9_5_IRQHandler+0x206>
 80019ca:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <EXTI9_5_IRQHandler+0x3c>)
 80019cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d0:	080019ed 	.word	0x080019ed
 80019d4:	08001ab1 	.word	0x08001ab1
 80019d8:	08001a6d 	.word	0x08001a6d
 80019dc:	08001a7b 	.word	0x08001a7b
 80019e0:	08001aa3 	.word	0x08001aa3
 80019e4:	08001abf 	.word	0x08001abf
 80019e8:	08001acd 	.word	0x08001acd
		{
		case ANA_SAYFA:
			switch(lcd.secili)
 80019ec:	4b72      	ldr	r3, [pc, #456]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 80019ee:	785b      	ldrb	r3, [r3, #1]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d838      	bhi.n	8001a68 <EXTI9_5_IRQHandler+0xd4>
 80019f6:	a201      	add	r2, pc, #4	; (adr r2, 80019fc <EXTI9_5_IRQHandler+0x68>)
 80019f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fc:	08001a15 	.word	0x08001a15
 8001a00:	08001a23 	.word	0x08001a23
 8001a04:	08001a31 	.word	0x08001a31
 8001a08:	08001a3f 	.word	0x08001a3f
 8001a0c:	08001a4d 	.word	0x08001a4d
 8001a10:	08001a5b 	.word	0x08001a5b
			{
			case 1:				//nabiz
				lcd.menu = NABIZ;
 8001a14:	4b68      	ldr	r3, [pc, #416]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	709a      	strb	r2, [r3, #2]
				lcd.secili = 1;
 8001a1a:	4b67      	ldr	r3, [pc, #412]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	705a      	strb	r2, [r3, #1]
//				menu_ac(lcd.menu, lcd.secili);
				break;
 8001a20:	e023      	b.n	8001a6a <EXTI9_5_IRQHandler+0xd6>
			case 2:				//adim
				lcd.menu = ADIM;
 8001a22:	4b65      	ldr	r3, [pc, #404]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a24:	2202      	movs	r2, #2
 8001a26:	709a      	strb	r2, [r3, #2]
				lcd.secili = 1;
 8001a28:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	705a      	strb	r2, [r3, #1]
//				menu_ac(lcd.menu, lcd.secili);
				break;
 8001a2e:	e01c      	b.n	8001a6a <EXTI9_5_IRQHandler+0xd6>
			case 3:				//tel
				lcd.menu = TELEFON;
 8001a30:	4b61      	ldr	r3, [pc, #388]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a32:	2203      	movs	r2, #3
 8001a34:	709a      	strb	r2, [r3, #2]
				lcd.secili = 1;
 8001a36:	4b60      	ldr	r3, [pc, #384]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	705a      	strb	r2, [r3, #1]
//				menu_ac(lcd.menu, lcd.secili);
				break;
 8001a3c:	e015      	b.n	8001a6a <EXTI9_5_IRQHandler+0xd6>
			case 4:			//sicaklik
				lcd.menu = SICAKLIK;
 8001a3e:	4b5e      	ldr	r3, [pc, #376]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a40:	2204      	movs	r2, #4
 8001a42:	709a      	strb	r2, [r3, #2]
				lcd.secili = 1;
 8001a44:	4b5c      	ldr	r3, [pc, #368]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	705a      	strb	r2, [r3, #1]
//				menu_ac(lcd.menu, lcd.secili);
				break;
 8001a4a:	e00e      	b.n	8001a6a <EXTI9_5_IRQHandler+0xd6>
			case 5:			//SAAT YUZU
				lcd.menu = SAAT;
 8001a4c:	4b5a      	ldr	r3, [pc, #360]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a4e:	2205      	movs	r2, #5
 8001a50:	709a      	strb	r2, [r3, #2]
				lcd.secili = 1;
 8001a52:	4b59      	ldr	r3, [pc, #356]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	705a      	strb	r2, [r3, #1]
//				menu_ac(lcd.menu, lcd.secili);
				break;
 8001a58:	e007      	b.n	8001a6a <EXTI9_5_IRQHandler+0xd6>
			case 6:			//saat ayar
				lcd.menu = SAAT_AYAR;
 8001a5a:	4b57      	ldr	r3, [pc, #348]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a5c:	2206      	movs	r2, #6
 8001a5e:	709a      	strb	r2, [r3, #2]
				lcd.secili = 1;
 8001a60:	4b55      	ldr	r3, [pc, #340]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	705a      	strb	r2, [r3, #1]
				break;
 8001a66:	e000      	b.n	8001a6a <EXTI9_5_IRQHandler+0xd6>
			default:
				break;
 8001a68:	bf00      	nop
			}
			break;
 8001a6a:	e097      	b.n	8001b9c <EXTI9_5_IRQHandler+0x208>
		case ADIM:
			lcd.menu = ANA_SAYFA;
 8001a6c:	4b52      	ldr	r3, [pc, #328]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	709a      	strb	r2, [r3, #2]
			lcd.secili = 1;
 8001a72:	4b51      	ldr	r3, [pc, #324]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	705a      	strb	r2, [r3, #1]
//			menu_ac(lcd.menu, lcd.secili);
			break;
 8001a78:	e090      	b.n	8001b9c <EXTI9_5_IRQHandler+0x208>
		case TELEFON:
			switch(lcd.secili)
 8001a7a:	4b4f      	ldr	r3, [pc, #316]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a7c:	785b      	ldrb	r3, [r3, #1]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d00b      	beq.n	8001a9a <EXTI9_5_IRQHandler+0x106>
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d002      	beq.n	8001a8c <EXTI9_5_IRQHandler+0xf8>
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d009      	beq.n	8001a9e <EXTI9_5_IRQHandler+0x10a>
				lcd.menu = ANA_SAYFA;
				lcd.secili = 1;
//				menu_ac(lcd.menu, lcd.secili);
				break;
			default:
				break;
 8001a8a:	e009      	b.n	8001aa0 <EXTI9_5_IRQHandler+0x10c>
				lcd.menu = ANA_SAYFA;
 8001a8c:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	709a      	strb	r2, [r3, #2]
				lcd.secili = 1;
 8001a92:	4b49      	ldr	r3, [pc, #292]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	705a      	strb	r2, [r3, #1]
				break;
 8001a98:	e002      	b.n	8001aa0 <EXTI9_5_IRQHandler+0x10c>
				break;
 8001a9a:	bf00      	nop
 8001a9c:	e07e      	b.n	8001b9c <EXTI9_5_IRQHandler+0x208>
				break;
 8001a9e:	bf00      	nop
			}
			break;
 8001aa0:	e07c      	b.n	8001b9c <EXTI9_5_IRQHandler+0x208>
		case SICAKLIK:
			lcd.menu = ANA_SAYFA;
 8001aa2:	4b45      	ldr	r3, [pc, #276]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	709a      	strb	r2, [r3, #2]
			lcd.secili = 1;
 8001aa8:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	705a      	strb	r2, [r3, #1]
//			menu_ac(lcd.menu, lcd.secili);
			break;
 8001aae:	e075      	b.n	8001b9c <EXTI9_5_IRQHandler+0x208>
		case NABIZ:
			lcd.menu = ANA_SAYFA;
 8001ab0:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	709a      	strb	r2, [r3, #2]
			lcd.secili = 1;
 8001ab6:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	705a      	strb	r2, [r3, #1]
//			menu_ac(lcd.menu, lcd.secili);
			break;
 8001abc:	e06e      	b.n	8001b9c <EXTI9_5_IRQHandler+0x208>
		case SAAT:
			lcd.menu = ANA_SAYFA;
 8001abe:	4b3e      	ldr	r3, [pc, #248]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	709a      	strb	r2, [r3, #2]
			lcd.secili = 1;
 8001ac4:	4b3c      	ldr	r3, [pc, #240]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	705a      	strb	r2, [r3, #1]
//			menu_ac(lcd.menu, lcd.secili);
			break;
 8001aca:	e067      	b.n	8001b9c <EXTI9_5_IRQHandler+0x208>
		case SAAT_AYAR:
			switch(zaman_ayarlama.saat_ayar_digit)
 8001acc:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <EXTI9_5_IRQHandler+0x228>)
 8001ace:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ad2:	2b05      	cmp	r3, #5
 8001ad4:	d85f      	bhi.n	8001b96 <EXTI9_5_IRQHandler+0x202>
 8001ad6:	a201      	add	r2, pc, #4	; (adr r2, 8001adc <EXTI9_5_IRQHandler+0x148>)
 8001ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001adc:	08001af5 	.word	0x08001af5
 8001ae0:	08001aff 	.word	0x08001aff
 8001ae4:	08001b09 	.word	0x08001b09
 8001ae8:	08001b13 	.word	0x08001b13
 8001aec:	08001b1d 	.word	0x08001b1d
 8001af0:	08001b27 	.word	0x08001b27
			{
			case SAAT_ONDALIK:
				zaman_ayarlama.saat_ayar_digit = SAAT_BIRLIK;
 8001af4:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <EXTI9_5_IRQHandler+0x228>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				break;
 8001afc:	e04c      	b.n	8001b98 <EXTI9_5_IRQHandler+0x204>
			case SAAT_BIRLIK:
				zaman_ayarlama.saat_ayar_digit = DAKIKA_ONDALIK;
 8001afe:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <EXTI9_5_IRQHandler+0x228>)
 8001b00:	2202      	movs	r2, #2
 8001b02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				break;
 8001b06:	e047      	b.n	8001b98 <EXTI9_5_IRQHandler+0x204>
			case DAKIKA_ONDALIK:
				zaman_ayarlama.saat_ayar_digit = DAKIKA_BIRLIK;
 8001b08:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <EXTI9_5_IRQHandler+0x228>)
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				break;
 8001b10:	e042      	b.n	8001b98 <EXTI9_5_IRQHandler+0x204>
			case DAKIKA_BIRLIK:
				zaman_ayarlama.saat_ayar_digit = SANIYE_ONDALIK;
 8001b12:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <EXTI9_5_IRQHandler+0x228>)
 8001b14:	2204      	movs	r2, #4
 8001b16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				break;
 8001b1a:	e03d      	b.n	8001b98 <EXTI9_5_IRQHandler+0x204>
			case SANIYE_ONDALIK:
				zaman_ayarlama.saat_ayar_digit = SANIYE_BIRLIK;
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <EXTI9_5_IRQHandler+0x228>)
 8001b1e:	2205      	movs	r2, #5
 8001b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				break;
 8001b24:	e038      	b.n	8001b98 <EXTI9_5_IRQHandler+0x204>
			case SANIYE_BIRLIK:
				zaman_ayarlama.saat_ayar_digit = SAAT_ONDALIK;
 8001b26:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <EXTI9_5_IRQHandler+0x228>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				ds3231_zaman_ayarla(&hi2c1, 0xD0, zaman_ayarlama);
 8001b2e:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <EXTI9_5_IRQHandler+0x228>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	f04f 0800 	mov.w	r8, #0
 8001b36:	4690      	mov	r8, r2
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	f04f 0e00 	mov.w	lr, #0
 8001b3e:	4696      	mov	lr, r2
 8001b40:	f103 0408 	add.w	r4, r3, #8
 8001b44:	466e      	mov	r6, sp
 8001b46:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8001b4a:	4635      	mov	r5, r6
 8001b4c:	4623      	mov	r3, r4
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	6859      	ldr	r1, [r3, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b58:	3410      	adds	r4, #16
 8001b5a:	3610      	adds	r6, #16
 8001b5c:	4564      	cmp	r4, ip
 8001b5e:	d1f4      	bne.n	8001b4a <EXTI9_5_IRQHandler+0x1b6>
 8001b60:	4633      	mov	r3, r6
 8001b62:	4622      	mov	r2, r4
 8001b64:	6810      	ldr	r0, [r2, #0]
 8001b66:	6851      	ldr	r1, [r2, #4]
 8001b68:	c303      	stmia	r3!, {r0, r1}
 8001b6a:	4642      	mov	r2, r8
 8001b6c:	4673      	mov	r3, lr
 8001b6e:	21d0      	movs	r1, #208	; 0xd0
 8001b70:	4813      	ldr	r0, [pc, #76]	; (8001bc0 <EXTI9_5_IRQHandler+0x22c>)
 8001b72:	f7fe fb81 	bl	8000278 <ds3231_zaman_ayarla>
				zaman_ayarlama.saniye = 0;
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <EXTI9_5_IRQHandler+0x228>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	709a      	strb	r2, [r3, #2]
				zaman_ayarlama.saat   = 0;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <EXTI9_5_IRQHandler+0x228>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
				zaman_ayarlama.dakika = 0;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <EXTI9_5_IRQHandler+0x228>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	705a      	strb	r2, [r3, #1]
				lcd.menu = ANA_SAYFA;
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	709a      	strb	r2, [r3, #2]
				lcd.secili = 1;
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <EXTI9_5_IRQHandler+0x224>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	705a      	strb	r2, [r3, #1]
				break;
 8001b94:	e000      	b.n	8001b98 <EXTI9_5_IRQHandler+0x204>
			default:
				break;
 8001b96:	bf00      	nop
			}
			break;
 8001b98:	e000      	b.n	8001b9c <EXTI9_5_IRQHandler+0x208>
		default:
			break;
 8001b9a:	bf00      	nop
		}
		HAL_TIM_Base_Start_IT(&htim1);
 8001b9c:	4809      	ldr	r0, [pc, #36]	; (8001bc4 <EXTI9_5_IRQHandler+0x230>)
 8001b9e:	f002 fc41 	bl	8004424 <HAL_TIM_Base_Start_IT>
		timer_durum = 0;
 8001ba2:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <EXTI9_5_IRQHandler+0x220>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	}
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bb0:	20000660 	.word	0x20000660
 8001bb4:	200004ac 	.word	0x200004ac
 8001bb8:	200004a8 	.word	0x200004a8
 8001bbc:	20000530 	.word	0x20000530
 8001bc0:	200005b8 	.word	0x200005b8
 8001bc4:	200006a8 	.word	0x200006a8

08001bc8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <TIM1_BRK_IRQHandler+0x10>)
 8001bce:	f002 fca9 	bl	8004524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200006a8 	.word	0x200006a8

08001bdc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <TIM1_UP_IRQHandler+0x10>)
 8001be2:	f002 fc9f 	bl	8004524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200006a8 	.word	0x200006a8

08001bf0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001bf6:	f002 fc95 	bl	8004524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200006a8 	.word	0x200006a8

08001c04 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <TIM1_CC_IRQHandler+0x10>)
 8001c0a:	f002 fc8b 	bl	8004524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200006a8 	.word	0x200006a8

08001c18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <TIM2_IRQHandler+0x10>)
 8001c1e:	f002 fc81 	bl	8004524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200006f0 	.word	0x200006f0

08001c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <_sbrk+0x5c>)
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <_sbrk+0x60>)
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <_sbrk+0x64>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <_sbrk+0x68>)
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d207      	bcs.n	8001c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c5c:	f002 ffae 	bl	8004bbc <__errno>
 8001c60:	4602      	mov	r2, r0
 8001c62:	230c      	movs	r3, #12
 8001c64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	e009      	b.n	8001c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <_sbrk+0x64>)
 8001c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20005000 	.word	0x20005000
 8001c8c:	00000400 	.word	0x00000400
 8001c90:	2000049c 	.word	0x2000049c
 8001c94:	20000740 	.word	0x20000740

08001c98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ca4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001ca6:	e003      	b.n	8001cb0 <LoopCopyDataInit>

08001ca8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001caa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001cac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001cae:	3104      	adds	r1, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001cb0:	480a      	ldr	r0, [pc, #40]	; (8001cdc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001cb4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001cb6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001cb8:	d3f6      	bcc.n	8001ca8 <CopyDataInit>
  ldr r2, =_sbss
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001cbc:	e002      	b.n	8001cc4 <LoopFillZerobss>

08001cbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001cc0:	f842 3b04 	str.w	r3, [r2], #4

08001cc4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001cc6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001cc8:	d3f9      	bcc.n	8001cbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cca:	f7ff ffe5 	bl	8001c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cce:	f002 ff7b 	bl	8004bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cd2:	f7fe fdf1 	bl	80008b8 <main>
  bx lr
 8001cd6:	4770      	bx	lr
  ldr r3, =_sidata
 8001cd8:	08006324 	.word	0x08006324
  ldr r0, =_sdata
 8001cdc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ce0:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001ce4:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001ce8:	20000740 	.word	0x20000740

08001cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC1_2_IRQHandler>
	...

08001cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_Init+0x28>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <HAL_Init+0x28>)
 8001cfa:	f043 0310 	orr.w	r3, r3, #16
 8001cfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d00:	2003      	movs	r0, #3
 8001d02:	f000 f945 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f000 f808 	bl	8001d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d0c:	f7ff fb76 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40022000 	.word	0x40022000

08001d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_InitTick+0x54>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_InitTick+0x58>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f95d 	bl	8001ffa <HAL_SYSTICK_Config>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00e      	b.n	8001d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b0f      	cmp	r3, #15
 8001d4e:	d80a      	bhi.n	8001d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d50:	2200      	movs	r2, #0
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f000 f925 	bl	8001fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d5c:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <HAL_InitTick+0x5c>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20000010 	.word	0x20000010
 8001d78:	2000000c 	.word	0x2000000c

08001d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_IncTick+0x1c>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_IncTick+0x20>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a03      	ldr	r2, [pc, #12]	; (8001d9c <HAL_IncTick+0x20>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	20000010 	.word	0x20000010
 8001d9c:	20000738 	.word	0x20000738

08001da0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return uwTick;
 8001da4:	4b02      	ldr	r3, [pc, #8]	; (8001db0 <HAL_GetTick+0x10>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	20000738 	.word	0x20000738

08001db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff fff0 	bl	8001da0 <HAL_GetTick>
 8001dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d005      	beq.n	8001dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_Delay+0x40>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dda:	bf00      	nop
 8001ddc:	f7ff ffe0 	bl	8001da0 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d8f7      	bhi.n	8001ddc <HAL_Delay+0x28>
  {
  }
}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000010 	.word	0x20000010

08001df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e14:	4013      	ands	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2a:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	60d3      	str	r3, [r2, #12]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <__NVIC_GetPriorityGrouping+0x18>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	f003 0307 	and.w	r3, r3, #7
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db0b      	blt.n	8001e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	4906      	ldr	r1, [pc, #24]	; (8001e90 <__NVIC_EnableIRQ+0x34>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db0a      	blt.n	8001ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	490c      	ldr	r1, [pc, #48]	; (8001ee0 <__NVIC_SetPriority+0x4c>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ebc:	e00a      	b.n	8001ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <__NVIC_SetPriority+0x50>)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	3b04      	subs	r3, #4
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	761a      	strb	r2, [r3, #24]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000e100 	.word	0xe000e100
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f1c3 0307 	rsb	r3, r3, #7
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	bf28      	it	cs
 8001f06:	2304      	movcs	r3, #4
 8001f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d902      	bls.n	8001f18 <NVIC_EncodePriority+0x30>
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3b03      	subs	r3, #3
 8001f16:	e000      	b.n	8001f1a <NVIC_EncodePriority+0x32>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	4313      	orrs	r3, r2
         );
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00f      	b.n	8001f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <SysTick_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f7ff ff90 	bl	8001e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <SysTick_Config+0x40>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <SysTick_Config+0x40>)
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff2d 	bl	8001df8 <__NVIC_SetPriorityGrouping>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb8:	f7ff ff42 	bl	8001e40 <__NVIC_GetPriorityGrouping>
 8001fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff ff90 	bl	8001ee8 <NVIC_EncodePriority>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff5f 	bl	8001e94 <__NVIC_SetPriority>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff35 	bl	8001e5c <__NVIC_EnableIRQ>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ffa2 	bl	8001f4c <SysTick_Config>
 8002008:	4603      	mov	r3, r0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e043      	b.n	80020b2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <HAL_DMA_Init+0xa8>)
 8002032:	4413      	add	r3, r2
 8002034:	4a22      	ldr	r2, [pc, #136]	; (80020c0 <HAL_DMA_Init+0xac>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	009a      	lsls	r2, r3, #2
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <HAL_DMA_Init+0xb0>)
 8002046:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800205e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002062:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800206c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	bffdfff8 	.word	0xbffdfff8
 80020c0:	cccccccd 	.word	0xcccccccd
 80020c4:	40020000 	.word	0x40020000

080020c8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e046      	b.n	8002168 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_DMA_DeInit+0xac>)
 8002112:	4413      	add	r3, r2
 8002114:	4a18      	ldr	r2, [pc, #96]	; (8002178 <HAL_DMA_DeInit+0xb0>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	009a      	lsls	r2, r3, #2
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a15      	ldr	r2, [pc, #84]	; (800217c <HAL_DMA_DeInit+0xb4>)
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002130:	2101      	movs	r1, #1
 8002132:	fa01 f202 	lsl.w	r2, r1, r2
 8002136:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	bffdfff8 	.word	0xbffdfff8
 8002178:	cccccccd 	.word	0xcccccccd
 800217c:	40020000 	.word	0x40020000

08002180 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	2204      	movs	r2, #4
 800219e:	409a      	lsls	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d04f      	beq.n	8002248 <HAL_DMA_IRQHandler+0xc8>
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d04a      	beq.n	8002248 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d107      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0204 	bic.w	r2, r2, #4
 80021ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a66      	ldr	r2, [pc, #408]	; (8002370 <HAL_DMA_IRQHandler+0x1f0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d029      	beq.n	800222e <HAL_DMA_IRQHandler+0xae>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a65      	ldr	r2, [pc, #404]	; (8002374 <HAL_DMA_IRQHandler+0x1f4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d022      	beq.n	800222a <HAL_DMA_IRQHandler+0xaa>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a63      	ldr	r2, [pc, #396]	; (8002378 <HAL_DMA_IRQHandler+0x1f8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d01a      	beq.n	8002224 <HAL_DMA_IRQHandler+0xa4>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a62      	ldr	r2, [pc, #392]	; (800237c <HAL_DMA_IRQHandler+0x1fc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d012      	beq.n	800221e <HAL_DMA_IRQHandler+0x9e>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a60      	ldr	r2, [pc, #384]	; (8002380 <HAL_DMA_IRQHandler+0x200>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00a      	beq.n	8002218 <HAL_DMA_IRQHandler+0x98>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a5f      	ldr	r2, [pc, #380]	; (8002384 <HAL_DMA_IRQHandler+0x204>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d102      	bne.n	8002212 <HAL_DMA_IRQHandler+0x92>
 800220c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002210:	e00e      	b.n	8002230 <HAL_DMA_IRQHandler+0xb0>
 8002212:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002216:	e00b      	b.n	8002230 <HAL_DMA_IRQHandler+0xb0>
 8002218:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800221c:	e008      	b.n	8002230 <HAL_DMA_IRQHandler+0xb0>
 800221e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002222:	e005      	b.n	8002230 <HAL_DMA_IRQHandler+0xb0>
 8002224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002228:	e002      	b.n	8002230 <HAL_DMA_IRQHandler+0xb0>
 800222a:	2340      	movs	r3, #64	; 0x40
 800222c:	e000      	b.n	8002230 <HAL_DMA_IRQHandler+0xb0>
 800222e:	2304      	movs	r3, #4
 8002230:	4a55      	ldr	r2, [pc, #340]	; (8002388 <HAL_DMA_IRQHandler+0x208>)
 8002232:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8094 	beq.w	8002366 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002246:	e08e      	b.n	8002366 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	2202      	movs	r2, #2
 800224e:	409a      	lsls	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d056      	beq.n	8002306 <HAL_DMA_IRQHandler+0x186>
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d051      	beq.n	8002306 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0320 	and.w	r3, r3, #32
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10b      	bne.n	8002288 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 020a 	bic.w	r2, r2, #10
 800227e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a38      	ldr	r2, [pc, #224]	; (8002370 <HAL_DMA_IRQHandler+0x1f0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d029      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x166>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a37      	ldr	r2, [pc, #220]	; (8002374 <HAL_DMA_IRQHandler+0x1f4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d022      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x162>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a35      	ldr	r2, [pc, #212]	; (8002378 <HAL_DMA_IRQHandler+0x1f8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d01a      	beq.n	80022dc <HAL_DMA_IRQHandler+0x15c>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a34      	ldr	r2, [pc, #208]	; (800237c <HAL_DMA_IRQHandler+0x1fc>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d012      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x156>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a32      	ldr	r2, [pc, #200]	; (8002380 <HAL_DMA_IRQHandler+0x200>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00a      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x150>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a31      	ldr	r2, [pc, #196]	; (8002384 <HAL_DMA_IRQHandler+0x204>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d102      	bne.n	80022ca <HAL_DMA_IRQHandler+0x14a>
 80022c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022c8:	e00e      	b.n	80022e8 <HAL_DMA_IRQHandler+0x168>
 80022ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ce:	e00b      	b.n	80022e8 <HAL_DMA_IRQHandler+0x168>
 80022d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d4:	e008      	b.n	80022e8 <HAL_DMA_IRQHandler+0x168>
 80022d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022da:	e005      	b.n	80022e8 <HAL_DMA_IRQHandler+0x168>
 80022dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022e0:	e002      	b.n	80022e8 <HAL_DMA_IRQHandler+0x168>
 80022e2:	2320      	movs	r3, #32
 80022e4:	e000      	b.n	80022e8 <HAL_DMA_IRQHandler+0x168>
 80022e6:	2302      	movs	r3, #2
 80022e8:	4a27      	ldr	r2, [pc, #156]	; (8002388 <HAL_DMA_IRQHandler+0x208>)
 80022ea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d034      	beq.n	8002366 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002304:	e02f      	b.n	8002366 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	2208      	movs	r2, #8
 800230c:	409a      	lsls	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d028      	beq.n	8002368 <HAL_DMA_IRQHandler+0x1e8>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d023      	beq.n	8002368 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 020e 	bic.w	r2, r2, #14
 800232e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002338:	2101      	movs	r1, #1
 800233a:	fa01 f202 	lsl.w	r2, r1, r2
 800233e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	2b00      	cmp	r3, #0
 800235c:	d004      	beq.n	8002368 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	4798      	blx	r3
    }
  }
  return;
 8002366:	bf00      	nop
 8002368:	bf00      	nop
}
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40020008 	.word	0x40020008
 8002374:	4002001c 	.word	0x4002001c
 8002378:	40020030 	.word	0x40020030
 800237c:	40020044 	.word	0x40020044
 8002380:	40020058 	.word	0x40020058
 8002384:	4002006c 	.word	0x4002006c
 8002388:	40020000 	.word	0x40020000

0800238c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800238c:	b480      	push	{r7}
 800238e:	b08b      	sub	sp, #44	; 0x2c
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800239e:	e127      	b.n	80025f0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023a0:	2201      	movs	r2, #1
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	f040 8116 	bne.w	80025ea <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b12      	cmp	r3, #18
 80023c4:	d034      	beq.n	8002430 <HAL_GPIO_Init+0xa4>
 80023c6:	2b12      	cmp	r3, #18
 80023c8:	d80d      	bhi.n	80023e6 <HAL_GPIO_Init+0x5a>
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d02b      	beq.n	8002426 <HAL_GPIO_Init+0x9a>
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d804      	bhi.n	80023dc <HAL_GPIO_Init+0x50>
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d031      	beq.n	800243a <HAL_GPIO_Init+0xae>
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d01c      	beq.n	8002414 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023da:	e048      	b.n	800246e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d043      	beq.n	8002468 <HAL_GPIO_Init+0xdc>
 80023e0:	2b11      	cmp	r3, #17
 80023e2:	d01b      	beq.n	800241c <HAL_GPIO_Init+0x90>
          break;
 80023e4:	e043      	b.n	800246e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023e6:	4a89      	ldr	r2, [pc, #548]	; (800260c <HAL_GPIO_Init+0x280>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d026      	beq.n	800243a <HAL_GPIO_Init+0xae>
 80023ec:	4a87      	ldr	r2, [pc, #540]	; (800260c <HAL_GPIO_Init+0x280>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d806      	bhi.n	8002400 <HAL_GPIO_Init+0x74>
 80023f2:	4a87      	ldr	r2, [pc, #540]	; (8002610 <HAL_GPIO_Init+0x284>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d020      	beq.n	800243a <HAL_GPIO_Init+0xae>
 80023f8:	4a86      	ldr	r2, [pc, #536]	; (8002614 <HAL_GPIO_Init+0x288>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01d      	beq.n	800243a <HAL_GPIO_Init+0xae>
          break;
 80023fe:	e036      	b.n	800246e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002400:	4a85      	ldr	r2, [pc, #532]	; (8002618 <HAL_GPIO_Init+0x28c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d019      	beq.n	800243a <HAL_GPIO_Init+0xae>
 8002406:	4a85      	ldr	r2, [pc, #532]	; (800261c <HAL_GPIO_Init+0x290>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d016      	beq.n	800243a <HAL_GPIO_Init+0xae>
 800240c:	4a84      	ldr	r2, [pc, #528]	; (8002620 <HAL_GPIO_Init+0x294>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_GPIO_Init+0xae>
          break;
 8002412:	e02c      	b.n	800246e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	623b      	str	r3, [r7, #32]
          break;
 800241a:	e028      	b.n	800246e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	3304      	adds	r3, #4
 8002422:	623b      	str	r3, [r7, #32]
          break;
 8002424:	e023      	b.n	800246e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	3308      	adds	r3, #8
 800242c:	623b      	str	r3, [r7, #32]
          break;
 800242e:	e01e      	b.n	800246e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	330c      	adds	r3, #12
 8002436:	623b      	str	r3, [r7, #32]
          break;
 8002438:	e019      	b.n	800246e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002442:	2304      	movs	r3, #4
 8002444:	623b      	str	r3, [r7, #32]
          break;
 8002446:	e012      	b.n	800246e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d105      	bne.n	800245c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002450:	2308      	movs	r3, #8
 8002452:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69fa      	ldr	r2, [r7, #28]
 8002458:	611a      	str	r2, [r3, #16]
          break;
 800245a:	e008      	b.n	800246e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800245c:	2308      	movs	r3, #8
 800245e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	615a      	str	r2, [r3, #20]
          break;
 8002466:	e002      	b.n	800246e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002468:	2300      	movs	r3, #0
 800246a:	623b      	str	r3, [r7, #32]
          break;
 800246c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2bff      	cmp	r3, #255	; 0xff
 8002472:	d801      	bhi.n	8002478 <HAL_GPIO_Init+0xec>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	e001      	b.n	800247c <HAL_GPIO_Init+0xf0>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2bff      	cmp	r3, #255	; 0xff
 8002482:	d802      	bhi.n	800248a <HAL_GPIO_Init+0xfe>
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	e002      	b.n	8002490 <HAL_GPIO_Init+0x104>
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	3b08      	subs	r3, #8
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	210f      	movs	r1, #15
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	401a      	ands	r2, r3
 80024a2:	6a39      	ldr	r1, [r7, #32]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	431a      	orrs	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8096 	beq.w	80025ea <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024be:	4b59      	ldr	r3, [pc, #356]	; (8002624 <HAL_GPIO_Init+0x298>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	4a58      	ldr	r2, [pc, #352]	; (8002624 <HAL_GPIO_Init+0x298>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6193      	str	r3, [r2, #24]
 80024ca:	4b56      	ldr	r3, [pc, #344]	; (8002624 <HAL_GPIO_Init+0x298>)
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024d6:	4a54      	ldr	r2, [pc, #336]	; (8002628 <HAL_GPIO_Init+0x29c>)
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3302      	adds	r3, #2
 80024de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4013      	ands	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4b      	ldr	r2, [pc, #300]	; (800262c <HAL_GPIO_Init+0x2a0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d013      	beq.n	800252a <HAL_GPIO_Init+0x19e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4a      	ldr	r2, [pc, #296]	; (8002630 <HAL_GPIO_Init+0x2a4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00d      	beq.n	8002526 <HAL_GPIO_Init+0x19a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a49      	ldr	r2, [pc, #292]	; (8002634 <HAL_GPIO_Init+0x2a8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d007      	beq.n	8002522 <HAL_GPIO_Init+0x196>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a48      	ldr	r2, [pc, #288]	; (8002638 <HAL_GPIO_Init+0x2ac>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_GPIO_Init+0x192>
 800251a:	2303      	movs	r3, #3
 800251c:	e006      	b.n	800252c <HAL_GPIO_Init+0x1a0>
 800251e:	2304      	movs	r3, #4
 8002520:	e004      	b.n	800252c <HAL_GPIO_Init+0x1a0>
 8002522:	2302      	movs	r3, #2
 8002524:	e002      	b.n	800252c <HAL_GPIO_Init+0x1a0>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_GPIO_Init+0x1a0>
 800252a:	2300      	movs	r3, #0
 800252c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252e:	f002 0203 	and.w	r2, r2, #3
 8002532:	0092      	lsls	r2, r2, #2
 8002534:	4093      	lsls	r3, r2
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800253c:	493a      	ldr	r1, [pc, #232]	; (8002628 <HAL_GPIO_Init+0x29c>)
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d006      	beq.n	8002564 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002556:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_GPIO_Init+0x2b0>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4938      	ldr	r1, [pc, #224]	; (800263c <HAL_GPIO_Init+0x2b0>)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
 8002562:	e006      	b.n	8002572 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002564:	4b35      	ldr	r3, [pc, #212]	; (800263c <HAL_GPIO_Init+0x2b0>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	43db      	mvns	r3, r3
 800256c:	4933      	ldr	r1, [pc, #204]	; (800263c <HAL_GPIO_Init+0x2b0>)
 800256e:	4013      	ands	r3, r2
 8002570:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d006      	beq.n	800258c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800257e:	4b2f      	ldr	r3, [pc, #188]	; (800263c <HAL_GPIO_Init+0x2b0>)
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	492e      	ldr	r1, [pc, #184]	; (800263c <HAL_GPIO_Init+0x2b0>)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	604b      	str	r3, [r1, #4]
 800258a:	e006      	b.n	800259a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800258c:	4b2b      	ldr	r3, [pc, #172]	; (800263c <HAL_GPIO_Init+0x2b0>)
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	43db      	mvns	r3, r3
 8002594:	4929      	ldr	r1, [pc, #164]	; (800263c <HAL_GPIO_Init+0x2b0>)
 8002596:	4013      	ands	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d006      	beq.n	80025b4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025a6:	4b25      	ldr	r3, [pc, #148]	; (800263c <HAL_GPIO_Init+0x2b0>)
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	4924      	ldr	r1, [pc, #144]	; (800263c <HAL_GPIO_Init+0x2b0>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
 80025b2:	e006      	b.n	80025c2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025b4:	4b21      	ldr	r3, [pc, #132]	; (800263c <HAL_GPIO_Init+0x2b0>)
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	491f      	ldr	r1, [pc, #124]	; (800263c <HAL_GPIO_Init+0x2b0>)
 80025be:	4013      	ands	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025ce:	4b1b      	ldr	r3, [pc, #108]	; (800263c <HAL_GPIO_Init+0x2b0>)
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	491a      	ldr	r1, [pc, #104]	; (800263c <HAL_GPIO_Init+0x2b0>)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60cb      	str	r3, [r1, #12]
 80025da:	e006      	b.n	80025ea <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025dc:	4b17      	ldr	r3, [pc, #92]	; (800263c <HAL_GPIO_Init+0x2b0>)
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	4915      	ldr	r1, [pc, #84]	; (800263c <HAL_GPIO_Init+0x2b0>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	3301      	adds	r3, #1
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	fa22 f303 	lsr.w	r3, r2, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f47f aed0 	bne.w	80023a0 <HAL_GPIO_Init+0x14>
  }
}
 8002600:	bf00      	nop
 8002602:	372c      	adds	r7, #44	; 0x2c
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	10210000 	.word	0x10210000
 8002610:	10110000 	.word	0x10110000
 8002614:	10120000 	.word	0x10120000
 8002618:	10310000 	.word	0x10310000
 800261c:	10320000 	.word	0x10320000
 8002620:	10220000 	.word	0x10220000
 8002624:	40021000 	.word	0x40021000
 8002628:	40010000 	.word	0x40010000
 800262c:	40010800 	.word	0x40010800
 8002630:	40010c00 	.word	0x40010c00
 8002634:	40011000 	.word	0x40011000
 8002638:	40011400 	.word	0x40011400
 800263c:	40010400 	.word	0x40010400

08002640 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800264e:	e09a      	b.n	8002786 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002650:	2201      	movs	r2, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 808d 	beq.w	8002780 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002666:	4a4e      	ldr	r2, [pc, #312]	; (80027a0 <HAL_GPIO_DeInit+0x160>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4013      	ands	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a46      	ldr	r2, [pc, #280]	; (80027a4 <HAL_GPIO_DeInit+0x164>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d013      	beq.n	80026b8 <HAL_GPIO_DeInit+0x78>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a45      	ldr	r2, [pc, #276]	; (80027a8 <HAL_GPIO_DeInit+0x168>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00d      	beq.n	80026b4 <HAL_GPIO_DeInit+0x74>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a44      	ldr	r2, [pc, #272]	; (80027ac <HAL_GPIO_DeInit+0x16c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d007      	beq.n	80026b0 <HAL_GPIO_DeInit+0x70>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a43      	ldr	r2, [pc, #268]	; (80027b0 <HAL_GPIO_DeInit+0x170>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_GPIO_DeInit+0x6c>
 80026a8:	2303      	movs	r3, #3
 80026aa:	e006      	b.n	80026ba <HAL_GPIO_DeInit+0x7a>
 80026ac:	2304      	movs	r3, #4
 80026ae:	e004      	b.n	80026ba <HAL_GPIO_DeInit+0x7a>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e002      	b.n	80026ba <HAL_GPIO_DeInit+0x7a>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <HAL_GPIO_DeInit+0x7a>
 80026b8:	2300      	movs	r3, #0
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	f002 0203 	and.w	r2, r2, #3
 80026c0:	0092      	lsls	r2, r2, #2
 80026c2:	4093      	lsls	r3, r2
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d132      	bne.n	8002730 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	220f      	movs	r2, #15
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80026da:	4a31      	ldr	r2, [pc, #196]	; (80027a0 <HAL_GPIO_DeInit+0x160>)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3302      	adds	r3, #2
 80026e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	43da      	mvns	r2, r3
 80026ea:	482d      	ldr	r0, [pc, #180]	; (80027a0 <HAL_GPIO_DeInit+0x160>)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	089b      	lsrs	r3, r3, #2
 80026f0:	400a      	ands	r2, r1
 80026f2:	3302      	adds	r3, #2
 80026f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80026f8:	4b2e      	ldr	r3, [pc, #184]	; (80027b4 <HAL_GPIO_DeInit+0x174>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	43db      	mvns	r3, r3
 8002700:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_GPIO_DeInit+0x174>)
 8002702:	4013      	ands	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002706:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <HAL_GPIO_DeInit+0x174>)
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	43db      	mvns	r3, r3
 800270e:	4929      	ldr	r1, [pc, #164]	; (80027b4 <HAL_GPIO_DeInit+0x174>)
 8002710:	4013      	ands	r3, r2
 8002712:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_GPIO_DeInit+0x174>)
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	43db      	mvns	r3, r3
 800271c:	4925      	ldr	r1, [pc, #148]	; (80027b4 <HAL_GPIO_DeInit+0x174>)
 800271e:	4013      	ands	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002722:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <HAL_GPIO_DeInit+0x174>)
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	43db      	mvns	r3, r3
 800272a:	4922      	ldr	r1, [pc, #136]	; (80027b4 <HAL_GPIO_DeInit+0x174>)
 800272c:	4013      	ands	r3, r2
 800272e:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2bff      	cmp	r3, #255	; 0xff
 8002734:	d801      	bhi.n	800273a <HAL_GPIO_DeInit+0xfa>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	e001      	b.n	800273e <HAL_GPIO_DeInit+0xfe>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3304      	adds	r3, #4
 800273e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2bff      	cmp	r3, #255	; 0xff
 8002744:	d802      	bhi.n	800274c <HAL_GPIO_DeInit+0x10c>
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	e002      	b.n	8002752 <HAL_GPIO_DeInit+0x112>
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	3b08      	subs	r3, #8
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	210f      	movs	r1, #15
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	fa01 f303 	lsl.w	r3, r1, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	401a      	ands	r2, r3
 8002764:	2104      	movs	r1, #4
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	fa01 f303 	lsl.w	r3, r1, r3
 800276c:	431a      	orrs	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	43db      	mvns	r3, r3
 800277a:	401a      	ands	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	3301      	adds	r3, #1
 8002784:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	f47f af5e 	bne.w	8002650 <HAL_GPIO_DeInit+0x10>
  }
}
 8002794:	bf00      	nop
 8002796:	3724      	adds	r7, #36	; 0x24
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40010000 	.word	0x40010000
 80027a4:	40010800 	.word	0x40010800
 80027a8:	40010c00 	.word	0x40010c00
 80027ac:	40011000 	.word	0x40011000
 80027b0:	40011400 	.word	0x40011400
 80027b4:	40010400 	.word	0x40010400

080027b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	807b      	strh	r3, [r7, #2]
 80027c4:	4613      	mov	r3, r2
 80027c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027c8:	787b      	ldrb	r3, [r7, #1]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ce:	887a      	ldrh	r2, [r7, #2]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027d4:	e003      	b.n	80027de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027d6:	887b      	ldrh	r3, [r7, #2]
 80027d8:	041a      	lsls	r2, r3, #16
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	611a      	str	r2, [r3, #16]
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	041a      	lsls	r2, r3, #16
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	43d9      	mvns	r1, r3
 8002806:	887b      	ldrh	r3, [r7, #2]
 8002808:	400b      	ands	r3, r1
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	611a      	str	r2, [r3, #16]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
	...

0800281c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d006      	beq.n	8002840 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002832:	4a05      	ldr	r2, [pc, #20]	; (8002848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f806 	bl	800284c <HAL_GPIO_EXTI_Callback>
  }
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40010400 	.word	0x40010400

0800284c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e11f      	b.n	8002ab2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe fdea 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2224      	movs	r2, #36	; 0x24
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028c4:	f001 fd2c 	bl	8004320 <HAL_RCC_GetPCLK1Freq>
 80028c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4a7b      	ldr	r2, [pc, #492]	; (8002abc <HAL_I2C_Init+0x25c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d807      	bhi.n	80028e4 <HAL_I2C_Init+0x84>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a7a      	ldr	r2, [pc, #488]	; (8002ac0 <HAL_I2C_Init+0x260>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	bf94      	ite	ls
 80028dc:	2301      	movls	r3, #1
 80028de:	2300      	movhi	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	e006      	b.n	80028f2 <HAL_I2C_Init+0x92>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4a77      	ldr	r2, [pc, #476]	; (8002ac4 <HAL_I2C_Init+0x264>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	bf94      	ite	ls
 80028ec:	2301      	movls	r3, #1
 80028ee:	2300      	movhi	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0db      	b.n	8002ab2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4a72      	ldr	r2, [pc, #456]	; (8002ac8 <HAL_I2C_Init+0x268>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	0c9b      	lsrs	r3, r3, #18
 8002904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a64      	ldr	r2, [pc, #400]	; (8002abc <HAL_I2C_Init+0x25c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d802      	bhi.n	8002934 <HAL_I2C_Init+0xd4>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	3301      	adds	r3, #1
 8002932:	e009      	b.n	8002948 <HAL_I2C_Init+0xe8>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	4a63      	ldr	r2, [pc, #396]	; (8002acc <HAL_I2C_Init+0x26c>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	3301      	adds	r3, #1
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	430b      	orrs	r3, r1
 800294e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800295a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4956      	ldr	r1, [pc, #344]	; (8002abc <HAL_I2C_Init+0x25c>)
 8002964:	428b      	cmp	r3, r1
 8002966:	d80d      	bhi.n	8002984 <HAL_I2C_Init+0x124>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1e59      	subs	r1, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	fbb1 f3f3 	udiv	r3, r1, r3
 8002976:	3301      	adds	r3, #1
 8002978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297c:	2b04      	cmp	r3, #4
 800297e:	bf38      	it	cc
 8002980:	2304      	movcc	r3, #4
 8002982:	e04f      	b.n	8002a24 <HAL_I2C_Init+0x1c4>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d111      	bne.n	80029b0 <HAL_I2C_Init+0x150>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1e58      	subs	r0, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	440b      	add	r3, r1
 800299a:	fbb0 f3f3 	udiv	r3, r0, r3
 800299e:	3301      	adds	r3, #1
 80029a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e012      	b.n	80029d6 <HAL_I2C_Init+0x176>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1e58      	subs	r0, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	0099      	lsls	r1, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c6:	3301      	adds	r3, #1
 80029c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_Init+0x17e>
 80029da:	2301      	movs	r3, #1
 80029dc:	e022      	b.n	8002a24 <HAL_I2C_Init+0x1c4>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10e      	bne.n	8002a04 <HAL_I2C_Init+0x1a4>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1e58      	subs	r0, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6859      	ldr	r1, [r3, #4]
 80029ee:	460b      	mov	r3, r1
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	440b      	add	r3, r1
 80029f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f8:	3301      	adds	r3, #1
 80029fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a02:	e00f      	b.n	8002a24 <HAL_I2C_Init+0x1c4>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1e58      	subs	r0, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	0099      	lsls	r1, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	6809      	ldr	r1, [r1, #0]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69da      	ldr	r2, [r3, #28]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6911      	ldr	r1, [r2, #16]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68d2      	ldr	r2, [r2, #12]
 8002a5e:	4311      	orrs	r1, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	430b      	orrs	r3, r1
 8002a66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	000186a0 	.word	0x000186a0
 8002ac0:	001e847f 	.word	0x001e847f
 8002ac4:	003d08ff 	.word	0x003d08ff
 8002ac8:	431bde83 	.word	0x431bde83
 8002acc:	10624dd3 	.word	0x10624dd3

08002ad0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e021      	b.n	8002b26 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2224      	movs	r2, #36	; 0x24
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0201 	bic.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fe fd46 	bl	800158c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	817b      	strh	r3, [r7, #10]
 8002b40:	4613      	mov	r3, r2
 8002b42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b44:	f7ff f92c 	bl	8001da0 <HAL_GetTick>
 8002b48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	f040 80e0 	bne.w	8002d18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	2319      	movs	r3, #25
 8002b5e:	2201      	movs	r2, #1
 8002b60:	4970      	ldr	r1, [pc, #448]	; (8002d24 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 fe2a 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e0d3      	b.n	8002d1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_I2C_Master_Transmit+0x50>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e0cc      	b.n	8002d1a <HAL_I2C_Master_Transmit+0x1ea>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d007      	beq.n	8002ba6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2221      	movs	r2, #33	; 0x21
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2210      	movs	r2, #16
 8002bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	893a      	ldrh	r2, [r7, #8]
 8002bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4a50      	ldr	r2, [pc, #320]	; (8002d28 <HAL_I2C_Master_Transmit+0x1f8>)
 8002be6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002be8:	8979      	ldrh	r1, [r7, #10]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	6a3a      	ldr	r2, [r7, #32]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fbfe 	bl	80033f0 <I2C_MasterRequestWrite>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e08d      	b.n	8002d1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c14:	e066      	b.n	8002ce4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	6a39      	ldr	r1, [r7, #32]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fea4 	bl	8003968 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00d      	beq.n	8002c42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d107      	bne.n	8002c3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e06b      	b.n	8002d1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	781a      	ldrb	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d11b      	bne.n	8002cb8 <HAL_I2C_Master_Transmit+0x188>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d017      	beq.n	8002cb8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	781a      	ldrb	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	6a39      	ldr	r1, [r7, #32]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fe94 	bl	80039ea <I2C_WaitOnBTFFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00d      	beq.n	8002ce4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d107      	bne.n	8002ce0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e01a      	b.n	8002d1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d194      	bne.n	8002c16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	e000      	b.n	8002d1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d18:	2302      	movs	r3, #2
  }
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	00100002 	.word	0x00100002
 8002d28:	ffff0000 	.word	0xffff0000

08002d2c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08c      	sub	sp, #48	; 0x30
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	461a      	mov	r2, r3
 8002d38:	460b      	mov	r3, r1
 8002d3a:	817b      	strh	r3, [r7, #10]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d44:	f7ff f82c 	bl	8001da0 <HAL_GetTick>
 8002d48:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	f040 8238 	bne.w	80031c8 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	2319      	movs	r3, #25
 8002d5e:	2201      	movs	r2, #1
 8002d60:	497e      	ldr	r1, [pc, #504]	; (8002f5c <HAL_I2C_Master_Receive+0x230>)
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fd2a 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e22b      	b.n	80031ca <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_I2C_Master_Receive+0x54>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e224      	b.n	80031ca <HAL_I2C_Master_Receive+0x49e>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d007      	beq.n	8002da6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0201 	orr.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002db4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2222      	movs	r2, #34	; 0x22
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	893a      	ldrh	r2, [r7, #8]
 8002dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4a5e      	ldr	r2, [pc, #376]	; (8002f60 <HAL_I2C_Master_Receive+0x234>)
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002de8:	8979      	ldrh	r1, [r7, #10]
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fb80 	bl	80034f4 <I2C_MasterRequestRead>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e1e5      	b.n	80031ca <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d113      	bne.n	8002e2e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e1b9      	b.n	80031a2 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d11d      	bne.n	8002e72 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	61bb      	str	r3, [r7, #24]
 8002e5c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e6e:	b662      	cpsie	i
 8002e70:	e197      	b.n	80031a2 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d11d      	bne.n	8002eb6 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e8a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002eb2:	b662      	cpsie	i
 8002eb4:	e175      	b.n	80031a2 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ec4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002edc:	e161      	b.n	80031a2 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	f200 811a 	bhi.w	800311c <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d123      	bne.n	8002f38 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 fdb9 	bl	8003a6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e162      	b.n	80031ca <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f36:	e134      	b.n	80031a2 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d150      	bne.n	8002fe2 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	2200      	movs	r2, #0
 8002f48:	4906      	ldr	r1, [pc, #24]	; (8002f64 <HAL_I2C_Master_Receive+0x238>)
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 fc36 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e137      	b.n	80031ca <HAL_I2C_Master_Receive+0x49e>
 8002f5a:	bf00      	nop
 8002f5c:	00100002 	.word	0x00100002
 8002f60:	ffff0000 	.word	0xffff0000
 8002f64:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f68:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f78:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002fac:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fe0:	e0df      	b.n	80031a2 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	2200      	movs	r2, #0
 8002fea:	497a      	ldr	r1, [pc, #488]	; (80031d4 <HAL_I2C_Master_Receive+0x4a8>)
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fbe5 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0e6      	b.n	80031ca <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800300c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003040:	4b65      	ldr	r3, [pc, #404]	; (80031d8 <HAL_I2C_Master_Receive+0x4ac>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	08db      	lsrs	r3, r3, #3
 8003046:	4a65      	ldr	r2, [pc, #404]	; (80031dc <HAL_I2C_Master_Receive+0x4b0>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	0a1a      	lsrs	r2, r3, #8
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	00da      	lsls	r2, r3, #3
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	3b01      	subs	r3, #1
 800305e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d117      	bne.n	8003096 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f043 0220 	orr.w	r2, r3, #32
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003088:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e099      	b.n	80031ca <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d1da      	bne.n	800305a <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030e6:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	855a      	strh	r2, [r3, #42]	; 0x2a
 800311a:	e042      	b.n	80031a2 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fca3 	bl	8003a6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e04c      	b.n	80031ca <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b04      	cmp	r3, #4
 800316e:	d118      	bne.n	80031a2 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f47f ae99 	bne.w	8002ede <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e000      	b.n	80031ca <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
  }
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3728      	adds	r7, #40	; 0x28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	00010004 	.word	0x00010004
 80031d8:	20000008 	.word	0x20000008
 80031dc:	14f8b589 	.word	0x14f8b589

080031e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	4608      	mov	r0, r1
 80031ea:	4611      	mov	r1, r2
 80031ec:	461a      	mov	r2, r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	817b      	strh	r3, [r7, #10]
 80031f2:	460b      	mov	r3, r1
 80031f4:	813b      	strh	r3, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031fa:	f7fe fdd1 	bl	8001da0 <HAL_GetTick>
 80031fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b20      	cmp	r3, #32
 800320a:	f040 80d9 	bne.w	80033c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2319      	movs	r3, #25
 8003214:	2201      	movs	r2, #1
 8003216:	496d      	ldr	r1, [pc, #436]	; (80033cc <HAL_I2C_Mem_Write+0x1ec>)
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 facf 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
 8003226:	e0cc      	b.n	80033c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_I2C_Mem_Write+0x56>
 8003232:	2302      	movs	r3, #2
 8003234:	e0c5      	b.n	80033c2 <HAL_I2C_Mem_Write+0x1e2>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d007      	beq.n	800325c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800326a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2221      	movs	r2, #33	; 0x21
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2240      	movs	r2, #64	; 0x40
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a3a      	ldr	r2, [r7, #32]
 8003286:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800328c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a4d      	ldr	r2, [pc, #308]	; (80033d0 <HAL_I2C_Mem_Write+0x1f0>)
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800329e:	88f8      	ldrh	r0, [r7, #6]
 80032a0:	893a      	ldrh	r2, [r7, #8]
 80032a2:	8979      	ldrh	r1, [r7, #10]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	9301      	str	r3, [sp, #4]
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	4603      	mov	r3, r0
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f9ee 	bl	8003690 <I2C_RequestMemoryWrite>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d052      	beq.n	8003360 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e081      	b.n	80033c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fb50 	bl	8003968 <I2C_WaitOnTXEFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00d      	beq.n	80032ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d107      	bne.n	80032e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e06b      	b.n	80033c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	781a      	ldrb	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b04      	cmp	r3, #4
 8003326:	d11b      	bne.n	8003360 <HAL_I2C_Mem_Write+0x180>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	2b00      	cmp	r3, #0
 800332e:	d017      	beq.n	8003360 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	781a      	ldrb	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1aa      	bne.n	80032be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 fb3c 	bl	80039ea <I2C_WaitOnBTFFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00d      	beq.n	8003394 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	2b04      	cmp	r3, #4
 800337e:	d107      	bne.n	8003390 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e016      	b.n	80033c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e000      	b.n	80033c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033c0:	2302      	movs	r3, #2
  }
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	00100002 	.word	0x00100002
 80033d0:	ffff0000 	.word	0xffff0000

080033d4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e2:	b2db      	uxtb	r3, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
	...

080033f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	460b      	mov	r3, r1
 80033fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b08      	cmp	r3, #8
 800340a:	d006      	beq.n	800341a <I2C_MasterRequestWrite+0x2a>
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d003      	beq.n	800341a <I2C_MasterRequestWrite+0x2a>
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003418:	d108      	bne.n	800342c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	e00b      	b.n	8003444 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	2b12      	cmp	r3, #18
 8003432:	d107      	bne.n	8003444 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003442:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f9b3 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00d      	beq.n	8003478 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346a:	d103      	bne.n	8003474 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003472:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e035      	b.n	80034e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003480:	d108      	bne.n	8003494 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003482:	897b      	ldrh	r3, [r7, #10]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003490:	611a      	str	r2, [r3, #16]
 8003492:	e01b      	b.n	80034cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003494:	897b      	ldrh	r3, [r7, #10]
 8003496:	11db      	asrs	r3, r3, #7
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f003 0306 	and.w	r3, r3, #6
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f063 030f 	orn	r3, r3, #15
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	490e      	ldr	r1, [pc, #56]	; (80034ec <I2C_MasterRequestWrite+0xfc>)
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f9d9 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e010      	b.n	80034e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034c2:	897b      	ldrh	r3, [r7, #10]
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4907      	ldr	r1, [pc, #28]	; (80034f0 <I2C_MasterRequestWrite+0x100>)
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f9c9 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	00010008 	.word	0x00010008
 80034f0:	00010002 	.word	0x00010002

080034f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	460b      	mov	r3, r1
 8003502:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003518:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d006      	beq.n	800352e <I2C_MasterRequestRead+0x3a>
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d003      	beq.n	800352e <I2C_MasterRequestRead+0x3a>
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800352c:	d108      	bne.n	8003540 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e00b      	b.n	8003558 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	2b11      	cmp	r3, #17
 8003546:	d107      	bne.n	8003558 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003556:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f929 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00d      	beq.n	800358c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357e:	d103      	bne.n	8003588 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e079      	b.n	8003680 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003594:	d108      	bne.n	80035a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	611a      	str	r2, [r3, #16]
 80035a6:	e05f      	b.n	8003668 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035a8:	897b      	ldrh	r3, [r7, #10]
 80035aa:	11db      	asrs	r3, r3, #7
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	f003 0306 	and.w	r3, r3, #6
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f063 030f 	orn	r3, r3, #15
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4930      	ldr	r1, [pc, #192]	; (8003688 <I2C_MasterRequestRead+0x194>)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f94f 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e054      	b.n	8003680 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035d6:	897b      	ldrh	r3, [r7, #10]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4929      	ldr	r1, [pc, #164]	; (800368c <I2C_MasterRequestRead+0x198>)
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f93f 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e044      	b.n	8003680 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800361a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f8c7 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00d      	beq.n	8003650 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003642:	d103      	bne.n	800364c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800364a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e017      	b.n	8003680 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003650:	897b      	ldrh	r3, [r7, #10]
 8003652:	11db      	asrs	r3, r3, #7
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f003 0306 	and.w	r3, r3, #6
 800365a:	b2db      	uxtb	r3, r3
 800365c:	f063 030e 	orn	r3, r3, #14
 8003660:	b2da      	uxtb	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	4907      	ldr	r1, [pc, #28]	; (800368c <I2C_MasterRequestRead+0x198>)
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f8fb 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	00010008 	.word	0x00010008
 800368c:	00010002 	.word	0x00010002

08003690 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	4608      	mov	r0, r1
 800369a:	4611      	mov	r1, r2
 800369c:	461a      	mov	r2, r3
 800369e:	4603      	mov	r3, r0
 80036a0:	817b      	strh	r3, [r7, #10]
 80036a2:	460b      	mov	r3, r1
 80036a4:	813b      	strh	r3, [r7, #8]
 80036a6:	4613      	mov	r3, r2
 80036a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f878 	bl	80037bc <I2C_WaitOnFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00d      	beq.n	80036ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e0:	d103      	bne.n	80036ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e05f      	b.n	80037ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ee:	897b      	ldrh	r3, [r7, #10]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	6a3a      	ldr	r2, [r7, #32]
 8003702:	492d      	ldr	r1, [pc, #180]	; (80037b8 <I2C_RequestMemoryWrite+0x128>)
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f8b0 	bl	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e04c      	b.n	80037ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800372a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372c:	6a39      	ldr	r1, [r7, #32]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f91a 	bl	8003968 <I2C_WaitOnTXEFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00d      	beq.n	8003756 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	2b04      	cmp	r3, #4
 8003740:	d107      	bne.n	8003752 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003750:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e02b      	b.n	80037ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d105      	bne.n	8003768 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800375c:	893b      	ldrh	r3, [r7, #8]
 800375e:	b2da      	uxtb	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	611a      	str	r2, [r3, #16]
 8003766:	e021      	b.n	80037ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003768:	893b      	ldrh	r3, [r7, #8]
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	b29b      	uxth	r3, r3
 800376e:	b2da      	uxtb	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	6a39      	ldr	r1, [r7, #32]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f8f4 	bl	8003968 <I2C_WaitOnTXEFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00d      	beq.n	80037a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	2b04      	cmp	r3, #4
 800378c:	d107      	bne.n	800379e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e005      	b.n	80037ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037a2:	893b      	ldrh	r3, [r7, #8]
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	00010002 	.word	0x00010002

080037bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037cc:	e025      	b.n	800381a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d021      	beq.n	800381a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d6:	f7fe fae3 	bl	8001da0 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d302      	bcc.n	80037ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d116      	bne.n	800381a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f043 0220 	orr.w	r2, r3, #32
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e023      	b.n	8003862 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10d      	bne.n	8003840 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	43da      	mvns	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4013      	ands	r3, r2
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf0c      	ite	eq
 8003836:	2301      	moveq	r3, #1
 8003838:	2300      	movne	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	461a      	mov	r2, r3
 800383e:	e00c      	b.n	800385a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	43da      	mvns	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4013      	ands	r3, r2
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf0c      	ite	eq
 8003852:	2301      	moveq	r3, #1
 8003854:	2300      	movne	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	429a      	cmp	r2, r3
 800385e:	d0b6      	beq.n	80037ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003878:	e051      	b.n	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003888:	d123      	bne.n	80038d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003898:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f043 0204 	orr.w	r2, r3, #4
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e046      	b.n	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d021      	beq.n	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038da:	f7fe fa61 	bl	8001da0 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d302      	bcc.n	80038f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d116      	bne.n	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f043 0220 	orr.w	r2, r3, #32
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e020      	b.n	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	0c1b      	lsrs	r3, r3, #16
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d10c      	bne.n	8003942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	43da      	mvns	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4013      	ands	r3, r2
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	bf14      	ite	ne
 800393a:	2301      	movne	r3, #1
 800393c:	2300      	moveq	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	e00b      	b.n	800395a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	43da      	mvns	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	4013      	ands	r3, r2
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	bf14      	ite	ne
 8003954:	2301      	movne	r3, #1
 8003956:	2300      	moveq	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d18d      	bne.n	800387a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003974:	e02d      	b.n	80039d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f8ce 	bl	8003b18 <I2C_IsAcknowledgeFailed>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e02d      	b.n	80039e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d021      	beq.n	80039d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7fe fa07 	bl	8001da0 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d116      	bne.n	80039d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f043 0220 	orr.w	r2, r3, #32
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e007      	b.n	80039e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039dc:	2b80      	cmp	r3, #128	; 0x80
 80039de:	d1ca      	bne.n	8003976 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039f6:	e02d      	b.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f88d 	bl	8003b18 <I2C_IsAcknowledgeFailed>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e02d      	b.n	8003a64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d021      	beq.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a10:	f7fe f9c6 	bl	8001da0 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d302      	bcc.n	8003a26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d116      	bne.n	8003a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	f043 0220 	orr.w	r2, r3, #32
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e007      	b.n	8003a64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d1ca      	bne.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a78:	e042      	b.n	8003b00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d119      	bne.n	8003abc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0210 	mvn.w	r2, #16
 8003a90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e029      	b.n	8003b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003abc:	f7fe f970 	bl	8001da0 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d302      	bcc.n	8003ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d116      	bne.n	8003b00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f043 0220 	orr.w	r2, r3, #32
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e007      	b.n	8003b10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b40      	cmp	r3, #64	; 0x40
 8003b0c:	d1b5      	bne.n	8003a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2e:	d11b      	bne.n	8003b68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	f043 0204 	orr.w	r2, r3, #4
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e26c      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 8087 	beq.w	8003ca2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b94:	4b92      	ldr	r3, [pc, #584]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d00c      	beq.n	8003bba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ba0:	4b8f      	ldr	r3, [pc, #572]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d112      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x5e>
 8003bac:	4b8c      	ldr	r3, [pc, #560]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bba:	4b89      	ldr	r3, [pc, #548]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d06c      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x12c>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d168      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e246      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x76>
 8003bdc:	4b80      	ldr	r3, [pc, #512]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a7f      	ldr	r2, [pc, #508]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e02e      	b.n	8003c48 <HAL_RCC_OscConfig+0xd4>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x98>
 8003bf2:	4b7b      	ldr	r3, [pc, #492]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a7a      	ldr	r2, [pc, #488]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b78      	ldr	r3, [pc, #480]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a77      	ldr	r2, [pc, #476]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e01d      	b.n	8003c48 <HAL_RCC_OscConfig+0xd4>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0xbc>
 8003c16:	4b72      	ldr	r3, [pc, #456]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a71      	ldr	r2, [pc, #452]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	4b6f      	ldr	r3, [pc, #444]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a6e      	ldr	r2, [pc, #440]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e00b      	b.n	8003c48 <HAL_RCC_OscConfig+0xd4>
 8003c30:	4b6b      	ldr	r3, [pc, #428]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a6a      	ldr	r2, [pc, #424]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b68      	ldr	r3, [pc, #416]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a67      	ldr	r2, [pc, #412]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fe f8a6 	bl	8001da0 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fe f8a2 	bl	8001da0 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e1fa      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	4b5d      	ldr	r3, [pc, #372]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0xe4>
 8003c76:	e014      	b.n	8003ca2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7fe f892 	bl	8001da0 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fe f88e 	bl	8001da0 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e1e6      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	4b53      	ldr	r3, [pc, #332]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x10c>
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d063      	beq.n	8003d76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cae:	4b4c      	ldr	r3, [pc, #304]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cba:	4b49      	ldr	r3, [pc, #292]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d11c      	bne.n	8003d00 <HAL_RCC_OscConfig+0x18c>
 8003cc6:	4b46      	ldr	r3, [pc, #280]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d116      	bne.n	8003d00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd2:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_RCC_OscConfig+0x176>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d001      	beq.n	8003cea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e1ba      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cea:	4b3d      	ldr	r3, [pc, #244]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4939      	ldr	r1, [pc, #228]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	e03a      	b.n	8003d76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d020      	beq.n	8003d4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d08:	4b36      	ldr	r3, [pc, #216]	; (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0e:	f7fe f847 	bl	8001da0 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d16:	f7fe f843 	bl	8001da0 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e19b      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d28:	4b2d      	ldr	r3, [pc, #180]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d34:	4b2a      	ldr	r3, [pc, #168]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4927      	ldr	r1, [pc, #156]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]
 8003d48:	e015      	b.n	8003d76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d4a:	4b26      	ldr	r3, [pc, #152]	; (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fe f826 	bl	8001da0 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d58:	f7fe f822 	bl	8001da0 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e17a      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6a:	4b1d      	ldr	r3, [pc, #116]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d03a      	beq.n	8003df8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d019      	beq.n	8003dbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d8a:	4b17      	ldr	r3, [pc, #92]	; (8003de8 <HAL_RCC_OscConfig+0x274>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d90:	f7fe f806 	bl	8001da0 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d98:	f7fe f802 	bl	8001da0 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e15a      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003daa:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003db6:	2001      	movs	r0, #1
 8003db8:	f000 fac6 	bl	8004348 <RCC_Delay>
 8003dbc:	e01c      	b.n	8003df8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <HAL_RCC_OscConfig+0x274>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc4:	f7fd ffec 	bl	8001da0 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dca:	e00f      	b.n	8003dec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dcc:	f7fd ffe8 	bl	8001da0 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d908      	bls.n	8003dec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e140      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>
 8003dde:	bf00      	nop
 8003de0:	40021000 	.word	0x40021000
 8003de4:	42420000 	.word	0x42420000
 8003de8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dec:	4b9e      	ldr	r3, [pc, #632]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e9      	bne.n	8003dcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 80a6 	beq.w	8003f52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e06:	2300      	movs	r3, #0
 8003e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0a:	4b97      	ldr	r3, [pc, #604]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10d      	bne.n	8003e32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e16:	4b94      	ldr	r3, [pc, #592]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	4a93      	ldr	r2, [pc, #588]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e20:	61d3      	str	r3, [r2, #28]
 8003e22:	4b91      	ldr	r3, [pc, #580]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e32:	4b8e      	ldr	r3, [pc, #568]	; (800406c <HAL_RCC_OscConfig+0x4f8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d118      	bne.n	8003e70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e3e:	4b8b      	ldr	r3, [pc, #556]	; (800406c <HAL_RCC_OscConfig+0x4f8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a8a      	ldr	r2, [pc, #552]	; (800406c <HAL_RCC_OscConfig+0x4f8>)
 8003e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4a:	f7fd ffa9 	bl	8001da0 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e52:	f7fd ffa5 	bl	8001da0 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b64      	cmp	r3, #100	; 0x64
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e0fd      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	4b81      	ldr	r3, [pc, #516]	; (800406c <HAL_RCC_OscConfig+0x4f8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d106      	bne.n	8003e86 <HAL_RCC_OscConfig+0x312>
 8003e78:	4b7b      	ldr	r3, [pc, #492]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	4a7a      	ldr	r2, [pc, #488]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	6213      	str	r3, [r2, #32]
 8003e84:	e02d      	b.n	8003ee2 <HAL_RCC_OscConfig+0x36e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x334>
 8003e8e:	4b76      	ldr	r3, [pc, #472]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	4a75      	ldr	r2, [pc, #468]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003e94:	f023 0301 	bic.w	r3, r3, #1
 8003e98:	6213      	str	r3, [r2, #32]
 8003e9a:	4b73      	ldr	r3, [pc, #460]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	4a72      	ldr	r2, [pc, #456]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003ea0:	f023 0304 	bic.w	r3, r3, #4
 8003ea4:	6213      	str	r3, [r2, #32]
 8003ea6:	e01c      	b.n	8003ee2 <HAL_RCC_OscConfig+0x36e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b05      	cmp	r3, #5
 8003eae:	d10c      	bne.n	8003eca <HAL_RCC_OscConfig+0x356>
 8003eb0:	4b6d      	ldr	r3, [pc, #436]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	4a6c      	ldr	r2, [pc, #432]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003eb6:	f043 0304 	orr.w	r3, r3, #4
 8003eba:	6213      	str	r3, [r2, #32]
 8003ebc:	4b6a      	ldr	r3, [pc, #424]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	4a69      	ldr	r2, [pc, #420]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	6213      	str	r3, [r2, #32]
 8003ec8:	e00b      	b.n	8003ee2 <HAL_RCC_OscConfig+0x36e>
 8003eca:	4b67      	ldr	r3, [pc, #412]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	4a66      	ldr	r2, [pc, #408]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	6213      	str	r3, [r2, #32]
 8003ed6:	4b64      	ldr	r3, [pc, #400]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	4a63      	ldr	r2, [pc, #396]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003edc:	f023 0304 	bic.w	r3, r3, #4
 8003ee0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d015      	beq.n	8003f16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eea:	f7fd ff59 	bl	8001da0 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef0:	e00a      	b.n	8003f08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef2:	f7fd ff55 	bl	8001da0 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e0ab      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f08:	4b57      	ldr	r3, [pc, #348]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ee      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x37e>
 8003f14:	e014      	b.n	8003f40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f16:	f7fd ff43 	bl	8001da0 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f1c:	e00a      	b.n	8003f34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7fd ff3f 	bl	8001da0 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e095      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f34:	4b4c      	ldr	r3, [pc, #304]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1ee      	bne.n	8003f1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d105      	bne.n	8003f52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f46:	4b48      	ldr	r3, [pc, #288]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	4a47      	ldr	r2, [pc, #284]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8081 	beq.w	800405e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f5c:	4b42      	ldr	r3, [pc, #264]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 030c 	and.w	r3, r3, #12
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d061      	beq.n	800402c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d146      	bne.n	8003ffe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f70:	4b3f      	ldr	r3, [pc, #252]	; (8004070 <HAL_RCC_OscConfig+0x4fc>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f76:	f7fd ff13 	bl	8001da0 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7e:	f7fd ff0f 	bl	8001da0 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e067      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f90:	4b35      	ldr	r3, [pc, #212]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f0      	bne.n	8003f7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa4:	d108      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fa6:	4b30      	ldr	r3, [pc, #192]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	492d      	ldr	r1, [pc, #180]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fb8:	4b2b      	ldr	r3, [pc, #172]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a19      	ldr	r1, [r3, #32]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	4927      	ldr	r1, [pc, #156]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd0:	4b27      	ldr	r3, [pc, #156]	; (8004070 <HAL_RCC_OscConfig+0x4fc>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fd fee3 	bl	8001da0 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fd fedf 	bl	8001da0 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e037      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ff0:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x46a>
 8003ffc:	e02f      	b.n	800405e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffe:	4b1c      	ldr	r3, [pc, #112]	; (8004070 <HAL_RCC_OscConfig+0x4fc>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004004:	f7fd fecc 	bl	8001da0 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400c:	f7fd fec8 	bl	8001da0 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e020      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x498>
 800402a:	e018      	b.n	800405e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e013      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004038:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_RCC_OscConfig+0x4f4>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	429a      	cmp	r2, r3
 800404a:	d106      	bne.n	800405a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d001      	beq.n	800405e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021000 	.word	0x40021000
 800406c:	40007000 	.word	0x40007000
 8004070:	42420060 	.word	0x42420060

08004074 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0d0      	b.n	800422a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004088:	4b6a      	ldr	r3, [pc, #424]	; (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d910      	bls.n	80040b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b67      	ldr	r3, [pc, #412]	; (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 0207 	bic.w	r2, r3, #7
 800409e:	4965      	ldr	r1, [pc, #404]	; (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b63      	ldr	r3, [pc, #396]	; (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0b8      	b.n	800422a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d020      	beq.n	8004106 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d0:	4b59      	ldr	r3, [pc, #356]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4a58      	ldr	r2, [pc, #352]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80040d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e8:	4b53      	ldr	r3, [pc, #332]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4a52      	ldr	r2, [pc, #328]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80040ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80040f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f4:	4b50      	ldr	r3, [pc, #320]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	494d      	ldr	r1, [pc, #308]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	4313      	orrs	r3, r2
 8004104:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d040      	beq.n	8004194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	4b47      	ldr	r3, [pc, #284]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d115      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e07f      	b.n	800422a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004132:	4b41      	ldr	r3, [pc, #260]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e073      	b.n	800422a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004142:	4b3d      	ldr	r3, [pc, #244]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e06b      	b.n	800422a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004152:	4b39      	ldr	r3, [pc, #228]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f023 0203 	bic.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4936      	ldr	r1, [pc, #216]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	4313      	orrs	r3, r2
 8004162:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004164:	f7fd fe1c 	bl	8001da0 <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	e00a      	b.n	8004182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416c:	f7fd fe18 	bl	8001da0 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e053      	b.n	800422a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	4b2d      	ldr	r3, [pc, #180]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f003 020c 	and.w	r2, r3, #12
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	429a      	cmp	r2, r3
 8004192:	d1eb      	bne.n	800416c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004194:	4b27      	ldr	r3, [pc, #156]	; (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d210      	bcs.n	80041c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b24      	ldr	r3, [pc, #144]	; (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 0207 	bic.w	r2, r3, #7
 80041aa:	4922      	ldr	r1, [pc, #136]	; (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b2:	4b20      	ldr	r3, [pc, #128]	; (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e032      	b.n	800422a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d0:	4b19      	ldr	r3, [pc, #100]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4916      	ldr	r1, [pc, #88]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	490e      	ldr	r1, [pc, #56]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004202:	f000 f821 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 8004206:	4601      	mov	r1, r0
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	4a0a      	ldr	r2, [pc, #40]	; (800423c <HAL_RCC_ClockConfig+0x1c8>)
 8004214:	5cd3      	ldrb	r3, [r2, r3]
 8004216:	fa21 f303 	lsr.w	r3, r1, r3
 800421a:	4a09      	ldr	r2, [pc, #36]	; (8004240 <HAL_RCC_ClockConfig+0x1cc>)
 800421c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800421e:	4b09      	ldr	r3, [pc, #36]	; (8004244 <HAL_RCC_ClockConfig+0x1d0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f7fd fd7a 	bl	8001d1c <HAL_InitTick>

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40022000 	.word	0x40022000
 8004238:	40021000 	.word	0x40021000
 800423c:	080062d0 	.word	0x080062d0
 8004240:	20000008 	.word	0x20000008
 8004244:	2000000c 	.word	0x2000000c

08004248 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004248:	b490      	push	{r4, r7}
 800424a:	b08a      	sub	sp, #40	; 0x28
 800424c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800424e:	4b2a      	ldr	r3, [pc, #168]	; (80042f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004250:	1d3c      	adds	r4, r7, #4
 8004252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004258:	4b28      	ldr	r3, [pc, #160]	; (80042fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]
 8004262:	2300      	movs	r3, #0
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	2300      	movs	r3, #0
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004272:	4b23      	ldr	r3, [pc, #140]	; (8004300 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b04      	cmp	r3, #4
 8004280:	d002      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x40>
 8004282:	2b08      	cmp	r3, #8
 8004284:	d003      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x46>
 8004286:	e02d      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004288:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <HAL_RCC_GetSysClockFreq+0xbc>)
 800428a:	623b      	str	r3, [r7, #32]
      break;
 800428c:	e02d      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	0c9b      	lsrs	r3, r3, #18
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800429a:	4413      	add	r3, r2
 800429c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80042a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d013      	beq.n	80042d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042ac:	4b14      	ldr	r3, [pc, #80]	; (8004300 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	0c5b      	lsrs	r3, r3, #17
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80042ba:	4413      	add	r3, r2
 80042bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	4a0f      	ldr	r2, [pc, #60]	; (8004304 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042c6:	fb02 f203 	mul.w	r2, r2, r3
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
 80042d2:	e004      	b.n	80042de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	4a0c      	ldr	r2, [pc, #48]	; (8004308 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042d8:	fb02 f303 	mul.w	r3, r2, r3
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	623b      	str	r3, [r7, #32]
      break;
 80042e2:	e002      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042e4:	4b07      	ldr	r3, [pc, #28]	; (8004304 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042e6:	623b      	str	r3, [r7, #32]
      break;
 80042e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ea:	6a3b      	ldr	r3, [r7, #32]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3728      	adds	r7, #40	; 0x28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc90      	pop	{r4, r7}
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	08005560 	.word	0x08005560
 80042fc:	08005570 	.word	0x08005570
 8004300:	40021000 	.word	0x40021000
 8004304:	007a1200 	.word	0x007a1200
 8004308:	003d0900 	.word	0x003d0900

0800430c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004310:	4b02      	ldr	r3, [pc, #8]	; (800431c <HAL_RCC_GetHCLKFreq+0x10>)
 8004312:	681b      	ldr	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr
 800431c:	20000008 	.word	0x20000008

08004320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004324:	f7ff fff2 	bl	800430c <HAL_RCC_GetHCLKFreq>
 8004328:	4601      	mov	r1, r0
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	4a03      	ldr	r2, [pc, #12]	; (8004344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004336:	5cd3      	ldrb	r3, [r2, r3]
 8004338:	fa21 f303 	lsr.w	r3, r1, r3
}
 800433c:	4618      	mov	r0, r3
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021000 	.word	0x40021000
 8004344:	080062e0 	.word	0x080062e0

08004348 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <RCC_Delay+0x34>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a0a      	ldr	r2, [pc, #40]	; (8004380 <RCC_Delay+0x38>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	0a5b      	lsrs	r3, r3, #9
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004364:	bf00      	nop
  }
  while (Delay --);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1e5a      	subs	r2, r3, #1
 800436a:	60fa      	str	r2, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f9      	bne.n	8004364 <RCC_Delay+0x1c>
}
 8004370:	bf00      	nop
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20000008 	.word	0x20000008
 8004380:	10624dd3 	.word	0x10624dd3

08004384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e041      	b.n	800441a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fd f92c 	bl	8001608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3304      	adds	r3, #4
 80043c0:	4619      	mov	r1, r3
 80043c2:	4610      	mov	r0, r2
 80043c4:	f000 fa92 	bl	80048ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b01      	cmp	r3, #1
 8004436:	d001      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e03a      	b.n	80044b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a18      	ldr	r2, [pc, #96]	; (80044bc <HAL_TIM_Base_Start_IT+0x98>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00e      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x58>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004466:	d009      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x58>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x58>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a13      	ldr	r2, [pc, #76]	; (80044c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d111      	bne.n	80044a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b06      	cmp	r3, #6
 800448c:	d010      	beq.n	80044b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0201 	orr.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449e:	e007      	b.n	80044b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr
 80044bc:	40012c00 	.word	0x40012c00
 80044c0:	40000400 	.word	0x40000400
 80044c4:	40000800 	.word	0x40000800

080044c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0201 	bic.w	r2, r2, #1
 80044de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6a1a      	ldr	r2, [r3, #32]
 80044e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80044ea:	4013      	ands	r3, r2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10f      	bne.n	8004510 <HAL_TIM_Base_Stop_IT+0x48>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6a1a      	ldr	r2, [r3, #32]
 80044f6:	f240 4344 	movw	r3, #1092	; 0x444
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d107      	bne.n	8004510 <HAL_TIM_Base_Stop_IT+0x48>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b02      	cmp	r3, #2
 8004538:	d122      	bne.n	8004580 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b02      	cmp	r3, #2
 8004546:	d11b      	bne.n	8004580 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0202 	mvn.w	r2, #2
 8004550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f9a4 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 800456c:	e005      	b.n	800457a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f997 	bl	80048a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f9a6 	bl	80048c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b04      	cmp	r3, #4
 800458c:	d122      	bne.n	80045d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b04      	cmp	r3, #4
 800459a:	d11b      	bne.n	80045d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0204 	mvn.w	r2, #4
 80045a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2202      	movs	r2, #2
 80045aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f97a 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 80045c0:	e005      	b.n	80045ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f96d 	bl	80048a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f97c 	bl	80048c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d122      	bne.n	8004628 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d11b      	bne.n	8004628 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0208 	mvn.w	r2, #8
 80045f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2204      	movs	r2, #4
 80045fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f950 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 8004614:	e005      	b.n	8004622 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f943 	bl	80048a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f952 	bl	80048c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b10      	cmp	r3, #16
 8004634:	d122      	bne.n	800467c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b10      	cmp	r3, #16
 8004642:	d11b      	bne.n	800467c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0210 	mvn.w	r2, #16
 800464c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2208      	movs	r2, #8
 8004652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f926 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 8004668:	e005      	b.n	8004676 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f919 	bl	80048a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f928 	bl	80048c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b01      	cmp	r3, #1
 8004688:	d10e      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b01      	cmp	r3, #1
 8004696:	d107      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0201 	mvn.w	r2, #1
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fc fb9a 	bl	8000ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b2:	2b80      	cmp	r3, #128	; 0x80
 80046b4:	d10e      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b80      	cmp	r3, #128	; 0x80
 80046c2:	d107      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fa6b 	bl	8004baa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046de:	2b40      	cmp	r3, #64	; 0x40
 80046e0:	d10e      	bne.n	8004700 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d107      	bne.n	8004700 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8ec 	bl	80048d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b20      	cmp	r3, #32
 800470c:	d10e      	bne.n	800472c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b20      	cmp	r3, #32
 800471a:	d107      	bne.n	800472c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0220 	mvn.w	r2, #32
 8004724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fa36 	bl	8004b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_TIM_ConfigClockSource+0x18>
 8004748:	2302      	movs	r3, #2
 800474a:	e0a6      	b.n	800489a <HAL_TIM_ConfigClockSource+0x166>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800476a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004772:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d067      	beq.n	8004854 <HAL_TIM_ConfigClockSource+0x120>
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d80b      	bhi.n	80047a0 <HAL_TIM_ConfigClockSource+0x6c>
 8004788:	2b10      	cmp	r3, #16
 800478a:	d073      	beq.n	8004874 <HAL_TIM_ConfigClockSource+0x140>
 800478c:	2b10      	cmp	r3, #16
 800478e:	d802      	bhi.n	8004796 <HAL_TIM_ConfigClockSource+0x62>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d06f      	beq.n	8004874 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004794:	e078      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004796:	2b20      	cmp	r3, #32
 8004798:	d06c      	beq.n	8004874 <HAL_TIM_ConfigClockSource+0x140>
 800479a:	2b30      	cmp	r3, #48	; 0x30
 800479c:	d06a      	beq.n	8004874 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800479e:	e073      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047a0:	2b70      	cmp	r3, #112	; 0x70
 80047a2:	d00d      	beq.n	80047c0 <HAL_TIM_ConfigClockSource+0x8c>
 80047a4:	2b70      	cmp	r3, #112	; 0x70
 80047a6:	d804      	bhi.n	80047b2 <HAL_TIM_ConfigClockSource+0x7e>
 80047a8:	2b50      	cmp	r3, #80	; 0x50
 80047aa:	d033      	beq.n	8004814 <HAL_TIM_ConfigClockSource+0xe0>
 80047ac:	2b60      	cmp	r3, #96	; 0x60
 80047ae:	d041      	beq.n	8004834 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80047b0:	e06a      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b6:	d066      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0x152>
 80047b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047bc:	d017      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80047be:	e063      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	6899      	ldr	r1, [r3, #8]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f000 f965 	bl	8004a9e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	609a      	str	r2, [r3, #8]
      break;
 80047ec:	e04c      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6899      	ldr	r1, [r3, #8]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f000 f94e 	bl	8004a9e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004810:	609a      	str	r2, [r3, #8]
      break;
 8004812:	e039      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	461a      	mov	r2, r3
 8004822:	f000 f8c5 	bl	80049b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2150      	movs	r1, #80	; 0x50
 800482c:	4618      	mov	r0, r3
 800482e:	f000 f91c 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 8004832:	e029      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	6859      	ldr	r1, [r3, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	461a      	mov	r2, r3
 8004842:	f000 f8e3 	bl	8004a0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2160      	movs	r1, #96	; 0x60
 800484c:	4618      	mov	r0, r3
 800484e:	f000 f90c 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 8004852:	e019      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	6859      	ldr	r1, [r3, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	461a      	mov	r2, r3
 8004862:	f000 f8a5 	bl	80049b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2140      	movs	r1, #64	; 0x40
 800486c:	4618      	mov	r0, r3
 800486e:	f000 f8fc 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 8004872:	e009      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f000 f8f3 	bl	8004a6a <TIM_ITRx_SetConfig>
        break;
 8004884:	e000      	b.n	8004888 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004886:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr

080048c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr
	...

080048ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a29      	ldr	r2, [pc, #164]	; (80049a4 <TIM_Base_SetConfig+0xb8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00b      	beq.n	800491c <TIM_Base_SetConfig+0x30>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490a:	d007      	beq.n	800491c <TIM_Base_SetConfig+0x30>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a26      	ldr	r2, [pc, #152]	; (80049a8 <TIM_Base_SetConfig+0xbc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_Base_SetConfig+0x30>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a25      	ldr	r2, [pc, #148]	; (80049ac <TIM_Base_SetConfig+0xc0>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d108      	bne.n	800492e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a1c      	ldr	r2, [pc, #112]	; (80049a4 <TIM_Base_SetConfig+0xb8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00b      	beq.n	800494e <TIM_Base_SetConfig+0x62>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d007      	beq.n	800494e <TIM_Base_SetConfig+0x62>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a19      	ldr	r2, [pc, #100]	; (80049a8 <TIM_Base_SetConfig+0xbc>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d003      	beq.n	800494e <TIM_Base_SetConfig+0x62>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a18      	ldr	r2, [pc, #96]	; (80049ac <TIM_Base_SetConfig+0xc0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d108      	bne.n	8004960 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a07      	ldr	r2, [pc, #28]	; (80049a4 <TIM_Base_SetConfig+0xb8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d103      	bne.n	8004994 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	615a      	str	r2, [r3, #20]
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	40012c00 	.word	0x40012c00
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40000800 	.word	0x40000800

080049b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f023 0201 	bic.w	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f023 030a 	bic.w	r3, r3, #10
 80049ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	f023 0210 	bic.w	r2, r3, #16
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	031b      	lsls	r3, r3, #12
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	621a      	str	r2, [r3, #32]
}
 8004a60:	bf00      	nop
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr

08004a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f043 0307 	orr.w	r3, r3, #7
 8004a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	609a      	str	r2, [r3, #8]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr

08004a9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b087      	sub	sp, #28
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
 8004aaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	021a      	lsls	r2, r3, #8
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	609a      	str	r2, [r3, #8]
}
 8004ad2:	bf00      	nop
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e046      	b.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a16      	ldr	r2, [pc, #88]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00e      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b40:	d009      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a12      	ldr	r2, [pc, #72]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d004      	beq.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a10      	ldr	r2, [pc, #64]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d10c      	bne.n	8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr
 8004b8c:	40012c00 	.word	0x40012c00
 8004b90:	40000400 	.word	0x40000400
 8004b94:	40000800 	.word	0x40000800

08004b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr

08004baa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <__errno>:
 8004bbc:	4b01      	ldr	r3, [pc, #4]	; (8004bc4 <__errno+0x8>)
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000014 	.word	0x20000014

08004bc8 <__libc_init_array>:
 8004bc8:	b570      	push	{r4, r5, r6, lr}
 8004bca:	2500      	movs	r5, #0
 8004bcc:	4e0c      	ldr	r6, [pc, #48]	; (8004c00 <__libc_init_array+0x38>)
 8004bce:	4c0d      	ldr	r4, [pc, #52]	; (8004c04 <__libc_init_array+0x3c>)
 8004bd0:	1ba4      	subs	r4, r4, r6
 8004bd2:	10a4      	asrs	r4, r4, #2
 8004bd4:	42a5      	cmp	r5, r4
 8004bd6:	d109      	bne.n	8004bec <__libc_init_array+0x24>
 8004bd8:	f000 fc34 	bl	8005444 <_init>
 8004bdc:	2500      	movs	r5, #0
 8004bde:	4e0a      	ldr	r6, [pc, #40]	; (8004c08 <__libc_init_array+0x40>)
 8004be0:	4c0a      	ldr	r4, [pc, #40]	; (8004c0c <__libc_init_array+0x44>)
 8004be2:	1ba4      	subs	r4, r4, r6
 8004be4:	10a4      	asrs	r4, r4, #2
 8004be6:	42a5      	cmp	r5, r4
 8004be8:	d105      	bne.n	8004bf6 <__libc_init_array+0x2e>
 8004bea:	bd70      	pop	{r4, r5, r6, pc}
 8004bec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bf0:	4798      	blx	r3
 8004bf2:	3501      	adds	r5, #1
 8004bf4:	e7ee      	b.n	8004bd4 <__libc_init_array+0xc>
 8004bf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bfa:	4798      	blx	r3
 8004bfc:	3501      	adds	r5, #1
 8004bfe:	e7f2      	b.n	8004be6 <__libc_init_array+0x1e>
 8004c00:	0800631c 	.word	0x0800631c
 8004c04:	0800631c 	.word	0x0800631c
 8004c08:	0800631c 	.word	0x0800631c
 8004c0c:	08006320 	.word	0x08006320

08004c10 <memcpy>:
 8004c10:	b510      	push	{r4, lr}
 8004c12:	1e43      	subs	r3, r0, #1
 8004c14:	440a      	add	r2, r1
 8004c16:	4291      	cmp	r1, r2
 8004c18:	d100      	bne.n	8004c1c <memcpy+0xc>
 8004c1a:	bd10      	pop	{r4, pc}
 8004c1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c24:	e7f7      	b.n	8004c16 <memcpy+0x6>

08004c26 <memmove>:
 8004c26:	4288      	cmp	r0, r1
 8004c28:	b510      	push	{r4, lr}
 8004c2a:	eb01 0302 	add.w	r3, r1, r2
 8004c2e:	d807      	bhi.n	8004c40 <memmove+0x1a>
 8004c30:	1e42      	subs	r2, r0, #1
 8004c32:	4299      	cmp	r1, r3
 8004c34:	d00a      	beq.n	8004c4c <memmove+0x26>
 8004c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c3a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004c3e:	e7f8      	b.n	8004c32 <memmove+0xc>
 8004c40:	4283      	cmp	r3, r0
 8004c42:	d9f5      	bls.n	8004c30 <memmove+0xa>
 8004c44:	1881      	adds	r1, r0, r2
 8004c46:	1ad2      	subs	r2, r2, r3
 8004c48:	42d3      	cmn	r3, r2
 8004c4a:	d100      	bne.n	8004c4e <memmove+0x28>
 8004c4c:	bd10      	pop	{r4, pc}
 8004c4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c52:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004c56:	e7f7      	b.n	8004c48 <memmove+0x22>

08004c58 <memset>:
 8004c58:	4603      	mov	r3, r0
 8004c5a:	4402      	add	r2, r0
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d100      	bne.n	8004c62 <memset+0xa>
 8004c60:	4770      	bx	lr
 8004c62:	f803 1b01 	strb.w	r1, [r3], #1
 8004c66:	e7f9      	b.n	8004c5c <memset+0x4>

08004c68 <siprintf>:
 8004c68:	b40e      	push	{r1, r2, r3}
 8004c6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c6e:	b500      	push	{lr}
 8004c70:	b09c      	sub	sp, #112	; 0x70
 8004c72:	ab1d      	add	r3, sp, #116	; 0x74
 8004c74:	9002      	str	r0, [sp, #8]
 8004c76:	9006      	str	r0, [sp, #24]
 8004c78:	9107      	str	r1, [sp, #28]
 8004c7a:	9104      	str	r1, [sp, #16]
 8004c7c:	4808      	ldr	r0, [pc, #32]	; (8004ca0 <siprintf+0x38>)
 8004c7e:	4909      	ldr	r1, [pc, #36]	; (8004ca4 <siprintf+0x3c>)
 8004c80:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c84:	9105      	str	r1, [sp, #20]
 8004c86:	6800      	ldr	r0, [r0, #0]
 8004c88:	a902      	add	r1, sp, #8
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	f000 f866 	bl	8004d5c <_svfiprintf_r>
 8004c90:	2200      	movs	r2, #0
 8004c92:	9b02      	ldr	r3, [sp, #8]
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	b01c      	add	sp, #112	; 0x70
 8004c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c9c:	b003      	add	sp, #12
 8004c9e:	4770      	bx	lr
 8004ca0:	20000014 	.word	0x20000014
 8004ca4:	ffff0208 	.word	0xffff0208

08004ca8 <__ssputs_r>:
 8004ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cac:	688e      	ldr	r6, [r1, #8]
 8004cae:	4682      	mov	sl, r0
 8004cb0:	429e      	cmp	r6, r3
 8004cb2:	460c      	mov	r4, r1
 8004cb4:	4690      	mov	r8, r2
 8004cb6:	4699      	mov	r9, r3
 8004cb8:	d837      	bhi.n	8004d2a <__ssputs_r+0x82>
 8004cba:	898a      	ldrh	r2, [r1, #12]
 8004cbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cc0:	d031      	beq.n	8004d26 <__ssputs_r+0x7e>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	6825      	ldr	r5, [r4, #0]
 8004cc6:	6909      	ldr	r1, [r1, #16]
 8004cc8:	1a6f      	subs	r7, r5, r1
 8004cca:	6965      	ldr	r5, [r4, #20]
 8004ccc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cd0:	fb95 f5f3 	sdiv	r5, r5, r3
 8004cd4:	f109 0301 	add.w	r3, r9, #1
 8004cd8:	443b      	add	r3, r7
 8004cda:	429d      	cmp	r5, r3
 8004cdc:	bf38      	it	cc
 8004cde:	461d      	movcc	r5, r3
 8004ce0:	0553      	lsls	r3, r2, #21
 8004ce2:	d530      	bpl.n	8004d46 <__ssputs_r+0x9e>
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	f000 fb13 	bl	8005310 <_malloc_r>
 8004cea:	4606      	mov	r6, r0
 8004cec:	b950      	cbnz	r0, 8004d04 <__ssputs_r+0x5c>
 8004cee:	230c      	movs	r3, #12
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf4:	f8ca 3000 	str.w	r3, [sl]
 8004cf8:	89a3      	ldrh	r3, [r4, #12]
 8004cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cfe:	81a3      	strh	r3, [r4, #12]
 8004d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d04:	463a      	mov	r2, r7
 8004d06:	6921      	ldr	r1, [r4, #16]
 8004d08:	f7ff ff82 	bl	8004c10 <memcpy>
 8004d0c:	89a3      	ldrh	r3, [r4, #12]
 8004d0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d16:	81a3      	strh	r3, [r4, #12]
 8004d18:	6126      	str	r6, [r4, #16]
 8004d1a:	443e      	add	r6, r7
 8004d1c:	6026      	str	r6, [r4, #0]
 8004d1e:	464e      	mov	r6, r9
 8004d20:	6165      	str	r5, [r4, #20]
 8004d22:	1bed      	subs	r5, r5, r7
 8004d24:	60a5      	str	r5, [r4, #8]
 8004d26:	454e      	cmp	r6, r9
 8004d28:	d900      	bls.n	8004d2c <__ssputs_r+0x84>
 8004d2a:	464e      	mov	r6, r9
 8004d2c:	4632      	mov	r2, r6
 8004d2e:	4641      	mov	r1, r8
 8004d30:	6820      	ldr	r0, [r4, #0]
 8004d32:	f7ff ff78 	bl	8004c26 <memmove>
 8004d36:	68a3      	ldr	r3, [r4, #8]
 8004d38:	2000      	movs	r0, #0
 8004d3a:	1b9b      	subs	r3, r3, r6
 8004d3c:	60a3      	str	r3, [r4, #8]
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	441e      	add	r6, r3
 8004d42:	6026      	str	r6, [r4, #0]
 8004d44:	e7dc      	b.n	8004d00 <__ssputs_r+0x58>
 8004d46:	462a      	mov	r2, r5
 8004d48:	f000 fb3c 	bl	80053c4 <_realloc_r>
 8004d4c:	4606      	mov	r6, r0
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d1e2      	bne.n	8004d18 <__ssputs_r+0x70>
 8004d52:	6921      	ldr	r1, [r4, #16]
 8004d54:	4650      	mov	r0, sl
 8004d56:	f000 fa8f 	bl	8005278 <_free_r>
 8004d5a:	e7c8      	b.n	8004cee <__ssputs_r+0x46>

08004d5c <_svfiprintf_r>:
 8004d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d60:	461d      	mov	r5, r3
 8004d62:	898b      	ldrh	r3, [r1, #12]
 8004d64:	b09d      	sub	sp, #116	; 0x74
 8004d66:	061f      	lsls	r7, r3, #24
 8004d68:	4680      	mov	r8, r0
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	4616      	mov	r6, r2
 8004d6e:	d50f      	bpl.n	8004d90 <_svfiprintf_r+0x34>
 8004d70:	690b      	ldr	r3, [r1, #16]
 8004d72:	b96b      	cbnz	r3, 8004d90 <_svfiprintf_r+0x34>
 8004d74:	2140      	movs	r1, #64	; 0x40
 8004d76:	f000 facb 	bl	8005310 <_malloc_r>
 8004d7a:	6020      	str	r0, [r4, #0]
 8004d7c:	6120      	str	r0, [r4, #16]
 8004d7e:	b928      	cbnz	r0, 8004d8c <_svfiprintf_r+0x30>
 8004d80:	230c      	movs	r3, #12
 8004d82:	f8c8 3000 	str.w	r3, [r8]
 8004d86:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8a:	e0c8      	b.n	8004f1e <_svfiprintf_r+0x1c2>
 8004d8c:	2340      	movs	r3, #64	; 0x40
 8004d8e:	6163      	str	r3, [r4, #20]
 8004d90:	2300      	movs	r3, #0
 8004d92:	9309      	str	r3, [sp, #36]	; 0x24
 8004d94:	2320      	movs	r3, #32
 8004d96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d9a:	2330      	movs	r3, #48	; 0x30
 8004d9c:	f04f 0b01 	mov.w	fp, #1
 8004da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004da4:	9503      	str	r5, [sp, #12]
 8004da6:	4637      	mov	r7, r6
 8004da8:	463d      	mov	r5, r7
 8004daa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004dae:	b10b      	cbz	r3, 8004db4 <_svfiprintf_r+0x58>
 8004db0:	2b25      	cmp	r3, #37	; 0x25
 8004db2:	d13e      	bne.n	8004e32 <_svfiprintf_r+0xd6>
 8004db4:	ebb7 0a06 	subs.w	sl, r7, r6
 8004db8:	d00b      	beq.n	8004dd2 <_svfiprintf_r+0x76>
 8004dba:	4653      	mov	r3, sl
 8004dbc:	4632      	mov	r2, r6
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	4640      	mov	r0, r8
 8004dc2:	f7ff ff71 	bl	8004ca8 <__ssputs_r>
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	f000 80a4 	beq.w	8004f14 <_svfiprintf_r+0x1b8>
 8004dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dce:	4453      	add	r3, sl
 8004dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd2:	783b      	ldrb	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 809d 	beq.w	8004f14 <_svfiprintf_r+0x1b8>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8004de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004de4:	9304      	str	r3, [sp, #16]
 8004de6:	9307      	str	r3, [sp, #28]
 8004de8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dec:	931a      	str	r3, [sp, #104]	; 0x68
 8004dee:	462f      	mov	r7, r5
 8004df0:	2205      	movs	r2, #5
 8004df2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004df6:	4850      	ldr	r0, [pc, #320]	; (8004f38 <_svfiprintf_r+0x1dc>)
 8004df8:	f000 fa30 	bl	800525c <memchr>
 8004dfc:	9b04      	ldr	r3, [sp, #16]
 8004dfe:	b9d0      	cbnz	r0, 8004e36 <_svfiprintf_r+0xda>
 8004e00:	06d9      	lsls	r1, r3, #27
 8004e02:	bf44      	itt	mi
 8004e04:	2220      	movmi	r2, #32
 8004e06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e0a:	071a      	lsls	r2, r3, #28
 8004e0c:	bf44      	itt	mi
 8004e0e:	222b      	movmi	r2, #43	; 0x2b
 8004e10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e14:	782a      	ldrb	r2, [r5, #0]
 8004e16:	2a2a      	cmp	r2, #42	; 0x2a
 8004e18:	d015      	beq.n	8004e46 <_svfiprintf_r+0xea>
 8004e1a:	462f      	mov	r7, r5
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	250a      	movs	r5, #10
 8004e20:	9a07      	ldr	r2, [sp, #28]
 8004e22:	4639      	mov	r1, r7
 8004e24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e28:	3b30      	subs	r3, #48	; 0x30
 8004e2a:	2b09      	cmp	r3, #9
 8004e2c:	d94d      	bls.n	8004eca <_svfiprintf_r+0x16e>
 8004e2e:	b1b8      	cbz	r0, 8004e60 <_svfiprintf_r+0x104>
 8004e30:	e00f      	b.n	8004e52 <_svfiprintf_r+0xf6>
 8004e32:	462f      	mov	r7, r5
 8004e34:	e7b8      	b.n	8004da8 <_svfiprintf_r+0x4c>
 8004e36:	4a40      	ldr	r2, [pc, #256]	; (8004f38 <_svfiprintf_r+0x1dc>)
 8004e38:	463d      	mov	r5, r7
 8004e3a:	1a80      	subs	r0, r0, r2
 8004e3c:	fa0b f000 	lsl.w	r0, fp, r0
 8004e40:	4318      	orrs	r0, r3
 8004e42:	9004      	str	r0, [sp, #16]
 8004e44:	e7d3      	b.n	8004dee <_svfiprintf_r+0x92>
 8004e46:	9a03      	ldr	r2, [sp, #12]
 8004e48:	1d11      	adds	r1, r2, #4
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	9103      	str	r1, [sp, #12]
 8004e4e:	2a00      	cmp	r2, #0
 8004e50:	db01      	blt.n	8004e56 <_svfiprintf_r+0xfa>
 8004e52:	9207      	str	r2, [sp, #28]
 8004e54:	e004      	b.n	8004e60 <_svfiprintf_r+0x104>
 8004e56:	4252      	negs	r2, r2
 8004e58:	f043 0302 	orr.w	r3, r3, #2
 8004e5c:	9207      	str	r2, [sp, #28]
 8004e5e:	9304      	str	r3, [sp, #16]
 8004e60:	783b      	ldrb	r3, [r7, #0]
 8004e62:	2b2e      	cmp	r3, #46	; 0x2e
 8004e64:	d10c      	bne.n	8004e80 <_svfiprintf_r+0x124>
 8004e66:	787b      	ldrb	r3, [r7, #1]
 8004e68:	2b2a      	cmp	r3, #42	; 0x2a
 8004e6a:	d133      	bne.n	8004ed4 <_svfiprintf_r+0x178>
 8004e6c:	9b03      	ldr	r3, [sp, #12]
 8004e6e:	3702      	adds	r7, #2
 8004e70:	1d1a      	adds	r2, r3, #4
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	9203      	str	r2, [sp, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	bfb8      	it	lt
 8004e7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e7e:	9305      	str	r3, [sp, #20]
 8004e80:	4d2e      	ldr	r5, [pc, #184]	; (8004f3c <_svfiprintf_r+0x1e0>)
 8004e82:	2203      	movs	r2, #3
 8004e84:	7839      	ldrb	r1, [r7, #0]
 8004e86:	4628      	mov	r0, r5
 8004e88:	f000 f9e8 	bl	800525c <memchr>
 8004e8c:	b138      	cbz	r0, 8004e9e <_svfiprintf_r+0x142>
 8004e8e:	2340      	movs	r3, #64	; 0x40
 8004e90:	1b40      	subs	r0, r0, r5
 8004e92:	fa03 f000 	lsl.w	r0, r3, r0
 8004e96:	9b04      	ldr	r3, [sp, #16]
 8004e98:	3701      	adds	r7, #1
 8004e9a:	4303      	orrs	r3, r0
 8004e9c:	9304      	str	r3, [sp, #16]
 8004e9e:	7839      	ldrb	r1, [r7, #0]
 8004ea0:	2206      	movs	r2, #6
 8004ea2:	4827      	ldr	r0, [pc, #156]	; (8004f40 <_svfiprintf_r+0x1e4>)
 8004ea4:	1c7e      	adds	r6, r7, #1
 8004ea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004eaa:	f000 f9d7 	bl	800525c <memchr>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	d038      	beq.n	8004f24 <_svfiprintf_r+0x1c8>
 8004eb2:	4b24      	ldr	r3, [pc, #144]	; (8004f44 <_svfiprintf_r+0x1e8>)
 8004eb4:	bb13      	cbnz	r3, 8004efc <_svfiprintf_r+0x1a0>
 8004eb6:	9b03      	ldr	r3, [sp, #12]
 8004eb8:	3307      	adds	r3, #7
 8004eba:	f023 0307 	bic.w	r3, r3, #7
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	9303      	str	r3, [sp, #12]
 8004ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec4:	444b      	add	r3, r9
 8004ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ec8:	e76d      	b.n	8004da6 <_svfiprintf_r+0x4a>
 8004eca:	fb05 3202 	mla	r2, r5, r2, r3
 8004ece:	2001      	movs	r0, #1
 8004ed0:	460f      	mov	r7, r1
 8004ed2:	e7a6      	b.n	8004e22 <_svfiprintf_r+0xc6>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	250a      	movs	r5, #10
 8004ed8:	4619      	mov	r1, r3
 8004eda:	3701      	adds	r7, #1
 8004edc:	9305      	str	r3, [sp, #20]
 8004ede:	4638      	mov	r0, r7
 8004ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ee4:	3a30      	subs	r2, #48	; 0x30
 8004ee6:	2a09      	cmp	r2, #9
 8004ee8:	d903      	bls.n	8004ef2 <_svfiprintf_r+0x196>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0c8      	beq.n	8004e80 <_svfiprintf_r+0x124>
 8004eee:	9105      	str	r1, [sp, #20]
 8004ef0:	e7c6      	b.n	8004e80 <_svfiprintf_r+0x124>
 8004ef2:	fb05 2101 	mla	r1, r5, r1, r2
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	4607      	mov	r7, r0
 8004efa:	e7f0      	b.n	8004ede <_svfiprintf_r+0x182>
 8004efc:	ab03      	add	r3, sp, #12
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	4622      	mov	r2, r4
 8004f02:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <_svfiprintf_r+0x1ec>)
 8004f04:	a904      	add	r1, sp, #16
 8004f06:	4640      	mov	r0, r8
 8004f08:	f3af 8000 	nop.w
 8004f0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004f10:	4681      	mov	r9, r0
 8004f12:	d1d6      	bne.n	8004ec2 <_svfiprintf_r+0x166>
 8004f14:	89a3      	ldrh	r3, [r4, #12]
 8004f16:	065b      	lsls	r3, r3, #25
 8004f18:	f53f af35 	bmi.w	8004d86 <_svfiprintf_r+0x2a>
 8004f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f1e:	b01d      	add	sp, #116	; 0x74
 8004f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f24:	ab03      	add	r3, sp, #12
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	4622      	mov	r2, r4
 8004f2a:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <_svfiprintf_r+0x1ec>)
 8004f2c:	a904      	add	r1, sp, #16
 8004f2e:	4640      	mov	r0, r8
 8004f30:	f000 f882 	bl	8005038 <_printf_i>
 8004f34:	e7ea      	b.n	8004f0c <_svfiprintf_r+0x1b0>
 8004f36:	bf00      	nop
 8004f38:	080062e8 	.word	0x080062e8
 8004f3c:	080062ee 	.word	0x080062ee
 8004f40:	080062f2 	.word	0x080062f2
 8004f44:	00000000 	.word	0x00000000
 8004f48:	08004ca9 	.word	0x08004ca9

08004f4c <_printf_common>:
 8004f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f50:	4691      	mov	r9, r2
 8004f52:	461f      	mov	r7, r3
 8004f54:	688a      	ldr	r2, [r1, #8]
 8004f56:	690b      	ldr	r3, [r1, #16]
 8004f58:	4606      	mov	r6, r0
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	bfb8      	it	lt
 8004f5e:	4613      	movlt	r3, r2
 8004f60:	f8c9 3000 	str.w	r3, [r9]
 8004f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f68:	460c      	mov	r4, r1
 8004f6a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f6e:	b112      	cbz	r2, 8004f76 <_printf_common+0x2a>
 8004f70:	3301      	adds	r3, #1
 8004f72:	f8c9 3000 	str.w	r3, [r9]
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	0699      	lsls	r1, r3, #26
 8004f7a:	bf42      	ittt	mi
 8004f7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f80:	3302      	addmi	r3, #2
 8004f82:	f8c9 3000 	strmi.w	r3, [r9]
 8004f86:	6825      	ldr	r5, [r4, #0]
 8004f88:	f015 0506 	ands.w	r5, r5, #6
 8004f8c:	d107      	bne.n	8004f9e <_printf_common+0x52>
 8004f8e:	f104 0a19 	add.w	sl, r4, #25
 8004f92:	68e3      	ldr	r3, [r4, #12]
 8004f94:	f8d9 2000 	ldr.w	r2, [r9]
 8004f98:	1a9b      	subs	r3, r3, r2
 8004f9a:	42ab      	cmp	r3, r5
 8004f9c:	dc29      	bgt.n	8004ff2 <_printf_common+0xa6>
 8004f9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004fa2:	6822      	ldr	r2, [r4, #0]
 8004fa4:	3300      	adds	r3, #0
 8004fa6:	bf18      	it	ne
 8004fa8:	2301      	movne	r3, #1
 8004faa:	0692      	lsls	r2, r2, #26
 8004fac:	d42e      	bmi.n	800500c <_printf_common+0xc0>
 8004fae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fb2:	4639      	mov	r1, r7
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	47c0      	blx	r8
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d021      	beq.n	8005000 <_printf_common+0xb4>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	68e5      	ldr	r5, [r4, #12]
 8004fc0:	f003 0306 	and.w	r3, r3, #6
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	bf18      	it	ne
 8004fc8:	2500      	movne	r5, #0
 8004fca:	f8d9 2000 	ldr.w	r2, [r9]
 8004fce:	f04f 0900 	mov.w	r9, #0
 8004fd2:	bf08      	it	eq
 8004fd4:	1aad      	subeq	r5, r5, r2
 8004fd6:	68a3      	ldr	r3, [r4, #8]
 8004fd8:	6922      	ldr	r2, [r4, #16]
 8004fda:	bf08      	it	eq
 8004fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	bfc4      	itt	gt
 8004fe4:	1a9b      	subgt	r3, r3, r2
 8004fe6:	18ed      	addgt	r5, r5, r3
 8004fe8:	341a      	adds	r4, #26
 8004fea:	454d      	cmp	r5, r9
 8004fec:	d11a      	bne.n	8005024 <_printf_common+0xd8>
 8004fee:	2000      	movs	r0, #0
 8004ff0:	e008      	b.n	8005004 <_printf_common+0xb8>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	4652      	mov	r2, sl
 8004ff6:	4639      	mov	r1, r7
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	47c0      	blx	r8
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	d103      	bne.n	8005008 <_printf_common+0xbc>
 8005000:	f04f 30ff 	mov.w	r0, #4294967295
 8005004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005008:	3501      	adds	r5, #1
 800500a:	e7c2      	b.n	8004f92 <_printf_common+0x46>
 800500c:	2030      	movs	r0, #48	; 0x30
 800500e:	18e1      	adds	r1, r4, r3
 8005010:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800501a:	4422      	add	r2, r4
 800501c:	3302      	adds	r3, #2
 800501e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005022:	e7c4      	b.n	8004fae <_printf_common+0x62>
 8005024:	2301      	movs	r3, #1
 8005026:	4622      	mov	r2, r4
 8005028:	4639      	mov	r1, r7
 800502a:	4630      	mov	r0, r6
 800502c:	47c0      	blx	r8
 800502e:	3001      	adds	r0, #1
 8005030:	d0e6      	beq.n	8005000 <_printf_common+0xb4>
 8005032:	f109 0901 	add.w	r9, r9, #1
 8005036:	e7d8      	b.n	8004fea <_printf_common+0x9e>

08005038 <_printf_i>:
 8005038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800503c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005040:	460c      	mov	r4, r1
 8005042:	7e09      	ldrb	r1, [r1, #24]
 8005044:	b085      	sub	sp, #20
 8005046:	296e      	cmp	r1, #110	; 0x6e
 8005048:	4617      	mov	r7, r2
 800504a:	4606      	mov	r6, r0
 800504c:	4698      	mov	r8, r3
 800504e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005050:	f000 80b3 	beq.w	80051ba <_printf_i+0x182>
 8005054:	d822      	bhi.n	800509c <_printf_i+0x64>
 8005056:	2963      	cmp	r1, #99	; 0x63
 8005058:	d036      	beq.n	80050c8 <_printf_i+0x90>
 800505a:	d80a      	bhi.n	8005072 <_printf_i+0x3a>
 800505c:	2900      	cmp	r1, #0
 800505e:	f000 80b9 	beq.w	80051d4 <_printf_i+0x19c>
 8005062:	2958      	cmp	r1, #88	; 0x58
 8005064:	f000 8083 	beq.w	800516e <_printf_i+0x136>
 8005068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800506c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005070:	e032      	b.n	80050d8 <_printf_i+0xa0>
 8005072:	2964      	cmp	r1, #100	; 0x64
 8005074:	d001      	beq.n	800507a <_printf_i+0x42>
 8005076:	2969      	cmp	r1, #105	; 0x69
 8005078:	d1f6      	bne.n	8005068 <_printf_i+0x30>
 800507a:	6820      	ldr	r0, [r4, #0]
 800507c:	6813      	ldr	r3, [r2, #0]
 800507e:	0605      	lsls	r5, r0, #24
 8005080:	f103 0104 	add.w	r1, r3, #4
 8005084:	d52a      	bpl.n	80050dc <_printf_i+0xa4>
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6011      	str	r1, [r2, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	da03      	bge.n	8005096 <_printf_i+0x5e>
 800508e:	222d      	movs	r2, #45	; 0x2d
 8005090:	425b      	negs	r3, r3
 8005092:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005096:	486f      	ldr	r0, [pc, #444]	; (8005254 <_printf_i+0x21c>)
 8005098:	220a      	movs	r2, #10
 800509a:	e039      	b.n	8005110 <_printf_i+0xd8>
 800509c:	2973      	cmp	r1, #115	; 0x73
 800509e:	f000 809d 	beq.w	80051dc <_printf_i+0x1a4>
 80050a2:	d808      	bhi.n	80050b6 <_printf_i+0x7e>
 80050a4:	296f      	cmp	r1, #111	; 0x6f
 80050a6:	d020      	beq.n	80050ea <_printf_i+0xb2>
 80050a8:	2970      	cmp	r1, #112	; 0x70
 80050aa:	d1dd      	bne.n	8005068 <_printf_i+0x30>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	f043 0320 	orr.w	r3, r3, #32
 80050b2:	6023      	str	r3, [r4, #0]
 80050b4:	e003      	b.n	80050be <_printf_i+0x86>
 80050b6:	2975      	cmp	r1, #117	; 0x75
 80050b8:	d017      	beq.n	80050ea <_printf_i+0xb2>
 80050ba:	2978      	cmp	r1, #120	; 0x78
 80050bc:	d1d4      	bne.n	8005068 <_printf_i+0x30>
 80050be:	2378      	movs	r3, #120	; 0x78
 80050c0:	4865      	ldr	r0, [pc, #404]	; (8005258 <_printf_i+0x220>)
 80050c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050c6:	e055      	b.n	8005174 <_printf_i+0x13c>
 80050c8:	6813      	ldr	r3, [r2, #0]
 80050ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050ce:	1d19      	adds	r1, r3, #4
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6011      	str	r1, [r2, #0]
 80050d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050d8:	2301      	movs	r3, #1
 80050da:	e08c      	b.n	80051f6 <_printf_i+0x1be>
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050e2:	6011      	str	r1, [r2, #0]
 80050e4:	bf18      	it	ne
 80050e6:	b21b      	sxthne	r3, r3
 80050e8:	e7cf      	b.n	800508a <_printf_i+0x52>
 80050ea:	6813      	ldr	r3, [r2, #0]
 80050ec:	6825      	ldr	r5, [r4, #0]
 80050ee:	1d18      	adds	r0, r3, #4
 80050f0:	6010      	str	r0, [r2, #0]
 80050f2:	0628      	lsls	r0, r5, #24
 80050f4:	d501      	bpl.n	80050fa <_printf_i+0xc2>
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	e002      	b.n	8005100 <_printf_i+0xc8>
 80050fa:	0668      	lsls	r0, r5, #25
 80050fc:	d5fb      	bpl.n	80050f6 <_printf_i+0xbe>
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	296f      	cmp	r1, #111	; 0x6f
 8005102:	bf14      	ite	ne
 8005104:	220a      	movne	r2, #10
 8005106:	2208      	moveq	r2, #8
 8005108:	4852      	ldr	r0, [pc, #328]	; (8005254 <_printf_i+0x21c>)
 800510a:	2100      	movs	r1, #0
 800510c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005110:	6865      	ldr	r5, [r4, #4]
 8005112:	2d00      	cmp	r5, #0
 8005114:	60a5      	str	r5, [r4, #8]
 8005116:	f2c0 8095 	blt.w	8005244 <_printf_i+0x20c>
 800511a:	6821      	ldr	r1, [r4, #0]
 800511c:	f021 0104 	bic.w	r1, r1, #4
 8005120:	6021      	str	r1, [r4, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d13d      	bne.n	80051a2 <_printf_i+0x16a>
 8005126:	2d00      	cmp	r5, #0
 8005128:	f040 808e 	bne.w	8005248 <_printf_i+0x210>
 800512c:	4665      	mov	r5, ip
 800512e:	2a08      	cmp	r2, #8
 8005130:	d10b      	bne.n	800514a <_printf_i+0x112>
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	07db      	lsls	r3, r3, #31
 8005136:	d508      	bpl.n	800514a <_printf_i+0x112>
 8005138:	6923      	ldr	r3, [r4, #16]
 800513a:	6862      	ldr	r2, [r4, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	bfde      	ittt	le
 8005140:	2330      	movle	r3, #48	; 0x30
 8005142:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005146:	f105 35ff 	addle.w	r5, r5, #4294967295
 800514a:	ebac 0305 	sub.w	r3, ip, r5
 800514e:	6123      	str	r3, [r4, #16]
 8005150:	f8cd 8000 	str.w	r8, [sp]
 8005154:	463b      	mov	r3, r7
 8005156:	aa03      	add	r2, sp, #12
 8005158:	4621      	mov	r1, r4
 800515a:	4630      	mov	r0, r6
 800515c:	f7ff fef6 	bl	8004f4c <_printf_common>
 8005160:	3001      	adds	r0, #1
 8005162:	d14d      	bne.n	8005200 <_printf_i+0x1c8>
 8005164:	f04f 30ff 	mov.w	r0, #4294967295
 8005168:	b005      	add	sp, #20
 800516a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800516e:	4839      	ldr	r0, [pc, #228]	; (8005254 <_printf_i+0x21c>)
 8005170:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005174:	6813      	ldr	r3, [r2, #0]
 8005176:	6821      	ldr	r1, [r4, #0]
 8005178:	1d1d      	adds	r5, r3, #4
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6015      	str	r5, [r2, #0]
 800517e:	060a      	lsls	r2, r1, #24
 8005180:	d50b      	bpl.n	800519a <_printf_i+0x162>
 8005182:	07ca      	lsls	r2, r1, #31
 8005184:	bf44      	itt	mi
 8005186:	f041 0120 	orrmi.w	r1, r1, #32
 800518a:	6021      	strmi	r1, [r4, #0]
 800518c:	b91b      	cbnz	r3, 8005196 <_printf_i+0x15e>
 800518e:	6822      	ldr	r2, [r4, #0]
 8005190:	f022 0220 	bic.w	r2, r2, #32
 8005194:	6022      	str	r2, [r4, #0]
 8005196:	2210      	movs	r2, #16
 8005198:	e7b7      	b.n	800510a <_printf_i+0xd2>
 800519a:	064d      	lsls	r5, r1, #25
 800519c:	bf48      	it	mi
 800519e:	b29b      	uxthmi	r3, r3
 80051a0:	e7ef      	b.n	8005182 <_printf_i+0x14a>
 80051a2:	4665      	mov	r5, ip
 80051a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80051a8:	fb02 3311 	mls	r3, r2, r1, r3
 80051ac:	5cc3      	ldrb	r3, [r0, r3]
 80051ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051b2:	460b      	mov	r3, r1
 80051b4:	2900      	cmp	r1, #0
 80051b6:	d1f5      	bne.n	80051a4 <_printf_i+0x16c>
 80051b8:	e7b9      	b.n	800512e <_printf_i+0xf6>
 80051ba:	6813      	ldr	r3, [r2, #0]
 80051bc:	6825      	ldr	r5, [r4, #0]
 80051be:	1d18      	adds	r0, r3, #4
 80051c0:	6961      	ldr	r1, [r4, #20]
 80051c2:	6010      	str	r0, [r2, #0]
 80051c4:	0628      	lsls	r0, r5, #24
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	d501      	bpl.n	80051ce <_printf_i+0x196>
 80051ca:	6019      	str	r1, [r3, #0]
 80051cc:	e002      	b.n	80051d4 <_printf_i+0x19c>
 80051ce:	066a      	lsls	r2, r5, #25
 80051d0:	d5fb      	bpl.n	80051ca <_printf_i+0x192>
 80051d2:	8019      	strh	r1, [r3, #0]
 80051d4:	2300      	movs	r3, #0
 80051d6:	4665      	mov	r5, ip
 80051d8:	6123      	str	r3, [r4, #16]
 80051da:	e7b9      	b.n	8005150 <_printf_i+0x118>
 80051dc:	6813      	ldr	r3, [r2, #0]
 80051de:	1d19      	adds	r1, r3, #4
 80051e0:	6011      	str	r1, [r2, #0]
 80051e2:	681d      	ldr	r5, [r3, #0]
 80051e4:	6862      	ldr	r2, [r4, #4]
 80051e6:	2100      	movs	r1, #0
 80051e8:	4628      	mov	r0, r5
 80051ea:	f000 f837 	bl	800525c <memchr>
 80051ee:	b108      	cbz	r0, 80051f4 <_printf_i+0x1bc>
 80051f0:	1b40      	subs	r0, r0, r5
 80051f2:	6060      	str	r0, [r4, #4]
 80051f4:	6863      	ldr	r3, [r4, #4]
 80051f6:	6123      	str	r3, [r4, #16]
 80051f8:	2300      	movs	r3, #0
 80051fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051fe:	e7a7      	b.n	8005150 <_printf_i+0x118>
 8005200:	6923      	ldr	r3, [r4, #16]
 8005202:	462a      	mov	r2, r5
 8005204:	4639      	mov	r1, r7
 8005206:	4630      	mov	r0, r6
 8005208:	47c0      	blx	r8
 800520a:	3001      	adds	r0, #1
 800520c:	d0aa      	beq.n	8005164 <_printf_i+0x12c>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	079b      	lsls	r3, r3, #30
 8005212:	d413      	bmi.n	800523c <_printf_i+0x204>
 8005214:	68e0      	ldr	r0, [r4, #12]
 8005216:	9b03      	ldr	r3, [sp, #12]
 8005218:	4298      	cmp	r0, r3
 800521a:	bfb8      	it	lt
 800521c:	4618      	movlt	r0, r3
 800521e:	e7a3      	b.n	8005168 <_printf_i+0x130>
 8005220:	2301      	movs	r3, #1
 8005222:	464a      	mov	r2, r9
 8005224:	4639      	mov	r1, r7
 8005226:	4630      	mov	r0, r6
 8005228:	47c0      	blx	r8
 800522a:	3001      	adds	r0, #1
 800522c:	d09a      	beq.n	8005164 <_printf_i+0x12c>
 800522e:	3501      	adds	r5, #1
 8005230:	68e3      	ldr	r3, [r4, #12]
 8005232:	9a03      	ldr	r2, [sp, #12]
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	42ab      	cmp	r3, r5
 8005238:	dcf2      	bgt.n	8005220 <_printf_i+0x1e8>
 800523a:	e7eb      	b.n	8005214 <_printf_i+0x1dc>
 800523c:	2500      	movs	r5, #0
 800523e:	f104 0919 	add.w	r9, r4, #25
 8005242:	e7f5      	b.n	8005230 <_printf_i+0x1f8>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1ac      	bne.n	80051a2 <_printf_i+0x16a>
 8005248:	7803      	ldrb	r3, [r0, #0]
 800524a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800524e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005252:	e76c      	b.n	800512e <_printf_i+0xf6>
 8005254:	080062f9 	.word	0x080062f9
 8005258:	0800630a 	.word	0x0800630a

0800525c <memchr>:
 800525c:	b510      	push	{r4, lr}
 800525e:	b2c9      	uxtb	r1, r1
 8005260:	4402      	add	r2, r0
 8005262:	4290      	cmp	r0, r2
 8005264:	4603      	mov	r3, r0
 8005266:	d101      	bne.n	800526c <memchr+0x10>
 8005268:	2300      	movs	r3, #0
 800526a:	e003      	b.n	8005274 <memchr+0x18>
 800526c:	781c      	ldrb	r4, [r3, #0]
 800526e:	3001      	adds	r0, #1
 8005270:	428c      	cmp	r4, r1
 8005272:	d1f6      	bne.n	8005262 <memchr+0x6>
 8005274:	4618      	mov	r0, r3
 8005276:	bd10      	pop	{r4, pc}

08005278 <_free_r>:
 8005278:	b538      	push	{r3, r4, r5, lr}
 800527a:	4605      	mov	r5, r0
 800527c:	2900      	cmp	r1, #0
 800527e:	d043      	beq.n	8005308 <_free_r+0x90>
 8005280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005284:	1f0c      	subs	r4, r1, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	bfb8      	it	lt
 800528a:	18e4      	addlt	r4, r4, r3
 800528c:	f000 f8d0 	bl	8005430 <__malloc_lock>
 8005290:	4a1e      	ldr	r2, [pc, #120]	; (800530c <_free_r+0x94>)
 8005292:	6813      	ldr	r3, [r2, #0]
 8005294:	4610      	mov	r0, r2
 8005296:	b933      	cbnz	r3, 80052a6 <_free_r+0x2e>
 8005298:	6063      	str	r3, [r4, #4]
 800529a:	6014      	str	r4, [r2, #0]
 800529c:	4628      	mov	r0, r5
 800529e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052a2:	f000 b8c6 	b.w	8005432 <__malloc_unlock>
 80052a6:	42a3      	cmp	r3, r4
 80052a8:	d90b      	bls.n	80052c2 <_free_r+0x4a>
 80052aa:	6821      	ldr	r1, [r4, #0]
 80052ac:	1862      	adds	r2, r4, r1
 80052ae:	4293      	cmp	r3, r2
 80052b0:	bf01      	itttt	eq
 80052b2:	681a      	ldreq	r2, [r3, #0]
 80052b4:	685b      	ldreq	r3, [r3, #4]
 80052b6:	1852      	addeq	r2, r2, r1
 80052b8:	6022      	streq	r2, [r4, #0]
 80052ba:	6063      	str	r3, [r4, #4]
 80052bc:	6004      	str	r4, [r0, #0]
 80052be:	e7ed      	b.n	800529c <_free_r+0x24>
 80052c0:	4613      	mov	r3, r2
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	b10a      	cbz	r2, 80052ca <_free_r+0x52>
 80052c6:	42a2      	cmp	r2, r4
 80052c8:	d9fa      	bls.n	80052c0 <_free_r+0x48>
 80052ca:	6819      	ldr	r1, [r3, #0]
 80052cc:	1858      	adds	r0, r3, r1
 80052ce:	42a0      	cmp	r0, r4
 80052d0:	d10b      	bne.n	80052ea <_free_r+0x72>
 80052d2:	6820      	ldr	r0, [r4, #0]
 80052d4:	4401      	add	r1, r0
 80052d6:	1858      	adds	r0, r3, r1
 80052d8:	4282      	cmp	r2, r0
 80052da:	6019      	str	r1, [r3, #0]
 80052dc:	d1de      	bne.n	800529c <_free_r+0x24>
 80052de:	6810      	ldr	r0, [r2, #0]
 80052e0:	6852      	ldr	r2, [r2, #4]
 80052e2:	4401      	add	r1, r0
 80052e4:	6019      	str	r1, [r3, #0]
 80052e6:	605a      	str	r2, [r3, #4]
 80052e8:	e7d8      	b.n	800529c <_free_r+0x24>
 80052ea:	d902      	bls.n	80052f2 <_free_r+0x7a>
 80052ec:	230c      	movs	r3, #12
 80052ee:	602b      	str	r3, [r5, #0]
 80052f0:	e7d4      	b.n	800529c <_free_r+0x24>
 80052f2:	6820      	ldr	r0, [r4, #0]
 80052f4:	1821      	adds	r1, r4, r0
 80052f6:	428a      	cmp	r2, r1
 80052f8:	bf01      	itttt	eq
 80052fa:	6811      	ldreq	r1, [r2, #0]
 80052fc:	6852      	ldreq	r2, [r2, #4]
 80052fe:	1809      	addeq	r1, r1, r0
 8005300:	6021      	streq	r1, [r4, #0]
 8005302:	6062      	str	r2, [r4, #4]
 8005304:	605c      	str	r4, [r3, #4]
 8005306:	e7c9      	b.n	800529c <_free_r+0x24>
 8005308:	bd38      	pop	{r3, r4, r5, pc}
 800530a:	bf00      	nop
 800530c:	200004a0 	.word	0x200004a0

08005310 <_malloc_r>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	1ccd      	adds	r5, r1, #3
 8005314:	f025 0503 	bic.w	r5, r5, #3
 8005318:	3508      	adds	r5, #8
 800531a:	2d0c      	cmp	r5, #12
 800531c:	bf38      	it	cc
 800531e:	250c      	movcc	r5, #12
 8005320:	2d00      	cmp	r5, #0
 8005322:	4606      	mov	r6, r0
 8005324:	db01      	blt.n	800532a <_malloc_r+0x1a>
 8005326:	42a9      	cmp	r1, r5
 8005328:	d903      	bls.n	8005332 <_malloc_r+0x22>
 800532a:	230c      	movs	r3, #12
 800532c:	6033      	str	r3, [r6, #0]
 800532e:	2000      	movs	r0, #0
 8005330:	bd70      	pop	{r4, r5, r6, pc}
 8005332:	f000 f87d 	bl	8005430 <__malloc_lock>
 8005336:	4a21      	ldr	r2, [pc, #132]	; (80053bc <_malloc_r+0xac>)
 8005338:	6814      	ldr	r4, [r2, #0]
 800533a:	4621      	mov	r1, r4
 800533c:	b991      	cbnz	r1, 8005364 <_malloc_r+0x54>
 800533e:	4c20      	ldr	r4, [pc, #128]	; (80053c0 <_malloc_r+0xb0>)
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	b91b      	cbnz	r3, 800534c <_malloc_r+0x3c>
 8005344:	4630      	mov	r0, r6
 8005346:	f000 f863 	bl	8005410 <_sbrk_r>
 800534a:	6020      	str	r0, [r4, #0]
 800534c:	4629      	mov	r1, r5
 800534e:	4630      	mov	r0, r6
 8005350:	f000 f85e 	bl	8005410 <_sbrk_r>
 8005354:	1c43      	adds	r3, r0, #1
 8005356:	d124      	bne.n	80053a2 <_malloc_r+0x92>
 8005358:	230c      	movs	r3, #12
 800535a:	4630      	mov	r0, r6
 800535c:	6033      	str	r3, [r6, #0]
 800535e:	f000 f868 	bl	8005432 <__malloc_unlock>
 8005362:	e7e4      	b.n	800532e <_malloc_r+0x1e>
 8005364:	680b      	ldr	r3, [r1, #0]
 8005366:	1b5b      	subs	r3, r3, r5
 8005368:	d418      	bmi.n	800539c <_malloc_r+0x8c>
 800536a:	2b0b      	cmp	r3, #11
 800536c:	d90f      	bls.n	800538e <_malloc_r+0x7e>
 800536e:	600b      	str	r3, [r1, #0]
 8005370:	18cc      	adds	r4, r1, r3
 8005372:	50cd      	str	r5, [r1, r3]
 8005374:	4630      	mov	r0, r6
 8005376:	f000 f85c 	bl	8005432 <__malloc_unlock>
 800537a:	f104 000b 	add.w	r0, r4, #11
 800537e:	1d23      	adds	r3, r4, #4
 8005380:	f020 0007 	bic.w	r0, r0, #7
 8005384:	1ac3      	subs	r3, r0, r3
 8005386:	d0d3      	beq.n	8005330 <_malloc_r+0x20>
 8005388:	425a      	negs	r2, r3
 800538a:	50e2      	str	r2, [r4, r3]
 800538c:	e7d0      	b.n	8005330 <_malloc_r+0x20>
 800538e:	684b      	ldr	r3, [r1, #4]
 8005390:	428c      	cmp	r4, r1
 8005392:	bf16      	itet	ne
 8005394:	6063      	strne	r3, [r4, #4]
 8005396:	6013      	streq	r3, [r2, #0]
 8005398:	460c      	movne	r4, r1
 800539a:	e7eb      	b.n	8005374 <_malloc_r+0x64>
 800539c:	460c      	mov	r4, r1
 800539e:	6849      	ldr	r1, [r1, #4]
 80053a0:	e7cc      	b.n	800533c <_malloc_r+0x2c>
 80053a2:	1cc4      	adds	r4, r0, #3
 80053a4:	f024 0403 	bic.w	r4, r4, #3
 80053a8:	42a0      	cmp	r0, r4
 80053aa:	d005      	beq.n	80053b8 <_malloc_r+0xa8>
 80053ac:	1a21      	subs	r1, r4, r0
 80053ae:	4630      	mov	r0, r6
 80053b0:	f000 f82e 	bl	8005410 <_sbrk_r>
 80053b4:	3001      	adds	r0, #1
 80053b6:	d0cf      	beq.n	8005358 <_malloc_r+0x48>
 80053b8:	6025      	str	r5, [r4, #0]
 80053ba:	e7db      	b.n	8005374 <_malloc_r+0x64>
 80053bc:	200004a0 	.word	0x200004a0
 80053c0:	200004a4 	.word	0x200004a4

080053c4 <_realloc_r>:
 80053c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c6:	4607      	mov	r7, r0
 80053c8:	4614      	mov	r4, r2
 80053ca:	460e      	mov	r6, r1
 80053cc:	b921      	cbnz	r1, 80053d8 <_realloc_r+0x14>
 80053ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80053d2:	4611      	mov	r1, r2
 80053d4:	f7ff bf9c 	b.w	8005310 <_malloc_r>
 80053d8:	b922      	cbnz	r2, 80053e4 <_realloc_r+0x20>
 80053da:	f7ff ff4d 	bl	8005278 <_free_r>
 80053de:	4625      	mov	r5, r4
 80053e0:	4628      	mov	r0, r5
 80053e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053e4:	f000 f826 	bl	8005434 <_malloc_usable_size_r>
 80053e8:	42a0      	cmp	r0, r4
 80053ea:	d20f      	bcs.n	800540c <_realloc_r+0x48>
 80053ec:	4621      	mov	r1, r4
 80053ee:	4638      	mov	r0, r7
 80053f0:	f7ff ff8e 	bl	8005310 <_malloc_r>
 80053f4:	4605      	mov	r5, r0
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d0f2      	beq.n	80053e0 <_realloc_r+0x1c>
 80053fa:	4631      	mov	r1, r6
 80053fc:	4622      	mov	r2, r4
 80053fe:	f7ff fc07 	bl	8004c10 <memcpy>
 8005402:	4631      	mov	r1, r6
 8005404:	4638      	mov	r0, r7
 8005406:	f7ff ff37 	bl	8005278 <_free_r>
 800540a:	e7e9      	b.n	80053e0 <_realloc_r+0x1c>
 800540c:	4635      	mov	r5, r6
 800540e:	e7e7      	b.n	80053e0 <_realloc_r+0x1c>

08005410 <_sbrk_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	2300      	movs	r3, #0
 8005414:	4c05      	ldr	r4, [pc, #20]	; (800542c <_sbrk_r+0x1c>)
 8005416:	4605      	mov	r5, r0
 8005418:	4608      	mov	r0, r1
 800541a:	6023      	str	r3, [r4, #0]
 800541c:	f7fc fc06 	bl	8001c2c <_sbrk>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d102      	bne.n	800542a <_sbrk_r+0x1a>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	b103      	cbz	r3, 800542a <_sbrk_r+0x1a>
 8005428:	602b      	str	r3, [r5, #0]
 800542a:	bd38      	pop	{r3, r4, r5, pc}
 800542c:	2000073c 	.word	0x2000073c

08005430 <__malloc_lock>:
 8005430:	4770      	bx	lr

08005432 <__malloc_unlock>:
 8005432:	4770      	bx	lr

08005434 <_malloc_usable_size_r>:
 8005434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005438:	1f18      	subs	r0, r3, #4
 800543a:	2b00      	cmp	r3, #0
 800543c:	bfbc      	itt	lt
 800543e:	580b      	ldrlt	r3, [r1, r0]
 8005440:	18c0      	addlt	r0, r0, r3
 8005442:	4770      	bx	lr

08005444 <_init>:
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	bf00      	nop
 8005448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544a:	bc08      	pop	{r3}
 800544c:	469e      	mov	lr, r3
 800544e:	4770      	bx	lr

08005450 <_fini>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	bf00      	nop
 8005454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005456:	bc08      	pop	{r3}
 8005458:	469e      	mov	lr, r3
 800545a:	4770      	bx	lr
