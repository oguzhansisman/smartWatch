
smart_watch_v_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f28  08004018  08004018  00014018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f40  08004f40  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004f40  08004f40  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f40  08004f40  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f40  08004f40  00014f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f44  08004f44  00014f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  20000078  08004fc0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  08004fc0  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f783  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020ff  00000000  00000000  0002f824  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df8  00000000  00000000  00031928  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d10  00000000  00000000  00032720  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c66  00000000  00000000  00033430  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b362  00000000  00000000  0004c096  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c34c  00000000  00000000  000573f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3744  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004154  00000000  00000000  000e37c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004000 	.word	0x08004000

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004000 	.word	0x08004000

0800014c <menu_ac>:




void menu_ac(uint8_t menu, uint8_t secili)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	switch(menu)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	2b03      	cmp	r3, #3
 8000160:	d82f      	bhi.n	80001c2 <menu_ac+0x76>
 8000162:	a201      	add	r2, pc, #4	; (adr r2, 8000168 <menu_ac+0x1c>)
 8000164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000168:	08000179 	.word	0x08000179
 800016c:	08000183 	.word	0x08000183
 8000170:	0800018b 	.word	0x0800018b
 8000174:	080001bb 	.word	0x080001bb
	{
		case ANA_SAYFA:
			anasayfa_ac(secili);
 8000178:	79bb      	ldrb	r3, [r7, #6]
 800017a:	4618      	mov	r0, r3
 800017c:	f000 f834 	bl	80001e8 <anasayfa_ac>
			break;
 8000180:	e020      	b.n	80001c4 <menu_ac+0x78>
		case ADIM:
			printf("Bugün attıgınız adım sayisi 12\n");
 8000182:	4812      	ldr	r0, [pc, #72]	; (80001cc <menu_ac+0x80>)
 8000184:	f003 f85e 	bl	8003244 <puts>
			break;
 8000188:	e01c      	b.n	80001c4 <menu_ac+0x78>
		case TELEFON:
			printf("Telefona baglan");
 800018a:	4811      	ldr	r0, [pc, #68]	; (80001d0 <menu_ac+0x84>)
 800018c:	f002 ffe6 	bl	800315c <iprintf>
			switch (secili)
 8000190:	79bb      	ldrb	r3, [r7, #6]
 8000192:	2b01      	cmp	r3, #1
 8000194:	d002      	beq.n	800019c <menu_ac+0x50>
 8000196:	2b02      	cmp	r3, #2
 8000198:	d007      	beq.n	80001aa <menu_ac+0x5e>
			case 2:
				printf("Baglantiyi kes\n");
				printf("->Baglan");
				break;
			default:
				break;
 800019a:	e00d      	b.n	80001b8 <menu_ac+0x6c>
				printf("->Baglantiyi kes\n");
 800019c:	480d      	ldr	r0, [pc, #52]	; (80001d4 <menu_ac+0x88>)
 800019e:	f003 f851 	bl	8003244 <puts>
				printf("Baglan");
 80001a2:	480d      	ldr	r0, [pc, #52]	; (80001d8 <menu_ac+0x8c>)
 80001a4:	f002 ffda 	bl	800315c <iprintf>
				break;
 80001a8:	e006      	b.n	80001b8 <menu_ac+0x6c>
				printf("Baglantiyi kes\n");
 80001aa:	480c      	ldr	r0, [pc, #48]	; (80001dc <menu_ac+0x90>)
 80001ac:	f003 f84a 	bl	8003244 <puts>
				printf("->Baglan");
 80001b0:	480b      	ldr	r0, [pc, #44]	; (80001e0 <menu_ac+0x94>)
 80001b2:	f002 ffd3 	bl	800315c <iprintf>
				break;
 80001b6:	bf00      	nop
			}
			break;
 80001b8:	e004      	b.n	80001c4 <menu_ac+0x78>
		case SICAKLIK:
			printf("Anlik ortam sicakligi: 25");
 80001ba:	480a      	ldr	r0, [pc, #40]	; (80001e4 <menu_ac+0x98>)
 80001bc:	f002 ffce 	bl	800315c <iprintf>
			break;
 80001c0:	e000      	b.n	80001c4 <menu_ac+0x78>
		default:
			break;
 80001c2:	bf00      	nop
	}
}
 80001c4:	bf00      	nop
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	08004018 	.word	0x08004018
 80001d0:	0800403c 	.word	0x0800403c
 80001d4:	0800404c 	.word	0x0800404c
 80001d8:	08004060 	.word	0x08004060
 80001dc:	08004068 	.word	0x08004068
 80001e0:	08004078 	.word	0x08004078
 80001e4:	08004084 	.word	0x08004084

080001e8 <anasayfa_ac>:



void anasayfa_ac(uint8_t secili)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
	ssd1306_Fill(Black);
 80001f2:	2000      	movs	r0, #0
 80001f4:	f000 fb16 	bl	8000824 <ssd1306_Fill>
	switch(secili)
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	3b01      	subs	r3, #1
 80001fc:	2b05      	cmp	r3, #5
 80001fe:	f200 80d3 	bhi.w	80003a8 <anasayfa_ac+0x1c0>
 8000202:	a201      	add	r2, pc, #4	; (adr r2, 8000208 <anasayfa_ac+0x20>)
 8000204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000208:	08000221 	.word	0x08000221
 800020c:	08000263 	.word	0x08000263
 8000210:	080002a5 	.word	0x080002a5
 8000214:	080002e7 	.word	0x080002e7
 8000218:	08000329 	.word	0x08000329
 800021c:	08000369 	.word	0x08000369
	{
	case 1:
		ssd1306_SetCursor(2, 0);
 8000220:	2100      	movs	r1, #0
 8000222:	2002      	movs	r0, #2
 8000224:	f000 fc54 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("->Nabiz", Font_11x18, White);
 8000228:	4a62      	ldr	r2, [pc, #392]	; (80003b4 <anasayfa_ac+0x1cc>)
 800022a:	2301      	movs	r3, #1
 800022c:	ca06      	ldmia	r2, {r1, r2}
 800022e:	4862      	ldr	r0, [pc, #392]	; (80003b8 <anasayfa_ac+0x1d0>)
 8000230:	f000 fc28 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 8000234:	2113      	movs	r1, #19
 8000236:	2002      	movs	r0, #2
 8000238:	f000 fc4a 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("Adim", Font_11x18, White);
 800023c:	4a5d      	ldr	r2, [pc, #372]	; (80003b4 <anasayfa_ac+0x1cc>)
 800023e:	2301      	movs	r3, #1
 8000240:	ca06      	ldmia	r2, {r1, r2}
 8000242:	485e      	ldr	r0, [pc, #376]	; (80003bc <anasayfa_ac+0x1d4>)
 8000244:	f000 fc1e 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 8000248:	2126      	movs	r1, #38	; 0x26
 800024a:	2002      	movs	r0, #2
 800024c:	f000 fc40 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 8000250:	4a58      	ldr	r2, [pc, #352]	; (80003b4 <anasayfa_ac+0x1cc>)
 8000252:	2301      	movs	r3, #1
 8000254:	ca06      	ldmia	r2, {r1, r2}
 8000256:	485a      	ldr	r0, [pc, #360]	; (80003c0 <anasayfa_ac+0x1d8>)
 8000258:	f000 fc14 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800025c:	f000 fb04 	bl	8000868 <ssd1306_UpdateScreen>
		break;
 8000260:	e0a3      	b.n	80003aa <anasayfa_ac+0x1c2>
	case 2:
		ssd1306_SetCursor(2, 0);
 8000262:	2100      	movs	r1, #0
 8000264:	2002      	movs	r0, #2
 8000266:	f000 fc33 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("Nabiz", Font_11x18, White);
 800026a:	4a52      	ldr	r2, [pc, #328]	; (80003b4 <anasayfa_ac+0x1cc>)
 800026c:	2301      	movs	r3, #1
 800026e:	ca06      	ldmia	r2, {r1, r2}
 8000270:	4854      	ldr	r0, [pc, #336]	; (80003c4 <anasayfa_ac+0x1dc>)
 8000272:	f000 fc07 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 8000276:	2113      	movs	r1, #19
 8000278:	2002      	movs	r0, #2
 800027a:	f000 fc29 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("->Adim", Font_11x18, White);
 800027e:	4a4d      	ldr	r2, [pc, #308]	; (80003b4 <anasayfa_ac+0x1cc>)
 8000280:	2301      	movs	r3, #1
 8000282:	ca06      	ldmia	r2, {r1, r2}
 8000284:	4850      	ldr	r0, [pc, #320]	; (80003c8 <anasayfa_ac+0x1e0>)
 8000286:	f000 fbfd 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 800028a:	2126      	movs	r1, #38	; 0x26
 800028c:	2002      	movs	r0, #2
 800028e:	f000 fc1f 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 8000292:	4a48      	ldr	r2, [pc, #288]	; (80003b4 <anasayfa_ac+0x1cc>)
 8000294:	2301      	movs	r3, #1
 8000296:	ca06      	ldmia	r2, {r1, r2}
 8000298:	4849      	ldr	r0, [pc, #292]	; (80003c0 <anasayfa_ac+0x1d8>)
 800029a:	f000 fbf3 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800029e:	f000 fae3 	bl	8000868 <ssd1306_UpdateScreen>
		break;
 80002a2:	e082      	b.n	80003aa <anasayfa_ac+0x1c2>
	case 3:
		ssd1306_SetCursor(2, 0);
 80002a4:	2100      	movs	r1, #0
 80002a6:	2002      	movs	r0, #2
 80002a8:	f000 fc12 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("Nabiz", Font_11x18, White);
 80002ac:	4a41      	ldr	r2, [pc, #260]	; (80003b4 <anasayfa_ac+0x1cc>)
 80002ae:	2301      	movs	r3, #1
 80002b0:	ca06      	ldmia	r2, {r1, r2}
 80002b2:	4844      	ldr	r0, [pc, #272]	; (80003c4 <anasayfa_ac+0x1dc>)
 80002b4:	f000 fbe6 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 80002b8:	2113      	movs	r1, #19
 80002ba:	2002      	movs	r0, #2
 80002bc:	f000 fc08 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("Adim", Font_11x18, White);
 80002c0:	4a3c      	ldr	r2, [pc, #240]	; (80003b4 <anasayfa_ac+0x1cc>)
 80002c2:	2301      	movs	r3, #1
 80002c4:	ca06      	ldmia	r2, {r1, r2}
 80002c6:	483d      	ldr	r0, [pc, #244]	; (80003bc <anasayfa_ac+0x1d4>)
 80002c8:	f000 fbdc 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 80002cc:	2126      	movs	r1, #38	; 0x26
 80002ce:	2002      	movs	r0, #2
 80002d0:	f000 fbfe 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("->Telefon", Font_11x18, White);
 80002d4:	4a37      	ldr	r2, [pc, #220]	; (80003b4 <anasayfa_ac+0x1cc>)
 80002d6:	2301      	movs	r3, #1
 80002d8:	ca06      	ldmia	r2, {r1, r2}
 80002da:	483c      	ldr	r0, [pc, #240]	; (80003cc <anasayfa_ac+0x1e4>)
 80002dc:	f000 fbd2 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80002e0:	f000 fac2 	bl	8000868 <ssd1306_UpdateScreen>
		break;
 80002e4:	e061      	b.n	80003aa <anasayfa_ac+0x1c2>
	case 4:
		ssd1306_SetCursor(2, 0);
 80002e6:	2100      	movs	r1, #0
 80002e8:	2002      	movs	r0, #2
 80002ea:	f000 fbf1 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("Adim", Font_11x18, White);
 80002ee:	4a31      	ldr	r2, [pc, #196]	; (80003b4 <anasayfa_ac+0x1cc>)
 80002f0:	2301      	movs	r3, #1
 80002f2:	ca06      	ldmia	r2, {r1, r2}
 80002f4:	4831      	ldr	r0, [pc, #196]	; (80003bc <anasayfa_ac+0x1d4>)
 80002f6:	f000 fbc5 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 80002fa:	2113      	movs	r1, #19
 80002fc:	2002      	movs	r0, #2
 80002fe:	f000 fbe7 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 8000302:	4a2c      	ldr	r2, [pc, #176]	; (80003b4 <anasayfa_ac+0x1cc>)
 8000304:	2301      	movs	r3, #1
 8000306:	ca06      	ldmia	r2, {r1, r2}
 8000308:	482d      	ldr	r0, [pc, #180]	; (80003c0 <anasayfa_ac+0x1d8>)
 800030a:	f000 fbbb 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 800030e:	2126      	movs	r1, #38	; 0x26
 8000310:	2002      	movs	r0, #2
 8000312:	f000 fbdd 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("->Sicaklik", Font_11x18, White);
 8000316:	4a27      	ldr	r2, [pc, #156]	; (80003b4 <anasayfa_ac+0x1cc>)
 8000318:	2301      	movs	r3, #1
 800031a:	ca06      	ldmia	r2, {r1, r2}
 800031c:	482c      	ldr	r0, [pc, #176]	; (80003d0 <anasayfa_ac+0x1e8>)
 800031e:	f000 fbb1 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000322:	f000 faa1 	bl	8000868 <ssd1306_UpdateScreen>
		break;
 8000326:	e040      	b.n	80003aa <anasayfa_ac+0x1c2>
	case 5:
		ssd1306_SetCursor(2, 0);
 8000328:	2100      	movs	r1, #0
 800032a:	2002      	movs	r0, #2
 800032c:	f000 fbd0 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("Telefon", Font_11x18, White);
 8000330:	4a20      	ldr	r2, [pc, #128]	; (80003b4 <anasayfa_ac+0x1cc>)
 8000332:	2301      	movs	r3, #1
 8000334:	ca06      	ldmia	r2, {r1, r2}
 8000336:	4822      	ldr	r0, [pc, #136]	; (80003c0 <anasayfa_ac+0x1d8>)
 8000338:	f000 fba4 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 800033c:	2113      	movs	r1, #19
 800033e:	2002      	movs	r0, #2
 8000340:	f000 fbc6 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("Sicaklik", Font_11x18, White);
 8000344:	4a1b      	ldr	r2, [pc, #108]	; (80003b4 <anasayfa_ac+0x1cc>)
 8000346:	2301      	movs	r3, #1
 8000348:	ca06      	ldmia	r2, {r1, r2}
 800034a:	4822      	ldr	r0, [pc, #136]	; (80003d4 <anasayfa_ac+0x1ec>)
 800034c:	f000 fb9a 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 8000350:	2126      	movs	r1, #38	; 0x26
 8000352:	2002      	movs	r0, #2
 8000354:	f000 fbbc 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("->Saat Yuzu", Font_11x18, White);
 8000358:	4a16      	ldr	r2, [pc, #88]	; (80003b4 <anasayfa_ac+0x1cc>)
 800035a:	2301      	movs	r3, #1
 800035c:	ca06      	ldmia	r2, {r1, r2}
 800035e:	481e      	ldr	r0, [pc, #120]	; (80003d8 <anasayfa_ac+0x1f0>)
 8000360:	f000 fb90 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000364:	f000 fa80 	bl	8000868 <ssd1306_UpdateScreen>
	case 6:
		ssd1306_SetCursor(2, 0);
 8000368:	2100      	movs	r1, #0
 800036a:	2002      	movs	r0, #2
 800036c:	f000 fbb0 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("Sicaklik", Font_11x18, White);
 8000370:	4a10      	ldr	r2, [pc, #64]	; (80003b4 <anasayfa_ac+0x1cc>)
 8000372:	2301      	movs	r3, #1
 8000374:	ca06      	ldmia	r2, {r1, r2}
 8000376:	4817      	ldr	r0, [pc, #92]	; (80003d4 <anasayfa_ac+0x1ec>)
 8000378:	f000 fb84 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 19);
 800037c:	2113      	movs	r1, #19
 800037e:	2002      	movs	r0, #2
 8000380:	f000 fba6 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("Saat Yuzu", Font_11x18, White);
 8000384:	4a0b      	ldr	r2, [pc, #44]	; (80003b4 <anasayfa_ac+0x1cc>)
 8000386:	2301      	movs	r3, #1
 8000388:	ca06      	ldmia	r2, {r1, r2}
 800038a:	4814      	ldr	r0, [pc, #80]	; (80003dc <anasayfa_ac+0x1f4>)
 800038c:	f000 fb7a 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_SetCursor(2, 38);
 8000390:	2126      	movs	r1, #38	; 0x26
 8000392:	2002      	movs	r0, #2
 8000394:	f000 fb9c 	bl	8000ad0 <ssd1306_SetCursor>
		ssd1306_WriteString("->Saat Ayarla", Font_11x18, White);
 8000398:	4a06      	ldr	r2, [pc, #24]	; (80003b4 <anasayfa_ac+0x1cc>)
 800039a:	2301      	movs	r3, #1
 800039c:	ca06      	ldmia	r2, {r1, r2}
 800039e:	4810      	ldr	r0, [pc, #64]	; (80003e0 <anasayfa_ac+0x1f8>)
 80003a0:	f000 fb70 	bl	8000a84 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80003a4:	f000 fa60 	bl	8000868 <ssd1306_UpdateScreen>
	default:
		break;
 80003a8:	bf00      	nop
	}

}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000000 	.word	0x20000000
 80003b8:	080040a0 	.word	0x080040a0
 80003bc:	080040a8 	.word	0x080040a8
 80003c0:	080040b0 	.word	0x080040b0
 80003c4:	080040b8 	.word	0x080040b8
 80003c8:	080040c0 	.word	0x080040c0
 80003cc:	080040c8 	.word	0x080040c8
 80003d0:	080040d4 	.word	0x080040d4
 80003d4:	080040e0 	.word	0x080040e0
 80003d8:	080040ec 	.word	0x080040ec
 80003dc:	080040f8 	.word	0x080040f8
 80003e0:	08004104 	.word	0x08004104

080003e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e8:	f000 fe02 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ec:	f000 f83a 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f0:	f000 f8f0 	bl	80005d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003f4:	f000 f870 	bl	80004d8 <MX_I2C1_Init>
  MX_TIM1_Init();
 80003f8:	f000 f89c 	bl	8000534 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	ssd1306_Init();
 80003fc:	f000 f9a8 	bl	8000750 <ssd1306_Init>

	ssd1306_Fill(Black);
 8000400:	2000      	movs	r0, #0
 8000402:	f000 fa0f 	bl	8000824 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8000406:	f000 fa2f 	bl	8000868 <ssd1306_UpdateScreen>

	ds3231_cfg.ay = 12;
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <main+0x70>)
 800040c:	220c      	movs	r2, #12
 800040e:	705a      	strb	r2, [r3, #1]
	ds3231_cfg.gun = 1;
 8000410:	4b10      	ldr	r3, [pc, #64]	; (8000454 <main+0x70>)
 8000412:	2201      	movs	r2, #1
 8000414:	709a      	strb	r2, [r3, #2]
	ds3231_cfg.ay_gun = 28;
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <main+0x70>)
 8000418:	221c      	movs	r2, #28
 800041a:	70da      	strb	r2, [r3, #3]
	ds3231_cfg.yil = 20;
 800041c:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <main+0x70>)
 800041e:	2214      	movs	r2, #20
 8000420:	701a      	strb	r2, [r3, #0]
	ds3231_cfg.saat = 18;
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <main+0x70>)
 8000424:	2212      	movs	r2, #18
 8000426:	711a      	strb	r2, [r3, #4]
	ds3231_cfg.dakika = 49;
 8000428:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <main+0x70>)
 800042a:	2231      	movs	r2, #49	; 0x31
 800042c:	715a      	strb	r2, [r3, #5]
	ds3231_cfg.saniye = 50;
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <main+0x70>)
 8000430:	2232      	movs	r2, #50	; 0x32
 8000432:	719a      	strb	r2, [r3, #6]

	timer_durum = 1;
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <main+0x74>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
	lcd.secili = 1;
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <main+0x78>)
 800043c:	2201      	movs	r2, #1
 800043e:	705a      	strb	r2, [r3, #1]
	lcd.menu = ANA_SAYFA;
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <main+0x78>)
 8000442:	2200      	movs	r2, #0
 8000444:	709a      	strb	r2, [r3, #2]
	HAL_I2C_DeInit(&hi2c1);
 8000446:	4806      	ldr	r0, [pc, #24]	; (8000460 <main+0x7c>)
 8000448:	f001 faec 	bl	8001a24 <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c1);
 800044c:	4804      	ldr	r0, [pc, #16]	; (8000460 <main+0x7c>)
 800044e:	f001 f9b1 	bl	80017b4 <HAL_I2C_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000452:	e7fe      	b.n	8000452 <main+0x6e>
 8000454:	200004fc 	.word	0x200004fc
 8000458:	200004ab 	.word	0x200004ab
 800045c:	200004a8 	.word	0x200004a8
 8000460:	20000524 	.word	0x20000524

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b090      	sub	sp, #64	; 0x40
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	f107 0318 	add.w	r3, r7, #24
 800046e:	2228      	movs	r2, #40	; 0x28
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f002 fe6a 	bl	800314c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000486:	2301      	movs	r3, #1
 8000488:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800048a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000490:	2300      	movs	r3, #0
 8000492:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000494:	f107 0318 	add.w	r3, r7, #24
 8000498:	4618      	mov	r0, r3
 800049a:	f001 fe09 	bl	80020b0 <HAL_RCC_OscConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x44>
  {
    Error_Handler();
 80004a4:	f000 f918 	bl	80006d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a8:	230f      	movs	r3, #15
 80004aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80004ac:	2301      	movs	r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2100      	movs	r1, #0
 80004c0:	4618      	mov	r0, r3
 80004c2:	f002 f875 	bl	80025b0 <HAL_RCC_ClockConfig>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80004cc:	f000 f904 	bl	80006d8 <Error_Handler>
  }
}
 80004d0:	bf00      	nop
 80004d2:	3740      	adds	r7, #64	; 0x40
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <MX_I2C1_Init+0x50>)
 80004de:	4a13      	ldr	r2, [pc, #76]	; (800052c <MX_I2C1_Init+0x54>)
 80004e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <MX_I2C1_Init+0x50>)
 80004e4:	4a12      	ldr	r2, [pc, #72]	; (8000530 <MX_I2C1_Init+0x58>)
 80004e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <MX_I2C1_Init+0x50>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <MX_I2C1_Init+0x50>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <MX_I2C1_Init+0x50>)
 80004f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <MX_I2C1_Init+0x50>)
 80004fe:	2200      	movs	r2, #0
 8000500:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MX_I2C1_Init+0x50>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <MX_I2C1_Init+0x50>)
 800050a:	2200      	movs	r2, #0
 800050c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_I2C1_Init+0x50>)
 8000510:	2200      	movs	r2, #0
 8000512:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <MX_I2C1_Init+0x50>)
 8000516:	f001 f94d 	bl	80017b4 <HAL_I2C_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000520:	f000 f8da 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000524 	.word	0x20000524
 800052c:	40005400 	.word	0x40005400
 8000530:	000186a0 	.word	0x000186a0

08000534 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000548:	463b      	mov	r3, r7
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000550:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <MX_TIM1_Init+0x98>)
 8000552:	4a1f      	ldr	r2, [pc, #124]	; (80005d0 <MX_TIM1_Init+0x9c>)
 8000554:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 8000556:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <MX_TIM1_Init+0x98>)
 8000558:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800055c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800055e:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <MX_TIM1_Init+0x98>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8000564:	4b19      	ldr	r3, [pc, #100]	; (80005cc <MX_TIM1_Init+0x98>)
 8000566:	2232      	movs	r2, #50	; 0x32
 8000568:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800056a:	4b18      	ldr	r3, [pc, #96]	; (80005cc <MX_TIM1_Init+0x98>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000570:	4b16      	ldr	r3, [pc, #88]	; (80005cc <MX_TIM1_Init+0x98>)
 8000572:	2200      	movs	r2, #0
 8000574:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000576:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_TIM1_Init+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800057c:	4813      	ldr	r0, [pc, #76]	; (80005cc <MX_TIM1_Init+0x98>)
 800057e:	f002 f99f 	bl	80028c0 <HAL_TIM_Base_Init>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000588:	f000 f8a6 	bl	80006d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800058c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000590:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	4619      	mov	r1, r3
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <MX_TIM1_Init+0x98>)
 800059a:	f002 fb69 	bl	8002c70 <HAL_TIM_ConfigClockSource>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80005a4:	f000 f898 	bl	80006d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a8:	2300      	movs	r3, #0
 80005aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	4619      	mov	r1, r3
 80005b4:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_TIM1_Init+0x98>)
 80005b6:	f002 fd2f 	bl	8003018 <HAL_TIMEx_MasterConfigSynchronization>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80005c0:	f000 f88a 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005c4:	bf00      	nop
 80005c6:	3718      	adds	r7, #24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000578 	.word	0x20000578
 80005d0:	40012c00 	.word	0x40012c00

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e8:	4b2e      	ldr	r3, [pc, #184]	; (80006a4 <MX_GPIO_Init+0xd0>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a2d      	ldr	r2, [pc, #180]	; (80006a4 <MX_GPIO_Init+0xd0>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <MX_GPIO_Init+0xd0>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0310 	and.w	r3, r3, #16
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <MX_GPIO_Init+0xd0>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <MX_GPIO_Init+0xd0>)
 8000606:	f043 0320 	orr.w	r3, r3, #32
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <MX_GPIO_Init+0xd0>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0320 	and.w	r3, r3, #32
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_GPIO_Init+0xd0>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <MX_GPIO_Init+0xd0>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_GPIO_Init+0xd0>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <MX_GPIO_Init+0xd0>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <MX_GPIO_Init+0xd0>)
 8000636:	f043 0308 	orr.w	r3, r3, #8
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_GPIO_Init+0xd0>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0308 	and.w	r3, r3, #8
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800064e:	4816      	ldr	r0, [pc, #88]	; (80006a8 <MX_GPIO_Init+0xd4>)
 8000650:	f001 f876 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000654:	2310      	movs	r3, #16
 8000656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_GPIO_Init+0xd8>)
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	4619      	mov	r1, r3
 8000666:	4812      	ldr	r0, [pc, #72]	; (80006b0 <MX_GPIO_Init+0xdc>)
 8000668:	f000 fe54 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800066c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2302      	movs	r3, #2
 800067c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	4619      	mov	r1, r3
 8000684:	4808      	ldr	r0, [pc, #32]	; (80006a8 <MX_GPIO_Init+0xd4>)
 8000686:	f000 fe45 	bl	8001314 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	200a      	movs	r0, #10
 8000690:	f000 fe09 	bl	80012a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000694:	200a      	movs	r0, #10
 8000696:	f000 fe22 	bl	80012de <HAL_NVIC_EnableIRQ>

}
 800069a:	bf00      	nop
 800069c:	3720      	adds	r7, #32
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010c00 	.word	0x40010c00
 80006ac:	10110000 	.word	0x10110000
 80006b0:	40010800 	.word	0x40010800

080006b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
	timer_durum = 1;
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim1);
 80006c2:	4804      	ldr	r0, [pc, #16]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006c4:	f002 f99e 	bl	8002a04 <HAL_TIM_Base_Stop_IT>

}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200004ab 	.word	0x200004ab
 80006d4:	20000578 	.word	0x20000578

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006de:	e7fe      	b.n	80006de <Error_Handler+0x6>

080006e0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy
#include "main.h"
#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af04      	add	r7, sp, #16
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, 500);
 80006f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006fa:	9302      	str	r3, [sp, #8]
 80006fc:	2301      	movs	r3, #1
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	1dfb      	adds	r3, r7, #7
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2301      	movs	r3, #1
 8000706:	2200      	movs	r2, #0
 8000708:	2178      	movs	r1, #120	; 0x78
 800070a:	4803      	ldr	r0, [pc, #12]	; (8000718 <ssd1306_WriteCommand+0x2c>)
 800070c:	f001 f9ba 	bl	8001a84 <HAL_I2C_Mem_Write>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000524 	.word	0x20000524

0800071c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af04      	add	r7, sp, #16
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, 500);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	b29b      	uxth	r3, r3
 800072a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800072e:	9202      	str	r2, [sp, #8]
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	2240      	movs	r2, #64	; 0x40
 800073a:	2178      	movs	r1, #120	; 0x78
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <ssd1306_WriteData+0x30>)
 800073e:	f001 f9a1 	bl	8001a84 <HAL_I2C_Mem_Write>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000524 	.word	0x20000524

08000750 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000754:	f7ff ffc4 	bl	80006e0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000758:	2064      	movs	r0, #100	; 0x64
 800075a:	f000 fcab 	bl	80010b4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800075e:	2000      	movs	r0, #0
 8000760:	f000 f9e2 	bl	8000b28 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000764:	2020      	movs	r0, #32
 8000766:	f7ff ffc1 	bl	80006ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800076a:	2000      	movs	r0, #0
 800076c:	f7ff ffbe 	bl	80006ec <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000770:	20b0      	movs	r0, #176	; 0xb0
 8000772:	f7ff ffbb 	bl	80006ec <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000776:	20c8      	movs	r0, #200	; 0xc8
 8000778:	f7ff ffb8 	bl	80006ec <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff ffb5 	bl	80006ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000782:	2010      	movs	r0, #16
 8000784:	f7ff ffb2 	bl	80006ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000788:	2040      	movs	r0, #64	; 0x40
 800078a:	f7ff ffaf 	bl	80006ec <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800078e:	20ff      	movs	r0, #255	; 0xff
 8000790:	f000 f9b6 	bl	8000b00 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000794:	20a1      	movs	r0, #161	; 0xa1
 8000796:	f7ff ffa9 	bl	80006ec <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800079a:	20a6      	movs	r0, #166	; 0xa6
 800079c:	f7ff ffa6 	bl	80006ec <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80007a0:	20a8      	movs	r0, #168	; 0xa8
 80007a2:	f7ff ffa3 	bl	80006ec <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80007a6:	203f      	movs	r0, #63	; 0x3f
 80007a8:	f7ff ffa0 	bl	80006ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80007ac:	20a4      	movs	r0, #164	; 0xa4
 80007ae:	f7ff ff9d 	bl	80006ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80007b2:	20d3      	movs	r0, #211	; 0xd3
 80007b4:	f7ff ff9a 	bl	80006ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff ff97 	bl	80006ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80007be:	20d5      	movs	r0, #213	; 0xd5
 80007c0:	f7ff ff94 	bl	80006ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80007c4:	20f0      	movs	r0, #240	; 0xf0
 80007c6:	f7ff ff91 	bl	80006ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80007ca:	20d9      	movs	r0, #217	; 0xd9
 80007cc:	f7ff ff8e 	bl	80006ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80007d0:	2022      	movs	r0, #34	; 0x22
 80007d2:	f7ff ff8b 	bl	80006ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80007d6:	20da      	movs	r0, #218	; 0xda
 80007d8:	f7ff ff88 	bl	80006ec <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80007dc:	2012      	movs	r0, #18
 80007de:	f7ff ff85 	bl	80006ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80007e2:	20db      	movs	r0, #219	; 0xdb
 80007e4:	f7ff ff82 	bl	80006ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80007e8:	2020      	movs	r0, #32
 80007ea:	f7ff ff7f 	bl	80006ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80007ee:	208d      	movs	r0, #141	; 0x8d
 80007f0:	f7ff ff7c 	bl	80006ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80007f4:	2014      	movs	r0, #20
 80007f6:	f7ff ff79 	bl	80006ec <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80007fa:	2001      	movs	r0, #1
 80007fc:	f000 f994 	bl	8000b28 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000800:	2000      	movs	r0, #0
 8000802:	f000 f80f 	bl	8000824 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000806:	f000 f82f 	bl	8000868 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <ssd1306_Init+0xd0>)
 800080c:	2200      	movs	r2, #0
 800080e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <ssd1306_Init+0xd0>)
 8000812:	2200      	movs	r2, #0
 8000814:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000816:	4b02      	ldr	r3, [pc, #8]	; (8000820 <ssd1306_Init+0xd0>)
 8000818:	2201      	movs	r2, #1
 800081a:	715a      	strb	r2, [r3, #5]
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000494 	.word	0x20000494

08000824 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	e00d      	b.n	8000850 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d101      	bne.n	800083e <ssd1306_Fill+0x1a>
 800083a:	2100      	movs	r1, #0
 800083c:	e000      	b.n	8000840 <ssd1306_Fill+0x1c>
 800083e:	21ff      	movs	r1, #255	; 0xff
 8000840:	4a08      	ldr	r2, [pc, #32]	; (8000864 <ssd1306_Fill+0x40>)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	4413      	add	r3, r2
 8000846:	460a      	mov	r2, r1
 8000848:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3301      	adds	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000856:	d3ed      	bcc.n	8000834 <ssd1306_Fill+0x10>
    }
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000094 	.word	0x20000094

08000868 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800086e:	2300      	movs	r3, #0
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	e016      	b.n	80008a2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	3b50      	subs	r3, #80	; 0x50
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ff36 	bl	80006ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff ff33 	bl	80006ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000886:	2010      	movs	r0, #16
 8000888:	f7ff ff30 	bl	80006ec <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	01db      	lsls	r3, r3, #7
 8000890:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <ssd1306_UpdateScreen+0x48>)
 8000892:	4413      	add	r3, r2
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff40 	bl	800071c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	3301      	adds	r3, #1
 80008a0:	71fb      	strb	r3, [r7, #7]
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b07      	cmp	r3, #7
 80008a6:	d9e5      	bls.n	8000874 <ssd1306_UpdateScreen+0xc>
    }
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000094 	.word	0x20000094

080008b4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
 80008be:	460b      	mov	r3, r1
 80008c0:	71bb      	strb	r3, [r7, #6]
 80008c2:	4613      	mov	r3, r2
 80008c4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	db48      	blt.n	8000960 <ssd1306_DrawPixel+0xac>
 80008ce:	79bb      	ldrb	r3, [r7, #6]
 80008d0:	2b3f      	cmp	r3, #63	; 0x3f
 80008d2:	d845      	bhi.n	8000960 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <ssd1306_DrawPixel+0xb8>)
 80008d6:	791b      	ldrb	r3, [r3, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d006      	beq.n	80008ea <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80008dc:	797b      	ldrb	r3, [r7, #5]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	bf0c      	ite	eq
 80008e2:	2301      	moveq	r3, #1
 80008e4:	2300      	movne	r3, #0
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80008ea:	797b      	ldrb	r3, [r7, #5]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d11a      	bne.n	8000926 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80008f0:	79fa      	ldrb	r2, [r7, #7]
 80008f2:	79bb      	ldrb	r3, [r7, #6]
 80008f4:	08db      	lsrs	r3, r3, #3
 80008f6:	b2d8      	uxtb	r0, r3
 80008f8:	4603      	mov	r3, r0
 80008fa:	01db      	lsls	r3, r3, #7
 80008fc:	4413      	add	r3, r2
 80008fe:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <ssd1306_DrawPixel+0xbc>)
 8000900:	5cd3      	ldrb	r3, [r2, r3]
 8000902:	b25a      	sxtb	r2, r3
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	2101      	movs	r1, #1
 800090c:	fa01 f303 	lsl.w	r3, r1, r3
 8000910:	b25b      	sxtb	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b259      	sxtb	r1, r3
 8000916:	79fa      	ldrb	r2, [r7, #7]
 8000918:	4603      	mov	r3, r0
 800091a:	01db      	lsls	r3, r3, #7
 800091c:	4413      	add	r3, r2
 800091e:	b2c9      	uxtb	r1, r1
 8000920:	4a13      	ldr	r2, [pc, #76]	; (8000970 <ssd1306_DrawPixel+0xbc>)
 8000922:	54d1      	strb	r1, [r2, r3]
 8000924:	e01d      	b.n	8000962 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000926:	79fa      	ldrb	r2, [r7, #7]
 8000928:	79bb      	ldrb	r3, [r7, #6]
 800092a:	08db      	lsrs	r3, r3, #3
 800092c:	b2d8      	uxtb	r0, r3
 800092e:	4603      	mov	r3, r0
 8000930:	01db      	lsls	r3, r3, #7
 8000932:	4413      	add	r3, r2
 8000934:	4a0e      	ldr	r2, [pc, #56]	; (8000970 <ssd1306_DrawPixel+0xbc>)
 8000936:	5cd3      	ldrb	r3, [r2, r3]
 8000938:	b25a      	sxtb	r2, r3
 800093a:	79bb      	ldrb	r3, [r7, #6]
 800093c:	f003 0307 	and.w	r3, r3, #7
 8000940:	2101      	movs	r1, #1
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	b25b      	sxtb	r3, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	b25b      	sxtb	r3, r3
 800094c:	4013      	ands	r3, r2
 800094e:	b259      	sxtb	r1, r3
 8000950:	79fa      	ldrb	r2, [r7, #7]
 8000952:	4603      	mov	r3, r0
 8000954:	01db      	lsls	r3, r3, #7
 8000956:	4413      	add	r3, r2
 8000958:	b2c9      	uxtb	r1, r1
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <ssd1306_DrawPixel+0xbc>)
 800095c:	54d1      	strb	r1, [r2, r3]
 800095e:	e000      	b.n	8000962 <ssd1306_DrawPixel+0xae>
        return;
 8000960:	bf00      	nop
    }
}
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000494 	.word	0x20000494
 8000970:	20000094 	.word	0x20000094

08000974 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b089      	sub	sp, #36	; 0x24
 8000978:	af00      	add	r7, sp, #0
 800097a:	4604      	mov	r4, r0
 800097c:	1d38      	adds	r0, r7, #4
 800097e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000982:	461a      	mov	r2, r3
 8000984:	4623      	mov	r3, r4
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	4613      	mov	r3, r2
 800098a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	2b1f      	cmp	r3, #31
 8000990:	d902      	bls.n	8000998 <ssd1306_WriteChar+0x24>
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	2b7e      	cmp	r3, #126	; 0x7e
 8000996:	d901      	bls.n	800099c <ssd1306_WriteChar+0x28>
        return 0;
 8000998:	2300      	movs	r3, #0
 800099a:	e06d      	b.n	8000a78 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800099c:	4b38      	ldr	r3, [pc, #224]	; (8000a80 <ssd1306_WriteChar+0x10c>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	793b      	ldrb	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	2b80      	cmp	r3, #128	; 0x80
 80009a8:	dc06      	bgt.n	80009b8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80009aa:	4b35      	ldr	r3, [pc, #212]	; (8000a80 <ssd1306_WriteChar+0x10c>)
 80009ac:	885b      	ldrh	r3, [r3, #2]
 80009ae:	461a      	mov	r2, r3
 80009b0:	797b      	ldrb	r3, [r7, #5]
 80009b2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80009b4:	2b40      	cmp	r3, #64	; 0x40
 80009b6:	dd01      	ble.n	80009bc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	e05d      	b.n	8000a78 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
 80009c0:	e04c      	b.n	8000a5c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	3b20      	subs	r3, #32
 80009c8:	7979      	ldrb	r1, [r7, #5]
 80009ca:	fb01 f303 	mul.w	r3, r1, r3
 80009ce:	4619      	mov	r1, r3
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	440b      	add	r3, r1
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
 80009e0:	e034      	b.n	8000a4c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d012      	beq.n	8000a18 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80009f2:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <ssd1306_WriteChar+0x10c>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	4413      	add	r3, r2
 80009fe:	b2d8      	uxtb	r0, r3
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <ssd1306_WriteChar+0x10c>)
 8000a02:	885b      	ldrh	r3, [r3, #2]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	7bba      	ldrb	r2, [r7, #14]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f7ff ff4f 	bl	80008b4 <ssd1306_DrawPixel>
 8000a16:	e016      	b.n	8000a46 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <ssd1306_WriteChar+0x10c>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4413      	add	r3, r2
 8000a24:	b2d8      	uxtb	r0, r3
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <ssd1306_WriteChar+0x10c>)
 8000a28:	885b      	ldrh	r3, [r3, #2]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	4413      	add	r3, r2
 8000a32:	b2d9      	uxtb	r1, r3
 8000a34:	7bbb      	ldrb	r3, [r7, #14]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	bf0c      	ite	eq
 8000a3a:	2301      	moveq	r3, #1
 8000a3c:	2300      	movne	r3, #0
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	f7ff ff37 	bl	80008b4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
 8000a4c:	793b      	ldrb	r3, [r7, #4]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d3c5      	bcc.n	80009e2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	61fb      	str	r3, [r7, #28]
 8000a5c:	797b      	ldrb	r3, [r7, #5]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d3ad      	bcc.n	80009c2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <ssd1306_WriteChar+0x10c>)
 8000a68:	881a      	ldrh	r2, [r3, #0]
 8000a6a:	793b      	ldrb	r3, [r7, #4]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	4413      	add	r3, r2
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <ssd1306_WriteChar+0x10c>)
 8000a74:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3724      	adds	r7, #36	; 0x24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd90      	pop	{r4, r7, pc}
 8000a80:	20000494 	.word	0x20000494

08000a84 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	1d38      	adds	r0, r7, #4
 8000a8e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000a92:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000a94:	e012      	b.n	8000abc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	7818      	ldrb	r0, [r3, #0]
 8000a9a:	78fb      	ldrb	r3, [r7, #3]
 8000a9c:	1d3a      	adds	r2, r7, #4
 8000a9e:	ca06      	ldmia	r2, {r1, r2}
 8000aa0:	f7ff ff68 	bl	8000974 <ssd1306_WriteChar>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d002      	beq.n	8000ab6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	e008      	b.n	8000ac8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1e8      	bne.n	8000a96 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	460a      	mov	r2, r1
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	4613      	mov	r3, r2
 8000ade:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <ssd1306_SetCursor+0x2c>)
 8000ae6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000ae8:	79bb      	ldrb	r3, [r7, #6]
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <ssd1306_SetCursor+0x2c>)
 8000aee:	805a      	strh	r2, [r3, #2]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000494 	.word	0x20000494

08000b00 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000b0a:	2381      	movs	r3, #129	; 0x81
 8000b0c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fdeb 	bl	80006ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fde7 	bl	80006ec <ssd1306_WriteCommand>
}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d005      	beq.n	8000b44 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000b38:	23af      	movs	r3, #175	; 0xaf
 8000b3a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <ssd1306_SetDisplayOn+0x38>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	719a      	strb	r2, [r3, #6]
 8000b42:	e004      	b.n	8000b4e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000b44:	23ae      	movs	r3, #174	; 0xae
 8000b46:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <ssd1306_SetDisplayOn+0x38>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fdcb 	bl	80006ec <ssd1306_WriteCommand>
}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000494 	.word	0x20000494

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6193      	str	r3, [r2, #24]
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	61d3      	str	r3, [r2, #28]
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x5c>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_MspInit+0x60>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_MspInit+0x60>)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010000 	.word	0x40010000

08000bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a15      	ldr	r2, [pc, #84]	; (8000c38 <HAL_I2C_MspInit+0x70>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d123      	bne.n	8000c30 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_I2C_MspInit+0x74>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a13      	ldr	r2, [pc, #76]	; (8000c3c <HAL_I2C_MspInit+0x74>)
 8000bee:	f043 0308 	orr.w	r3, r3, #8
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_I2C_MspInit+0x74>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0308 	and.w	r3, r3, #8
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c00:	23c0      	movs	r3, #192	; 0xc0
 8000c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c04:	2312      	movs	r3, #18
 8000c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	4619      	mov	r1, r3
 8000c12:	480b      	ldr	r0, [pc, #44]	; (8000c40 <HAL_I2C_MspInit+0x78>)
 8000c14:	f000 fb7e 	bl	8001314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <HAL_I2C_MspInit+0x74>)
 8000c1a:	69db      	ldr	r3, [r3, #28]
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <HAL_I2C_MspInit+0x74>)
 8000c1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c22:	61d3      	str	r3, [r2, #28]
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_I2C_MspInit+0x74>)
 8000c26:	69db      	ldr	r3, [r3, #28]
 8000c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010c00 	.word	0x40010c00

08000c44 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_I2C_MspDeInit+0x38>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d10d      	bne.n	8000c72 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_I2C_MspDeInit+0x3c>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <HAL_I2C_MspDeInit+0x3c>)
 8000c5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c60:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <HAL_I2C_MspDeInit+0x40>)
 8000c66:	f000 fcaf 	bl	80015c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000c6a:	2180      	movs	r1, #128	; 0x80
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <HAL_I2C_MspDeInit+0x40>)
 8000c6e:	f000 fcab 	bl	80015c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40005400 	.word	0x40005400
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010c00 	.word	0x40010c00

08000c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_TIM_Base_MspInit+0x74>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12b      	bne.n	8000cf2 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_TIM_Base_MspInit+0x78>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <HAL_TIM_Base_MspInit+0x78>)
 8000ca0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ca4:	6193      	str	r3, [r2, #24]
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_TIM_Base_MspInit+0x78>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2018      	movs	r0, #24
 8000cb8:	f000 faf5 	bl	80012a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000cbc:	2018      	movs	r0, #24
 8000cbe:	f000 fb0e 	bl	80012de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2019      	movs	r0, #25
 8000cc8:	f000 faed 	bl	80012a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ccc:	2019      	movs	r0, #25
 8000cce:	f000 fb06 	bl	80012de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	201a      	movs	r0, #26
 8000cd8:	f000 fae5 	bl	80012a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000cdc:	201a      	movs	r0, #26
 8000cde:	f000 fafe 	bl	80012de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	201b      	movs	r0, #27
 8000ce8:	f000 fadd 	bl	80012a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000cec:	201b      	movs	r0, #27
 8000cee:	f000 faf6 	bl	80012de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40012c00 	.word	0x40012c00
 8000d00:	40021000 	.word	0x40021000

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4a:	f000 f997 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000d58:	2010      	movs	r0, #16
 8000d5a:	f000 fd09 	bl	8001770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

	if(timer_durum == 1)
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <EXTI4_IRQHandler+0xa8>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d148      	bne.n	8000df8 <EXTI4_IRQHandler+0xa4>
	{
		switch (lcd.menu)
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <EXTI4_IRQHandler+0xac>)
 8000d68:	789b      	ldrb	r3, [r3, #2]
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d83d      	bhi.n	8000dea <EXTI4_IRQHandler+0x96>
 8000d6e:	a201      	add	r2, pc, #4	; (adr r2, 8000d74 <EXTI4_IRQHandler+0x20>)
 8000d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d74:	08000d85 	.word	0x08000d85
 8000d78:	08000daf 	.word	0x08000daf
 8000d7c:	08000db9 	.word	0x08000db9
 8000d80:	08000ddf 	.word	0x08000ddf
		{
		case ANA_SAYFA:
			if(lcd.secili == ANA_SAYFA_MAX_SATIR)
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <EXTI4_IRQHandler+0xac>)
 8000d86:	785b      	ldrb	r3, [r3, #1]
 8000d88:	2b07      	cmp	r3, #7
 8000d8a:	d103      	bne.n	8000d94 <EXTI4_IRQHandler+0x40>
			{
				lcd.secili = 1;
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <EXTI4_IRQHandler+0xac>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	705a      	strb	r2, [r3, #1]
 8000d92:	e005      	b.n	8000da0 <EXTI4_IRQHandler+0x4c>
			}
			else
			{
				lcd.secili ++;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <EXTI4_IRQHandler+0xac>)
 8000d96:	785b      	ldrb	r3, [r3, #1]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <EXTI4_IRQHandler+0xac>)
 8000d9e:	705a      	strb	r2, [r3, #1]
			}
			menu_ac(ANA_SAYFA, lcd.secili);
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <EXTI4_IRQHandler+0xac>)
 8000da2:	785b      	ldrb	r3, [r3, #1]
 8000da4:	4619      	mov	r1, r3
 8000da6:	2000      	movs	r0, #0
 8000da8:	f7ff f9d0 	bl	800014c <menu_ac>
			break;
 8000dac:	e01e      	b.n	8000dec <EXTI4_IRQHandler+0x98>
		case ADIM:
			menu_ac(ADIM, 1);
 8000dae:	2101      	movs	r1, #1
 8000db0:	2001      	movs	r0, #1
 8000db2:	f7ff f9cb 	bl	800014c <menu_ac>
			break;
 8000db6:	e019      	b.n	8000dec <EXTI4_IRQHandler+0x98>
		case TELEFON:
			if(lcd.secili == TELEFON_MAX_SATIR)
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <EXTI4_IRQHandler+0xac>)
 8000dba:	785b      	ldrb	r3, [r3, #1]
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d103      	bne.n	8000dc8 <EXTI4_IRQHandler+0x74>
			{
				lcd.secili = 1;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <EXTI4_IRQHandler+0xac>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	705a      	strb	r2, [r3, #1]
 8000dc6:	e002      	b.n	8000dce <EXTI4_IRQHandler+0x7a>
			}
			else
			{
				lcd.secili = 2;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <EXTI4_IRQHandler+0xac>)
 8000dca:	2202      	movs	r2, #2
 8000dcc:	705a      	strb	r2, [r3, #1]
			}
			menu_ac(lcd.menu, lcd.secili);
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <EXTI4_IRQHandler+0xac>)
 8000dd0:	789a      	ldrb	r2, [r3, #2]
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <EXTI4_IRQHandler+0xac>)
 8000dd4:	785b      	ldrb	r3, [r3, #1]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4610      	mov	r0, r2
 8000dda:	f7ff f9b7 	bl	800014c <menu_ac>
		case SICAKLIK:
			menu_ac(lcd.menu, 1);
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <EXTI4_IRQHandler+0xac>)
 8000de0:	789b      	ldrb	r3, [r3, #2]
 8000de2:	2101      	movs	r1, #1
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff f9b1 	bl	800014c <menu_ac>
		default:
			break;
 8000dea:	bf00      	nop
		}
		HAL_TIM_Base_Start_IT(&htim1);
 8000dec:	4805      	ldr	r0, [pc, #20]	; (8000e04 <EXTI4_IRQHandler+0xb0>)
 8000dee:	f001 fdb7 	bl	8002960 <HAL_TIM_Base_Start_IT>
		timer_durum = 0;
 8000df2:	4b02      	ldr	r3, [pc, #8]	; (8000dfc <EXTI4_IRQHandler+0xa8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
	}
	else
	{
	}
  /* USER CODE END EXTI4_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200004ab 	.word	0x200004ab
 8000e00:	200004a8 	.word	0x200004a8
 8000e04:	20000578 	.word	0x20000578

08000e08 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <TIM1_BRK_IRQHandler+0x10>)
 8000e0e:	f001 fe27 	bl	8002a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000578 	.word	0x20000578

08000e1c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <TIM1_UP_IRQHandler+0x10>)
 8000e22:	f001 fe1d 	bl	8002a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000578 	.word	0x20000578

08000e30 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <TIM1_TRG_COM_IRQHandler+0x10>)
 8000e36:	f001 fe13 	bl	8002a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000578 	.word	0x20000578

08000e44 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <TIM1_CC_IRQHandler+0x10>)
 8000e4a:	f001 fe09 	bl	8002a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000578 	.word	0x20000578

08000e58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	e00a      	b.n	8000e80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e6a:	f3af 8000 	nop.w
 8000e6e:	4601      	mov	r1, r0
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	b2ca      	uxtb	r2, r1
 8000e78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbf0      	blt.n	8000e6a <_read+0x12>
	}

return len;
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	e009      	b.n	8000eb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	60ba      	str	r2, [r7, #8]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf1      	blt.n	8000ea4 <_write+0x12>
	}
	return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_close>:

int _close(int file)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <_isatty>:

int _isatty(int file)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
	return 1;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr

08000f12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b085      	sub	sp, #20
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
	return 0;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
	...

08000f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <_sbrk+0x5c>)
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <_sbrk+0x60>)
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <_sbrk+0x64>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <_sbrk+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d207      	bcs.n	8000f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f5c:	f002 f8cc 	bl	80030f8 <__errno>
 8000f60:	4602      	mov	r2, r0
 8000f62:	230c      	movs	r3, #12
 8000f64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20005000 	.word	0x20005000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	2000049c 	.word	0x2000049c
 8000f94:	200005c8 	.word	0x200005c8

08000f98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fa4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000fa6:	e003      	b.n	8000fb0 <LoopCopyDataInit>

08000fa8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000faa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fae:	3104      	adds	r1, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fb0:	480a      	ldr	r0, [pc, #40]	; (8000fdc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000fb4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fb6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fb8:	d3f6      	bcc.n	8000fa8 <CopyDataInit>
  ldr r2, =_sbss
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000fbc:	e002      	b.n	8000fc4 <LoopFillZerobss>

08000fbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fc0:	f842 3b04 	str.w	r3, [r2], #4

08000fc4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000fc6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fc8:	d3f9      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fca:	f7ff ffe5 	bl	8000f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f002 f899 	bl	8003104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fd2:	f7ff fa07 	bl	80003e4 <main>
  bx lr
 8000fd6:	4770      	bx	lr
  ldr r3, =_sidata
 8000fd8:	08004f48 	.word	0x08004f48
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fe0:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8000fe4:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8000fe8:	200005c8 	.word	0x200005c8

08000fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC1_2_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_Init+0x28>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_Init+0x28>)
 8000ffa:	f043 0310 	orr.w	r3, r3, #16
 8000ffe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 f945 	bl	8001290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f808 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100c:	f7ff fdaa 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40022000 	.word	0x40022000

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x54>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x58>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f95d 	bl	80012fa <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00e      	b.n	8001068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d80a      	bhi.n	8001066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 f925 	bl	80012a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_InitTick+0x5c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000008 	.word	0x20000008
 8001074:	20000010 	.word	0x20000010
 8001078:	2000000c 	.word	0x2000000c

0800107c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_IncTick+0x1c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_IncTick+0x20>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a03      	ldr	r2, [pc, #12]	; (800109c <HAL_IncTick+0x20>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	20000010 	.word	0x20000010
 800109c:	200005c0 	.word	0x200005c0

080010a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <HAL_GetTick+0x10>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	200005c0 	.word	0x200005c0

080010b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff fff0 	bl	80010a0 <HAL_GetTick>
 80010c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010cc:	d005      	beq.n	80010da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_Delay+0x40>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010da:	bf00      	nop
 80010dc:	f7ff ffe0 	bl	80010a0 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8f7      	bhi.n	80010dc <HAL_Delay+0x28>
  {
  }
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000010 	.word	0x20000010

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	60d3      	str	r3, [r2, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	2b00      	cmp	r3, #0
 800116c:	db0b      	blt.n	8001186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	f003 021f 	and.w	r2, r3, #31
 8001174:	4906      	ldr	r1, [pc, #24]	; (8001190 <__NVIC_EnableIRQ+0x34>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	095b      	lsrs	r3, r3, #5
 800117c:	2001      	movs	r0, #1
 800117e:	fa00 f202 	lsl.w	r2, r0, r2
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	; (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800125c:	d301      	bcc.n	8001262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125e:	2301      	movs	r3, #1
 8001260:	e00f      	b.n	8001282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <SysTick_Config+0x40>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126a:	210f      	movs	r1, #15
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f7ff ff90 	bl	8001194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <SysTick_Config+0x40>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <SysTick_Config+0x40>)
 800127c:	2207      	movs	r2, #7
 800127e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	e000e010 	.word	0xe000e010

08001290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff2d 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b8:	f7ff ff42 	bl	8001140 <__NVIC_GetPriorityGrouping>
 80012bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	68b9      	ldr	r1, [r7, #8]
 80012c2:	6978      	ldr	r0, [r7, #20]
 80012c4:	f7ff ff90 	bl	80011e8 <NVIC_EncodePriority>
 80012c8:	4602      	mov	r2, r0
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff5f 	bl	8001194 <__NVIC_SetPriority>
}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff35 	bl	800115c <__NVIC_EnableIRQ>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffa2 	bl	800124c <SysTick_Config>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001314:	b480      	push	{r7}
 8001316:	b08b      	sub	sp, #44	; 0x2c
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001326:	e127      	b.n	8001578 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001328:	2201      	movs	r2, #1
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	429a      	cmp	r2, r3
 8001342:	f040 8116 	bne.w	8001572 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b12      	cmp	r3, #18
 800134c:	d034      	beq.n	80013b8 <HAL_GPIO_Init+0xa4>
 800134e:	2b12      	cmp	r3, #18
 8001350:	d80d      	bhi.n	800136e <HAL_GPIO_Init+0x5a>
 8001352:	2b02      	cmp	r3, #2
 8001354:	d02b      	beq.n	80013ae <HAL_GPIO_Init+0x9a>
 8001356:	2b02      	cmp	r3, #2
 8001358:	d804      	bhi.n	8001364 <HAL_GPIO_Init+0x50>
 800135a:	2b00      	cmp	r3, #0
 800135c:	d031      	beq.n	80013c2 <HAL_GPIO_Init+0xae>
 800135e:	2b01      	cmp	r3, #1
 8001360:	d01c      	beq.n	800139c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001362:	e048      	b.n	80013f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001364:	2b03      	cmp	r3, #3
 8001366:	d043      	beq.n	80013f0 <HAL_GPIO_Init+0xdc>
 8001368:	2b11      	cmp	r3, #17
 800136a:	d01b      	beq.n	80013a4 <HAL_GPIO_Init+0x90>
          break;
 800136c:	e043      	b.n	80013f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800136e:	4a89      	ldr	r2, [pc, #548]	; (8001594 <HAL_GPIO_Init+0x280>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d026      	beq.n	80013c2 <HAL_GPIO_Init+0xae>
 8001374:	4a87      	ldr	r2, [pc, #540]	; (8001594 <HAL_GPIO_Init+0x280>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d806      	bhi.n	8001388 <HAL_GPIO_Init+0x74>
 800137a:	4a87      	ldr	r2, [pc, #540]	; (8001598 <HAL_GPIO_Init+0x284>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d020      	beq.n	80013c2 <HAL_GPIO_Init+0xae>
 8001380:	4a86      	ldr	r2, [pc, #536]	; (800159c <HAL_GPIO_Init+0x288>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d01d      	beq.n	80013c2 <HAL_GPIO_Init+0xae>
          break;
 8001386:	e036      	b.n	80013f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001388:	4a85      	ldr	r2, [pc, #532]	; (80015a0 <HAL_GPIO_Init+0x28c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d019      	beq.n	80013c2 <HAL_GPIO_Init+0xae>
 800138e:	4a85      	ldr	r2, [pc, #532]	; (80015a4 <HAL_GPIO_Init+0x290>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d016      	beq.n	80013c2 <HAL_GPIO_Init+0xae>
 8001394:	4a84      	ldr	r2, [pc, #528]	; (80015a8 <HAL_GPIO_Init+0x294>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0xae>
          break;
 800139a:	e02c      	b.n	80013f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	623b      	str	r3, [r7, #32]
          break;
 80013a2:	e028      	b.n	80013f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	3304      	adds	r3, #4
 80013aa:	623b      	str	r3, [r7, #32]
          break;
 80013ac:	e023      	b.n	80013f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	3308      	adds	r3, #8
 80013b4:	623b      	str	r3, [r7, #32]
          break;
 80013b6:	e01e      	b.n	80013f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	330c      	adds	r3, #12
 80013be:	623b      	str	r3, [r7, #32]
          break;
 80013c0:	e019      	b.n	80013f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d102      	bne.n	80013d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ca:	2304      	movs	r3, #4
 80013cc:	623b      	str	r3, [r7, #32]
          break;
 80013ce:	e012      	b.n	80013f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d105      	bne.n	80013e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d8:	2308      	movs	r3, #8
 80013da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	611a      	str	r2, [r3, #16]
          break;
 80013e2:	e008      	b.n	80013f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e4:	2308      	movs	r3, #8
 80013e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	615a      	str	r2, [r3, #20]
          break;
 80013ee:	e002      	b.n	80013f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
          break;
 80013f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2bff      	cmp	r3, #255	; 0xff
 80013fa:	d801      	bhi.n	8001400 <HAL_GPIO_Init+0xec>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	e001      	b.n	8001404 <HAL_GPIO_Init+0xf0>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3304      	adds	r3, #4
 8001404:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	2bff      	cmp	r3, #255	; 0xff
 800140a:	d802      	bhi.n	8001412 <HAL_GPIO_Init+0xfe>
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	e002      	b.n	8001418 <HAL_GPIO_Init+0x104>
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	3b08      	subs	r3, #8
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	210f      	movs	r1, #15
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	401a      	ands	r2, r3
 800142a:	6a39      	ldr	r1, [r7, #32]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	431a      	orrs	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 8096 	beq.w	8001572 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001446:	4b59      	ldr	r3, [pc, #356]	; (80015ac <HAL_GPIO_Init+0x298>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	4a58      	ldr	r2, [pc, #352]	; (80015ac <HAL_GPIO_Init+0x298>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6193      	str	r3, [r2, #24]
 8001452:	4b56      	ldr	r3, [pc, #344]	; (80015ac <HAL_GPIO_Init+0x298>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800145e:	4a54      	ldr	r2, [pc, #336]	; (80015b0 <HAL_GPIO_Init+0x29c>)
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	3302      	adds	r3, #2
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	220f      	movs	r2, #15
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	4013      	ands	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4b      	ldr	r2, [pc, #300]	; (80015b4 <HAL_GPIO_Init+0x2a0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d013      	beq.n	80014b2 <HAL_GPIO_Init+0x19e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4a      	ldr	r2, [pc, #296]	; (80015b8 <HAL_GPIO_Init+0x2a4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00d      	beq.n	80014ae <HAL_GPIO_Init+0x19a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a49      	ldr	r2, [pc, #292]	; (80015bc <HAL_GPIO_Init+0x2a8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d007      	beq.n	80014aa <HAL_GPIO_Init+0x196>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a48      	ldr	r2, [pc, #288]	; (80015c0 <HAL_GPIO_Init+0x2ac>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_GPIO_Init+0x192>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x1a0>
 80014a6:	2304      	movs	r3, #4
 80014a8:	e004      	b.n	80014b4 <HAL_GPIO_Init+0x1a0>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e002      	b.n	80014b4 <HAL_GPIO_Init+0x1a0>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_GPIO_Init+0x1a0>
 80014b2:	2300      	movs	r3, #0
 80014b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b6:	f002 0203 	and.w	r2, r2, #3
 80014ba:	0092      	lsls	r2, r2, #2
 80014bc:	4093      	lsls	r3, r2
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014c4:	493a      	ldr	r1, [pc, #232]	; (80015b0 <HAL_GPIO_Init+0x29c>)
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d006      	beq.n	80014ec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014de:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4938      	ldr	r1, [pc, #224]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
 80014ea:	e006      	b.n	80014fa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014ec:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	4933      	ldr	r1, [pc, #204]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001506:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	492e      	ldr	r1, [pc, #184]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	604b      	str	r3, [r1, #4]
 8001512:	e006      	b.n	8001522 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001514:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	43db      	mvns	r3, r3
 800151c:	4929      	ldr	r1, [pc, #164]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 800151e:	4013      	ands	r3, r2
 8001520:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800152e:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	4924      	ldr	r1, [pc, #144]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
 800153a:	e006      	b.n	800154a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	43db      	mvns	r3, r3
 8001544:	491f      	ldr	r1, [pc, #124]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 8001546:	4013      	ands	r3, r2
 8001548:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d006      	beq.n	8001564 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	491a      	ldr	r1, [pc, #104]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	60cb      	str	r3, [r1, #12]
 8001562:	e006      	b.n	8001572 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	43db      	mvns	r3, r3
 800156c:	4915      	ldr	r1, [pc, #84]	; (80015c4 <HAL_GPIO_Init+0x2b0>)
 800156e:	4013      	ands	r3, r2
 8001570:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	3301      	adds	r3, #1
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	fa22 f303 	lsr.w	r3, r2, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	f47f aed0 	bne.w	8001328 <HAL_GPIO_Init+0x14>
  }
}
 8001588:	bf00      	nop
 800158a:	372c      	adds	r7, #44	; 0x2c
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	10210000 	.word	0x10210000
 8001598:	10110000 	.word	0x10110000
 800159c:	10120000 	.word	0x10120000
 80015a0:	10310000 	.word	0x10310000
 80015a4:	10320000 	.word	0x10320000
 80015a8:	10220000 	.word	0x10220000
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010000 	.word	0x40010000
 80015b4:	40010800 	.word	0x40010800
 80015b8:	40010c00 	.word	0x40010c00
 80015bc:	40011000 	.word	0x40011000
 80015c0:	40011400 	.word	0x40011400
 80015c4:	40010400 	.word	0x40010400

080015c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80015d6:	e09a      	b.n	800170e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80015d8:	2201      	movs	r2, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 808d 	beq.w	8001708 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80015ee:	4a4e      	ldr	r2, [pc, #312]	; (8001728 <HAL_GPIO_DeInit+0x160>)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fa:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	220f      	movs	r2, #15
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	4013      	ands	r3, r2
 800160e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a46      	ldr	r2, [pc, #280]	; (800172c <HAL_GPIO_DeInit+0x164>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d013      	beq.n	8001640 <HAL_GPIO_DeInit+0x78>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a45      	ldr	r2, [pc, #276]	; (8001730 <HAL_GPIO_DeInit+0x168>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d00d      	beq.n	800163c <HAL_GPIO_DeInit+0x74>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a44      	ldr	r2, [pc, #272]	; (8001734 <HAL_GPIO_DeInit+0x16c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d007      	beq.n	8001638 <HAL_GPIO_DeInit+0x70>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a43      	ldr	r2, [pc, #268]	; (8001738 <HAL_GPIO_DeInit+0x170>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d101      	bne.n	8001634 <HAL_GPIO_DeInit+0x6c>
 8001630:	2303      	movs	r3, #3
 8001632:	e006      	b.n	8001642 <HAL_GPIO_DeInit+0x7a>
 8001634:	2304      	movs	r3, #4
 8001636:	e004      	b.n	8001642 <HAL_GPIO_DeInit+0x7a>
 8001638:	2302      	movs	r3, #2
 800163a:	e002      	b.n	8001642 <HAL_GPIO_DeInit+0x7a>
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <HAL_GPIO_DeInit+0x7a>
 8001640:	2300      	movs	r3, #0
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	f002 0203 	and.w	r2, r2, #3
 8001648:	0092      	lsls	r2, r2, #2
 800164a:	4093      	lsls	r3, r2
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	429a      	cmp	r2, r3
 8001650:	d132      	bne.n	80016b8 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001662:	4a31      	ldr	r2, [pc, #196]	; (8001728 <HAL_GPIO_DeInit+0x160>)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	43da      	mvns	r2, r3
 8001672:	482d      	ldr	r0, [pc, #180]	; (8001728 <HAL_GPIO_DeInit+0x160>)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	400a      	ands	r2, r1
 800167a:	3302      	adds	r3, #2
 800167c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001680:	4b2e      	ldr	r3, [pc, #184]	; (800173c <HAL_GPIO_DeInit+0x174>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	43db      	mvns	r3, r3
 8001688:	492c      	ldr	r1, [pc, #176]	; (800173c <HAL_GPIO_DeInit+0x174>)
 800168a:	4013      	ands	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800168e:	4b2b      	ldr	r3, [pc, #172]	; (800173c <HAL_GPIO_DeInit+0x174>)
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	43db      	mvns	r3, r3
 8001696:	4929      	ldr	r1, [pc, #164]	; (800173c <HAL_GPIO_DeInit+0x174>)
 8001698:	4013      	ands	r3, r2
 800169a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800169c:	4b27      	ldr	r3, [pc, #156]	; (800173c <HAL_GPIO_DeInit+0x174>)
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	4925      	ldr	r1, [pc, #148]	; (800173c <HAL_GPIO_DeInit+0x174>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <HAL_GPIO_DeInit+0x174>)
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4922      	ldr	r1, [pc, #136]	; (800173c <HAL_GPIO_DeInit+0x174>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2bff      	cmp	r3, #255	; 0xff
 80016bc:	d801      	bhi.n	80016c2 <HAL_GPIO_DeInit+0xfa>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	e001      	b.n	80016c6 <HAL_GPIO_DeInit+0xfe>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3304      	adds	r3, #4
 80016c6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2bff      	cmp	r3, #255	; 0xff
 80016cc:	d802      	bhi.n	80016d4 <HAL_GPIO_DeInit+0x10c>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	e002      	b.n	80016da <HAL_GPIO_DeInit+0x112>
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	3b08      	subs	r3, #8
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	210f      	movs	r1, #15
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	401a      	ands	r2, r3
 80016ec:	2104      	movs	r1, #4
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	431a      	orrs	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	43db      	mvns	r3, r3
 8001702:	401a      	ands	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	3301      	adds	r3, #1
 800170c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	fa22 f303 	lsr.w	r3, r2, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	f47f af5e 	bne.w	80015d8 <HAL_GPIO_DeInit+0x10>
  }
}
 800171c:	bf00      	nop
 800171e:	3724      	adds	r7, #36	; 0x24
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40010000 	.word	0x40010000
 800172c:	40010800 	.word	0x40010800
 8001730:	40010c00 	.word	0x40010c00
 8001734:	40011000 	.word	0x40011000
 8001738:	40011400 	.word	0x40011400
 800173c:	40010400 	.word	0x40010400

08001740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001750:	787b      	ldrb	r3, [r7, #1]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800175c:	e003      	b.n	8001766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	041a      	lsls	r2, r3, #16
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	611a      	str	r2, [r3, #16]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800177c:	695a      	ldr	r2, [r3, #20]
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d006      	beq.n	8001794 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f806 	bl	80017a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40010400 	.word	0x40010400

080017a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e11f      	b.n	8001a06 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d106      	bne.n	80017e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff f9f4 	bl	8000bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2224      	movs	r2, #36	; 0x24
 80017e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0201 	bic.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001806:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001816:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001818:	f001 f820 	bl	800285c <HAL_RCC_GetPCLK1Freq>
 800181c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4a7b      	ldr	r2, [pc, #492]	; (8001a10 <HAL_I2C_Init+0x25c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d807      	bhi.n	8001838 <HAL_I2C_Init+0x84>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4a7a      	ldr	r2, [pc, #488]	; (8001a14 <HAL_I2C_Init+0x260>)
 800182c:	4293      	cmp	r3, r2
 800182e:	bf94      	ite	ls
 8001830:	2301      	movls	r3, #1
 8001832:	2300      	movhi	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	e006      	b.n	8001846 <HAL_I2C_Init+0x92>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4a77      	ldr	r2, [pc, #476]	; (8001a18 <HAL_I2C_Init+0x264>)
 800183c:	4293      	cmp	r3, r2
 800183e:	bf94      	ite	ls
 8001840:	2301      	movls	r3, #1
 8001842:	2300      	movhi	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0db      	b.n	8001a06 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4a72      	ldr	r2, [pc, #456]	; (8001a1c <HAL_I2C_Init+0x268>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	0c9b      	lsrs	r3, r3, #18
 8001858:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	430a      	orrs	r2, r1
 800186c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a64      	ldr	r2, [pc, #400]	; (8001a10 <HAL_I2C_Init+0x25c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d802      	bhi.n	8001888 <HAL_I2C_Init+0xd4>
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	3301      	adds	r3, #1
 8001886:	e009      	b.n	800189c <HAL_I2C_Init+0xe8>
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	4a63      	ldr	r2, [pc, #396]	; (8001a20 <HAL_I2C_Init+0x26c>)
 8001894:	fba2 2303 	umull	r2, r3, r2, r3
 8001898:	099b      	lsrs	r3, r3, #6
 800189a:	3301      	adds	r3, #1
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4956      	ldr	r1, [pc, #344]	; (8001a10 <HAL_I2C_Init+0x25c>)
 80018b8:	428b      	cmp	r3, r1
 80018ba:	d80d      	bhi.n	80018d8 <HAL_I2C_Init+0x124>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1e59      	subs	r1, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ca:	3301      	adds	r3, #1
 80018cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	bf38      	it	cc
 80018d4:	2304      	movcc	r3, #4
 80018d6:	e04f      	b.n	8001978 <HAL_I2C_Init+0x1c4>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d111      	bne.n	8001904 <HAL_I2C_Init+0x150>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	1e58      	subs	r0, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6859      	ldr	r1, [r3, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	440b      	add	r3, r1
 80018ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f2:	3301      	adds	r3, #1
 80018f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf0c      	ite	eq
 80018fc:	2301      	moveq	r3, #1
 80018fe:	2300      	movne	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	e012      	b.n	800192a <HAL_I2C_Init+0x176>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1e58      	subs	r0, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6859      	ldr	r1, [r3, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	0099      	lsls	r1, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	fbb0 f3f3 	udiv	r3, r0, r3
 800191a:	3301      	adds	r3, #1
 800191c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf0c      	ite	eq
 8001924:	2301      	moveq	r3, #1
 8001926:	2300      	movne	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_I2C_Init+0x17e>
 800192e:	2301      	movs	r3, #1
 8001930:	e022      	b.n	8001978 <HAL_I2C_Init+0x1c4>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10e      	bne.n	8001958 <HAL_I2C_Init+0x1a4>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1e58      	subs	r0, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6859      	ldr	r1, [r3, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	440b      	add	r3, r1
 8001948:	fbb0 f3f3 	udiv	r3, r0, r3
 800194c:	3301      	adds	r3, #1
 800194e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001956:	e00f      	b.n	8001978 <HAL_I2C_Init+0x1c4>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1e58      	subs	r0, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6859      	ldr	r1, [r3, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	0099      	lsls	r1, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	fbb0 f3f3 	udiv	r3, r0, r3
 800196e:	3301      	adds	r3, #1
 8001970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	6809      	ldr	r1, [r1, #0]
 800197c:	4313      	orrs	r3, r2
 800197e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69da      	ldr	r2, [r3, #28]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6911      	ldr	r1, [r2, #16]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68d2      	ldr	r2, [r2, #12]
 80019b2:	4311      	orrs	r1, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2220      	movs	r2, #32
 80019f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	000186a0 	.word	0x000186a0
 8001a14:	001e847f 	.word	0x001e847f
 8001a18:	003d08ff 	.word	0x003d08ff
 8001a1c:	431bde83 	.word	0x431bde83
 8001a20:	10624dd3 	.word	0x10624dd3

08001a24 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e021      	b.n	8001a7a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2224      	movs	r2, #36	; 0x24
 8001a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0201 	bic.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff f8f8 	bl	8000c44 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	4608      	mov	r0, r1
 8001a8e:	4611      	mov	r1, r2
 8001a90:	461a      	mov	r2, r3
 8001a92:	4603      	mov	r3, r0
 8001a94:	817b      	strh	r3, [r7, #10]
 8001a96:	460b      	mov	r3, r1
 8001a98:	813b      	strh	r3, [r7, #8]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a9e:	f7ff faff 	bl	80010a0 <HAL_GetTick>
 8001aa2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	f040 80d9 	bne.w	8001c64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2319      	movs	r3, #25
 8001ab8:	2201      	movs	r2, #1
 8001aba:	496d      	ldr	r1, [pc, #436]	; (8001c70 <HAL_I2C_Mem_Write+0x1ec>)
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 f971 	bl	8001da4 <I2C_WaitOnFlagUntilTimeout>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e0cc      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_I2C_Mem_Write+0x56>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e0c5      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e2>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d007      	beq.n	8001b00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2221      	movs	r2, #33	; 0x21
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2240      	movs	r2, #64	; 0x40
 8001b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a3a      	ldr	r2, [r7, #32]
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4a4d      	ldr	r2, [pc, #308]	; (8001c74 <HAL_I2C_Mem_Write+0x1f0>)
 8001b40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b42:	88f8      	ldrh	r0, [r7, #6]
 8001b44:	893a      	ldrh	r2, [r7, #8]
 8001b46:	8979      	ldrh	r1, [r7, #10]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	4603      	mov	r3, r0
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f890 	bl	8001c78 <I2C_RequestMemoryWrite>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d052      	beq.n	8001c04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e081      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 f9f2 	bl	8001f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00d      	beq.n	8001b8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d107      	bne.n	8001b8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e06b      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	781a      	ldrb	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d11b      	bne.n	8001c04 <HAL_I2C_Mem_Write+0x180>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d017      	beq.n	8001c04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1aa      	bne.n	8001b62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f9de 	bl	8001fd2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00d      	beq.n	8001c38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d107      	bne.n	8001c34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e016      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	e000      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c64:	2302      	movs	r3, #2
  }
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	00100002 	.word	0x00100002
 8001c74:	ffff0000 	.word	0xffff0000

08001c78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	4608      	mov	r0, r1
 8001c82:	4611      	mov	r1, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	817b      	strh	r3, [r7, #10]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	813b      	strh	r3, [r7, #8]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 f878 	bl	8001da4 <I2C_WaitOnFlagUntilTimeout>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00d      	beq.n	8001cd6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc8:	d103      	bne.n	8001cd2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e05f      	b.n	8001d96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cd6:	897b      	ldrh	r3, [r7, #10]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ce4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	6a3a      	ldr	r2, [r7, #32]
 8001cea:	492d      	ldr	r1, [pc, #180]	; (8001da0 <I2C_RequestMemoryWrite+0x128>)
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f8b0 	bl	8001e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e04c      	b.n	8001d96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d14:	6a39      	ldr	r1, [r7, #32]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f91a 	bl	8001f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00d      	beq.n	8001d3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d107      	bne.n	8001d3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e02b      	b.n	8001d96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d44:	893b      	ldrh	r3, [r7, #8]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	611a      	str	r2, [r3, #16]
 8001d4e:	e021      	b.n	8001d94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d50:	893b      	ldrh	r3, [r7, #8]
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d60:	6a39      	ldr	r1, [r7, #32]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 f8f4 	bl	8001f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00d      	beq.n	8001d8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d107      	bne.n	8001d86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e005      	b.n	8001d96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d8a:	893b      	ldrh	r3, [r7, #8]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	00010002 	.word	0x00010002

08001da4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	4613      	mov	r3, r2
 8001db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001db4:	e025      	b.n	8001e02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d021      	beq.n	8001e02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dbe:	f7ff f96f 	bl	80010a0 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d302      	bcc.n	8001dd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d116      	bne.n	8001e02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f043 0220 	orr.w	r2, r3, #32
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e023      	b.n	8001e4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	0c1b      	lsrs	r3, r3, #16
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d10d      	bne.n	8001e28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	4013      	ands	r3, r2
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bf0c      	ite	eq
 8001e1e:	2301      	moveq	r3, #1
 8001e20:	2300      	movne	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	e00c      	b.n	8001e42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4013      	ands	r3, r2
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	bf0c      	ite	eq
 8001e3a:	2301      	moveq	r3, #1
 8001e3c:	2300      	movne	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d0b6      	beq.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e60:	e051      	b.n	8001f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e70:	d123      	bne.n	8001eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f043 0204 	orr.w	r2, r3, #4
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e046      	b.n	8001f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d021      	beq.n	8001f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ec2:	f7ff f8ed 	bl	80010a0 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d302      	bcc.n	8001ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d116      	bne.n	8001f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f043 0220 	orr.w	r2, r3, #32
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e020      	b.n	8001f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	0c1b      	lsrs	r3, r3, #16
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d10c      	bne.n	8001f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bf14      	ite	ne
 8001f22:	2301      	movne	r3, #1
 8001f24:	2300      	moveq	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	e00b      	b.n	8001f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	43da      	mvns	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	4013      	ands	r3, r2
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf14      	ite	ne
 8001f3c:	2301      	movne	r3, #1
 8001f3e:	2300      	moveq	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d18d      	bne.n	8001e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f5c:	e02d      	b.n	8001fba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f878 	bl	8002054 <I2C_IsAcknowledgeFailed>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e02d      	b.n	8001fca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d021      	beq.n	8001fba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f76:	f7ff f893 	bl	80010a0 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d302      	bcc.n	8001f8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d116      	bne.n	8001fba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f043 0220 	orr.w	r2, r3, #32
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e007      	b.n	8001fca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc4:	2b80      	cmp	r3, #128	; 0x80
 8001fc6:	d1ca      	bne.n	8001f5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fde:	e02d      	b.n	800203c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f837 	bl	8002054 <I2C_IsAcknowledgeFailed>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e02d      	b.n	800204c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff6:	d021      	beq.n	800203c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff8:	f7ff f852 	bl	80010a0 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	429a      	cmp	r2, r3
 8002006:	d302      	bcc.n	800200e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d116      	bne.n	800203c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e007      	b.n	800204c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b04      	cmp	r3, #4
 8002048:	d1ca      	bne.n	8001fe0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800206a:	d11b      	bne.n	80020a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002074:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f043 0204 	orr.w	r2, r3, #4
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e26c      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8087 	beq.w	80021de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d0:	4b92      	ldr	r3, [pc, #584]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d00c      	beq.n	80020f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020dc:	4b8f      	ldr	r3, [pc, #572]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d112      	bne.n	800210e <HAL_RCC_OscConfig+0x5e>
 80020e8:	4b8c      	ldr	r3, [pc, #560]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f4:	d10b      	bne.n	800210e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f6:	4b89      	ldr	r3, [pc, #548]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d06c      	beq.n	80021dc <HAL_RCC_OscConfig+0x12c>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d168      	bne.n	80021dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e246      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x76>
 8002118:	4b80      	ldr	r3, [pc, #512]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a7f      	ldr	r2, [pc, #508]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800211e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	e02e      	b.n	8002184 <HAL_RCC_OscConfig+0xd4>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x98>
 800212e:	4b7b      	ldr	r3, [pc, #492]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a7a      	ldr	r2, [pc, #488]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b78      	ldr	r3, [pc, #480]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a77      	ldr	r2, [pc, #476]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e01d      	b.n	8002184 <HAL_RCC_OscConfig+0xd4>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0xbc>
 8002152:	4b72      	ldr	r3, [pc, #456]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a71      	ldr	r2, [pc, #452]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b6f      	ldr	r3, [pc, #444]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a6e      	ldr	r2, [pc, #440]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e00b      	b.n	8002184 <HAL_RCC_OscConfig+0xd4>
 800216c:	4b6b      	ldr	r3, [pc, #428]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a6a      	ldr	r2, [pc, #424]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b68      	ldr	r3, [pc, #416]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a67      	ldr	r2, [pc, #412]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800217e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002182:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7fe ff88 	bl	80010a0 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7fe ff84 	bl	80010a0 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e1fa      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	4b5d      	ldr	r3, [pc, #372]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0xe4>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7fe ff74 	bl	80010a0 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7fe ff70 	bl	80010a0 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e1e6      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	4b53      	ldr	r3, [pc, #332]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x10c>
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d063      	beq.n	80022b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ea:	4b4c      	ldr	r3, [pc, #304]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021f6:	4b49      	ldr	r3, [pc, #292]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d11c      	bne.n	800223c <HAL_RCC_OscConfig+0x18c>
 8002202:	4b46      	ldr	r3, [pc, #280]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d116      	bne.n	800223c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220e:	4b43      	ldr	r3, [pc, #268]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_RCC_OscConfig+0x176>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d001      	beq.n	8002226 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e1ba      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002226:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4939      	ldr	r1, [pc, #228]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	e03a      	b.n	80022b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d020      	beq.n	8002286 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002244:	4b36      	ldr	r3, [pc, #216]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002246:	2201      	movs	r2, #1
 8002248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7fe ff29 	bl	80010a0 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002252:	f7fe ff25 	bl	80010a0 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e19b      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002264:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002270:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4927      	ldr	r1, [pc, #156]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002280:	4313      	orrs	r3, r2
 8002282:	600b      	str	r3, [r1, #0]
 8002284:	e015      	b.n	80022b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002286:	4b26      	ldr	r3, [pc, #152]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe ff08 	bl	80010a0 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7fe ff04 	bl	80010a0 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e17a      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d03a      	beq.n	8002334 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d019      	beq.n	80022fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <HAL_RCC_OscConfig+0x274>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7fe fee8 	bl	80010a0 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d4:	f7fe fee4 	bl	80010a0 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e15a      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022f2:	2001      	movs	r0, #1
 80022f4:	f000 fac6 	bl	8002884 <RCC_Delay>
 80022f8:	e01c      	b.n	8002334 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_RCC_OscConfig+0x274>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002300:	f7fe fece 	bl	80010a0 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002306:	e00f      	b.n	8002328 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002308:	f7fe feca 	bl	80010a0 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d908      	bls.n	8002328 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e140      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	42420000 	.word	0x42420000
 8002324:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	4b9e      	ldr	r3, [pc, #632]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1e9      	bne.n	8002308 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a6 	beq.w	800248e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002346:	4b97      	ldr	r3, [pc, #604]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10d      	bne.n	800236e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	4b94      	ldr	r3, [pc, #592]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4a93      	ldr	r2, [pc, #588]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235c:	61d3      	str	r3, [r2, #28]
 800235e:	4b91      	ldr	r3, [pc, #580]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236a:	2301      	movs	r3, #1
 800236c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236e:	4b8e      	ldr	r3, [pc, #568]	; (80025a8 <HAL_RCC_OscConfig+0x4f8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002376:	2b00      	cmp	r3, #0
 8002378:	d118      	bne.n	80023ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237a:	4b8b      	ldr	r3, [pc, #556]	; (80025a8 <HAL_RCC_OscConfig+0x4f8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a8a      	ldr	r2, [pc, #552]	; (80025a8 <HAL_RCC_OscConfig+0x4f8>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002386:	f7fe fe8b 	bl	80010a0 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238e:	f7fe fe87 	bl	80010a0 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b64      	cmp	r3, #100	; 0x64
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e0fd      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a0:	4b81      	ldr	r3, [pc, #516]	; (80025a8 <HAL_RCC_OscConfig+0x4f8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x312>
 80023b4:	4b7b      	ldr	r3, [pc, #492]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4a7a      	ldr	r2, [pc, #488]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6213      	str	r3, [r2, #32]
 80023c0:	e02d      	b.n	800241e <HAL_RCC_OscConfig+0x36e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x334>
 80023ca:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4a75      	ldr	r2, [pc, #468]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	6213      	str	r3, [r2, #32]
 80023d6:	4b73      	ldr	r3, [pc, #460]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4a72      	ldr	r2, [pc, #456]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	f023 0304 	bic.w	r3, r3, #4
 80023e0:	6213      	str	r3, [r2, #32]
 80023e2:	e01c      	b.n	800241e <HAL_RCC_OscConfig+0x36e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d10c      	bne.n	8002406 <HAL_RCC_OscConfig+0x356>
 80023ec:	4b6d      	ldr	r3, [pc, #436]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4a6c      	ldr	r2, [pc, #432]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	4b6a      	ldr	r3, [pc, #424]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a69      	ldr	r2, [pc, #420]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6213      	str	r3, [r2, #32]
 8002404:	e00b      	b.n	800241e <HAL_RCC_OscConfig+0x36e>
 8002406:	4b67      	ldr	r3, [pc, #412]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a66      	ldr	r2, [pc, #408]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	4b64      	ldr	r3, [pc, #400]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a63      	ldr	r2, [pc, #396]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d015      	beq.n	8002452 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002426:	f7fe fe3b 	bl	80010a0 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7fe fe37 	bl	80010a0 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	; 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e0ab      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	4b57      	ldr	r3, [pc, #348]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ee      	beq.n	800242e <HAL_RCC_OscConfig+0x37e>
 8002450:	e014      	b.n	800247c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7fe fe25 	bl	80010a0 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245a:	f7fe fe21 	bl	80010a0 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f241 3288 	movw	r2, #5000	; 0x1388
 8002468:	4293      	cmp	r3, r2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e095      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002470:	4b4c      	ldr	r3, [pc, #304]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ee      	bne.n	800245a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800247c:	7dfb      	ldrb	r3, [r7, #23]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d105      	bne.n	800248e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002482:	4b48      	ldr	r3, [pc, #288]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4a47      	ldr	r2, [pc, #284]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8081 	beq.w	800259a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002498:	4b42      	ldr	r3, [pc, #264]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d061      	beq.n	8002568 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d146      	bne.n	800253a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ac:	4b3f      	ldr	r3, [pc, #252]	; (80025ac <HAL_RCC_OscConfig+0x4fc>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe fdf5 	bl	80010a0 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe fdf1 	bl	80010a0 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e067      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024cc:	4b35      	ldr	r3, [pc, #212]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d108      	bne.n	80024f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024e2:	4b30      	ldr	r3, [pc, #192]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	492d      	ldr	r1, [pc, #180]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f4:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a19      	ldr	r1, [r3, #32]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	430b      	orrs	r3, r1
 8002506:	4927      	ldr	r1, [pc, #156]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <HAL_RCC_OscConfig+0x4fc>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002512:	f7fe fdc5 	bl	80010a0 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251a:	f7fe fdc1 	bl	80010a0 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e037      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x46a>
 8002538:	e02f      	b.n	800259a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253a:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <HAL_RCC_OscConfig+0x4fc>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7fe fdae 	bl	80010a0 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe fdaa 	bl	80010a0 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e020      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x498>
 8002566:	e018      	b.n	800259a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e013      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	429a      	cmp	r2, r3
 8002586:	d106      	bne.n	8002596 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002592:	429a      	cmp	r2, r3
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40007000 	.word	0x40007000
 80025ac:	42420060 	.word	0x42420060

080025b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0d0      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c4:	4b6a      	ldr	r3, [pc, #424]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d910      	bls.n	80025f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b67      	ldr	r3, [pc, #412]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 0207 	bic.w	r2, r3, #7
 80025da:	4965      	ldr	r1, [pc, #404]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b63      	ldr	r3, [pc, #396]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0b8      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800260c:	4b59      	ldr	r3, [pc, #356]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a58      	ldr	r2, [pc, #352]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002616:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002624:	4b53      	ldr	r3, [pc, #332]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a52      	ldr	r2, [pc, #328]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800262e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b50      	ldr	r3, [pc, #320]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	494d      	ldr	r1, [pc, #308]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d040      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	4b47      	ldr	r3, [pc, #284]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d115      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e07f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266e:	4b41      	ldr	r3, [pc, #260]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e073      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267e:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e06b      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268e:	4b39      	ldr	r3, [pc, #228]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f023 0203 	bic.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4936      	ldr	r1, [pc, #216]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a0:	f7fe fcfe 	bl	80010a0 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	e00a      	b.n	80026be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a8:	f7fe fcfa 	bl	80010a0 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e053      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 020c 	and.w	r2, r3, #12
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d1eb      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d210      	bcs.n	8002700 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b24      	ldr	r3, [pc, #144]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	4922      	ldr	r1, [pc, #136]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e032      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4916      	ldr	r1, [pc, #88]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	490e      	ldr	r1, [pc, #56]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800273e:	f000 f821 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8002742:	4601      	mov	r1, r0
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	fa21 f303 	lsr.w	r3, r1, r3
 8002756:	4a09      	ldr	r2, [pc, #36]	; (800277c <HAL_RCC_ClockConfig+0x1cc>)
 8002758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1d0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fc5c 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40022000 	.word	0x40022000
 8002774:	40021000 	.word	0x40021000
 8002778:	08004e90 	.word	0x08004e90
 800277c:	20000008 	.word	0x20000008
 8002780:	2000000c 	.word	0x2000000c

08002784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002784:	b490      	push	{r4, r7}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800278a:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb0>)
 800278c:	1d3c      	adds	r4, r7, #4
 800278e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002790:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002794:	4b28      	ldr	r3, [pc, #160]	; (8002838 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	2300      	movs	r3, #0
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ae:	4b23      	ldr	r3, [pc, #140]	; (800283c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d002      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0x40>
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d003      	beq.n	80027ca <HAL_RCC_GetSysClockFreq+0x46>
 80027c2:	e02d      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027c4:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027c6:	623b      	str	r3, [r7, #32]
      break;
 80027c8:	e02d      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	0c9b      	lsrs	r3, r3, #18
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027d6:	4413      	add	r3, r2
 80027d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	0c5b      	lsrs	r3, r3, #17
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027f6:	4413      	add	r3, r2
 80027f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	4a0f      	ldr	r2, [pc, #60]	; (8002840 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002802:	fb02 f203 	mul.w	r2, r2, r3
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
 800280e:	e004      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	4a0c      	ldr	r2, [pc, #48]	; (8002844 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002814:	fb02 f303 	mul.w	r3, r2, r3
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	623b      	str	r3, [r7, #32]
      break;
 800281e:	e002      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002822:	623b      	str	r3, [r7, #32]
      break;
 8002824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002826:	6a3b      	ldr	r3, [r7, #32]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3728      	adds	r7, #40	; 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bc90      	pop	{r4, r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	08004120 	.word	0x08004120
 8002838:	08004130 	.word	0x08004130
 800283c:	40021000 	.word	0x40021000
 8002840:	007a1200 	.word	0x007a1200
 8002844:	003d0900 	.word	0x003d0900

08002848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800284c:	4b02      	ldr	r3, [pc, #8]	; (8002858 <HAL_RCC_GetHCLKFreq+0x10>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	20000008 	.word	0x20000008

0800285c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002860:	f7ff fff2 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002864:	4601      	mov	r1, r0
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	0a1b      	lsrs	r3, r3, #8
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4a03      	ldr	r2, [pc, #12]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	08004ea0 	.word	0x08004ea0

08002884 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <RCC_Delay+0x34>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <RCC_Delay+0x38>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	0a5b      	lsrs	r3, r3, #9
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028a0:	bf00      	nop
  }
  while (Delay --);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1e5a      	subs	r2, r3, #1
 80028a6:	60fa      	str	r2, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f9      	bne.n	80028a0 <RCC_Delay+0x1c>
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000008 	.word	0x20000008
 80028bc:	10624dd3 	.word	0x10624dd3

080028c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e041      	b.n	8002956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe f9ce 	bl	8000c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3304      	adds	r3, #4
 80028fc:	4619      	mov	r1, r3
 80028fe:	4610      	mov	r0, r2
 8002900:	f000 fa92 	bl	8002e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	d001      	beq.n	8002978 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e03a      	b.n	80029ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a18      	ldr	r2, [pc, #96]	; (80029f8 <HAL_TIM_Base_Start_IT+0x98>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00e      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x58>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a2:	d009      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x58>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a14      	ldr	r2, [pc, #80]	; (80029fc <HAL_TIM_Base_Start_IT+0x9c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d004      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x58>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <HAL_TIM_Base_Start_IT+0xa0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d111      	bne.n	80029dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d010      	beq.n	80029ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0201 	orr.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029da:	e007      	b.n	80029ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	40012c00 	.word	0x40012c00
 80029fc:	40000400 	.word	0x40000400
 8002a00:	40000800 	.word	0x40000800

08002a04 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6a1a      	ldr	r2, [r3, #32]
 8002a22:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10f      	bne.n	8002a4c <HAL_TIM_Base_Stop_IT+0x48>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6a1a      	ldr	r2, [r3, #32]
 8002a32:	f240 4344 	movw	r3, #1092	; 0x444
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_TIM_Base_Stop_IT+0x48>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d122      	bne.n	8002abc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d11b      	bne.n	8002abc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0202 	mvn.w	r2, #2
 8002a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f9a4 	bl	8002df0 <HAL_TIM_IC_CaptureCallback>
 8002aa8:	e005      	b.n	8002ab6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f997 	bl	8002dde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f9a6 	bl	8002e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d122      	bne.n	8002b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d11b      	bne.n	8002b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0204 	mvn.w	r2, #4
 8002ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f97a 	bl	8002df0 <HAL_TIM_IC_CaptureCallback>
 8002afc:	e005      	b.n	8002b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f96d 	bl	8002dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f97c 	bl	8002e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d122      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d11b      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0208 	mvn.w	r2, #8
 8002b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2204      	movs	r2, #4
 8002b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f950 	bl	8002df0 <HAL_TIM_IC_CaptureCallback>
 8002b50:	e005      	b.n	8002b5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f943 	bl	8002dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f952 	bl	8002e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d122      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b10      	cmp	r3, #16
 8002b7e:	d11b      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0210 	mvn.w	r2, #16
 8002b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f926 	bl	8002df0 <HAL_TIM_IC_CaptureCallback>
 8002ba4:	e005      	b.n	8002bb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f919 	bl	8002dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f928 	bl	8002e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d10e      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d107      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0201 	mvn.w	r2, #1
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fd fd68 	bl	80006b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bee:	2b80      	cmp	r3, #128	; 0x80
 8002bf0:	d10e      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfc:	2b80      	cmp	r3, #128	; 0x80
 8002bfe:	d107      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fa6b 	bl	80030e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1a:	2b40      	cmp	r3, #64	; 0x40
 8002c1c:	d10e      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	2b40      	cmp	r3, #64	; 0x40
 8002c2a:	d107      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f8ec 	bl	8002e14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	d10e      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d107      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0220 	mvn.w	r2, #32
 8002c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fa36 	bl	80030d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_TIM_ConfigClockSource+0x18>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e0a6      	b.n	8002dd6 <HAL_TIM_ConfigClockSource+0x166>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ca6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b40      	cmp	r3, #64	; 0x40
 8002cbe:	d067      	beq.n	8002d90 <HAL_TIM_ConfigClockSource+0x120>
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	d80b      	bhi.n	8002cdc <HAL_TIM_ConfigClockSource+0x6c>
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	d073      	beq.n	8002db0 <HAL_TIM_ConfigClockSource+0x140>
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d802      	bhi.n	8002cd2 <HAL_TIM_ConfigClockSource+0x62>
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d06f      	beq.n	8002db0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002cd0:	e078      	b.n	8002dc4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d06c      	beq.n	8002db0 <HAL_TIM_ConfigClockSource+0x140>
 8002cd6:	2b30      	cmp	r3, #48	; 0x30
 8002cd8:	d06a      	beq.n	8002db0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002cda:	e073      	b.n	8002dc4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cdc:	2b70      	cmp	r3, #112	; 0x70
 8002cde:	d00d      	beq.n	8002cfc <HAL_TIM_ConfigClockSource+0x8c>
 8002ce0:	2b70      	cmp	r3, #112	; 0x70
 8002ce2:	d804      	bhi.n	8002cee <HAL_TIM_ConfigClockSource+0x7e>
 8002ce4:	2b50      	cmp	r3, #80	; 0x50
 8002ce6:	d033      	beq.n	8002d50 <HAL_TIM_ConfigClockSource+0xe0>
 8002ce8:	2b60      	cmp	r3, #96	; 0x60
 8002cea:	d041      	beq.n	8002d70 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002cec:	e06a      	b.n	8002dc4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf2:	d066      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0x152>
 8002cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf8:	d017      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002cfa:	e063      	b.n	8002dc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	6899      	ldr	r1, [r3, #8]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f000 f965 	bl	8002fda <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d1e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	609a      	str	r2, [r3, #8]
      break;
 8002d28:	e04c      	b.n	8002dc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	6899      	ldr	r1, [r3, #8]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f000 f94e 	bl	8002fda <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d4c:	609a      	str	r2, [r3, #8]
      break;
 8002d4e:	e039      	b.n	8002dc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f000 f8c5 	bl	8002eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2150      	movs	r1, #80	; 0x50
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f91c 	bl	8002fa6 <TIM_ITRx_SetConfig>
      break;
 8002d6e:	e029      	b.n	8002dc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	f000 f8e3 	bl	8002f48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2160      	movs	r1, #96	; 0x60
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f90c 	bl	8002fa6 <TIM_ITRx_SetConfig>
      break;
 8002d8e:	e019      	b.n	8002dc4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f000 f8a5 	bl	8002eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2140      	movs	r1, #64	; 0x40
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f8fc 	bl	8002fa6 <TIM_ITRx_SetConfig>
      break;
 8002dae:	e009      	b.n	8002dc4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4619      	mov	r1, r3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	f000 f8f3 	bl	8002fa6 <TIM_ITRx_SetConfig>
        break;
 8002dc0:	e000      	b.n	8002dc4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002dc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr

08002e02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr
	...

08002e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a29      	ldr	r2, [pc, #164]	; (8002ee0 <TIM_Base_SetConfig+0xb8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00b      	beq.n	8002e58 <TIM_Base_SetConfig+0x30>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e46:	d007      	beq.n	8002e58 <TIM_Base_SetConfig+0x30>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a26      	ldr	r2, [pc, #152]	; (8002ee4 <TIM_Base_SetConfig+0xbc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d003      	beq.n	8002e58 <TIM_Base_SetConfig+0x30>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a25      	ldr	r2, [pc, #148]	; (8002ee8 <TIM_Base_SetConfig+0xc0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d108      	bne.n	8002e6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ee0 <TIM_Base_SetConfig+0xb8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00b      	beq.n	8002e8a <TIM_Base_SetConfig+0x62>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e78:	d007      	beq.n	8002e8a <TIM_Base_SetConfig+0x62>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a19      	ldr	r2, [pc, #100]	; (8002ee4 <TIM_Base_SetConfig+0xbc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d003      	beq.n	8002e8a <TIM_Base_SetConfig+0x62>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a18      	ldr	r2, [pc, #96]	; (8002ee8 <TIM_Base_SetConfig+0xc0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d108      	bne.n	8002e9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a07      	ldr	r2, [pc, #28]	; (8002ee0 <TIM_Base_SetConfig+0xb8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d103      	bne.n	8002ed0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	615a      	str	r2, [r3, #20]
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40000400 	.word	0x40000400
 8002ee8:	40000800 	.word	0x40000800

08002eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	f023 0201 	bic.w	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f023 030a 	bic.w	r3, r3, #10
 8002f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	621a      	str	r2, [r3, #32]
}
 8002f3e:	bf00      	nop
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f023 0210 	bic.w	r2, r3, #16
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	031b      	lsls	r3, r3, #12
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	621a      	str	r2, [r3, #32]
}
 8002f9c:	bf00      	nop
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr

08002fa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b085      	sub	sp, #20
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f043 0307 	orr.w	r3, r3, #7
 8002fc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b087      	sub	sp, #28
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	021a      	lsls	r2, r3, #8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4313      	orrs	r3, r2
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	609a      	str	r2, [r3, #8]
}
 800300e:	bf00      	nop
 8003010:	371c      	adds	r7, #28
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800302c:	2302      	movs	r3, #2
 800302e:	e046      	b.n	80030be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003056:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00e      	beq.n	8003092 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307c:	d009      	beq.n	8003092 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a12      	ldr	r2, [pc, #72]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a10      	ldr	r2, [pc, #64]	; (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d10c      	bne.n	80030ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40000400 	.word	0x40000400
 80030d0:	40000800 	.word	0x40000800

080030d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <__errno>:
 80030f8:	4b01      	ldr	r3, [pc, #4]	; (8003100 <__errno+0x8>)
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000014 	.word	0x20000014

08003104 <__libc_init_array>:
 8003104:	b570      	push	{r4, r5, r6, lr}
 8003106:	2500      	movs	r5, #0
 8003108:	4e0c      	ldr	r6, [pc, #48]	; (800313c <__libc_init_array+0x38>)
 800310a:	4c0d      	ldr	r4, [pc, #52]	; (8003140 <__libc_init_array+0x3c>)
 800310c:	1ba4      	subs	r4, r4, r6
 800310e:	10a4      	asrs	r4, r4, #2
 8003110:	42a5      	cmp	r5, r4
 8003112:	d109      	bne.n	8003128 <__libc_init_array+0x24>
 8003114:	f000 ff74 	bl	8004000 <_init>
 8003118:	2500      	movs	r5, #0
 800311a:	4e0a      	ldr	r6, [pc, #40]	; (8003144 <__libc_init_array+0x40>)
 800311c:	4c0a      	ldr	r4, [pc, #40]	; (8003148 <__libc_init_array+0x44>)
 800311e:	1ba4      	subs	r4, r4, r6
 8003120:	10a4      	asrs	r4, r4, #2
 8003122:	42a5      	cmp	r5, r4
 8003124:	d105      	bne.n	8003132 <__libc_init_array+0x2e>
 8003126:	bd70      	pop	{r4, r5, r6, pc}
 8003128:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800312c:	4798      	blx	r3
 800312e:	3501      	adds	r5, #1
 8003130:	e7ee      	b.n	8003110 <__libc_init_array+0xc>
 8003132:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003136:	4798      	blx	r3
 8003138:	3501      	adds	r5, #1
 800313a:	e7f2      	b.n	8003122 <__libc_init_array+0x1e>
 800313c:	08004f40 	.word	0x08004f40
 8003140:	08004f40 	.word	0x08004f40
 8003144:	08004f40 	.word	0x08004f40
 8003148:	08004f44 	.word	0x08004f44

0800314c <memset>:
 800314c:	4603      	mov	r3, r0
 800314e:	4402      	add	r2, r0
 8003150:	4293      	cmp	r3, r2
 8003152:	d100      	bne.n	8003156 <memset+0xa>
 8003154:	4770      	bx	lr
 8003156:	f803 1b01 	strb.w	r1, [r3], #1
 800315a:	e7f9      	b.n	8003150 <memset+0x4>

0800315c <iprintf>:
 800315c:	b40f      	push	{r0, r1, r2, r3}
 800315e:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <iprintf+0x2c>)
 8003160:	b513      	push	{r0, r1, r4, lr}
 8003162:	681c      	ldr	r4, [r3, #0]
 8003164:	b124      	cbz	r4, 8003170 <iprintf+0x14>
 8003166:	69a3      	ldr	r3, [r4, #24]
 8003168:	b913      	cbnz	r3, 8003170 <iprintf+0x14>
 800316a:	4620      	mov	r0, r4
 800316c:	f000 fa22 	bl	80035b4 <__sinit>
 8003170:	ab05      	add	r3, sp, #20
 8003172:	9a04      	ldr	r2, [sp, #16]
 8003174:	68a1      	ldr	r1, [r4, #8]
 8003176:	4620      	mov	r0, r4
 8003178:	9301      	str	r3, [sp, #4]
 800317a:	f000 fbd7 	bl	800392c <_vfiprintf_r>
 800317e:	b002      	add	sp, #8
 8003180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003184:	b004      	add	sp, #16
 8003186:	4770      	bx	lr
 8003188:	20000014 	.word	0x20000014

0800318c <_puts_r>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	460e      	mov	r6, r1
 8003190:	4605      	mov	r5, r0
 8003192:	b118      	cbz	r0, 800319c <_puts_r+0x10>
 8003194:	6983      	ldr	r3, [r0, #24]
 8003196:	b90b      	cbnz	r3, 800319c <_puts_r+0x10>
 8003198:	f000 fa0c 	bl	80035b4 <__sinit>
 800319c:	69ab      	ldr	r3, [r5, #24]
 800319e:	68ac      	ldr	r4, [r5, #8]
 80031a0:	b913      	cbnz	r3, 80031a8 <_puts_r+0x1c>
 80031a2:	4628      	mov	r0, r5
 80031a4:	f000 fa06 	bl	80035b4 <__sinit>
 80031a8:	4b23      	ldr	r3, [pc, #140]	; (8003238 <_puts_r+0xac>)
 80031aa:	429c      	cmp	r4, r3
 80031ac:	d117      	bne.n	80031de <_puts_r+0x52>
 80031ae:	686c      	ldr	r4, [r5, #4]
 80031b0:	89a3      	ldrh	r3, [r4, #12]
 80031b2:	071b      	lsls	r3, r3, #28
 80031b4:	d51d      	bpl.n	80031f2 <_puts_r+0x66>
 80031b6:	6923      	ldr	r3, [r4, #16]
 80031b8:	b1db      	cbz	r3, 80031f2 <_puts_r+0x66>
 80031ba:	3e01      	subs	r6, #1
 80031bc:	68a3      	ldr	r3, [r4, #8]
 80031be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80031c2:	3b01      	subs	r3, #1
 80031c4:	60a3      	str	r3, [r4, #8]
 80031c6:	b9e9      	cbnz	r1, 8003204 <_puts_r+0x78>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	da2e      	bge.n	800322a <_puts_r+0x9e>
 80031cc:	4622      	mov	r2, r4
 80031ce:	210a      	movs	r1, #10
 80031d0:	4628      	mov	r0, r5
 80031d2:	f000 f83f 	bl	8003254 <__swbuf_r>
 80031d6:	3001      	adds	r0, #1
 80031d8:	d011      	beq.n	80031fe <_puts_r+0x72>
 80031da:	200a      	movs	r0, #10
 80031dc:	e011      	b.n	8003202 <_puts_r+0x76>
 80031de:	4b17      	ldr	r3, [pc, #92]	; (800323c <_puts_r+0xb0>)
 80031e0:	429c      	cmp	r4, r3
 80031e2:	d101      	bne.n	80031e8 <_puts_r+0x5c>
 80031e4:	68ac      	ldr	r4, [r5, #8]
 80031e6:	e7e3      	b.n	80031b0 <_puts_r+0x24>
 80031e8:	4b15      	ldr	r3, [pc, #84]	; (8003240 <_puts_r+0xb4>)
 80031ea:	429c      	cmp	r4, r3
 80031ec:	bf08      	it	eq
 80031ee:	68ec      	ldreq	r4, [r5, #12]
 80031f0:	e7de      	b.n	80031b0 <_puts_r+0x24>
 80031f2:	4621      	mov	r1, r4
 80031f4:	4628      	mov	r0, r5
 80031f6:	f000 f87f 	bl	80032f8 <__swsetup_r>
 80031fa:	2800      	cmp	r0, #0
 80031fc:	d0dd      	beq.n	80031ba <_puts_r+0x2e>
 80031fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003202:	bd70      	pop	{r4, r5, r6, pc}
 8003204:	2b00      	cmp	r3, #0
 8003206:	da04      	bge.n	8003212 <_puts_r+0x86>
 8003208:	69a2      	ldr	r2, [r4, #24]
 800320a:	429a      	cmp	r2, r3
 800320c:	dc06      	bgt.n	800321c <_puts_r+0x90>
 800320e:	290a      	cmp	r1, #10
 8003210:	d004      	beq.n	800321c <_puts_r+0x90>
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	6022      	str	r2, [r4, #0]
 8003218:	7019      	strb	r1, [r3, #0]
 800321a:	e7cf      	b.n	80031bc <_puts_r+0x30>
 800321c:	4622      	mov	r2, r4
 800321e:	4628      	mov	r0, r5
 8003220:	f000 f818 	bl	8003254 <__swbuf_r>
 8003224:	3001      	adds	r0, #1
 8003226:	d1c9      	bne.n	80031bc <_puts_r+0x30>
 8003228:	e7e9      	b.n	80031fe <_puts_r+0x72>
 800322a:	200a      	movs	r0, #10
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	6022      	str	r2, [r4, #0]
 8003232:	7018      	strb	r0, [r3, #0]
 8003234:	e7e5      	b.n	8003202 <_puts_r+0x76>
 8003236:	bf00      	nop
 8003238:	08004ecc 	.word	0x08004ecc
 800323c:	08004eec 	.word	0x08004eec
 8003240:	08004eac 	.word	0x08004eac

08003244 <puts>:
 8003244:	4b02      	ldr	r3, [pc, #8]	; (8003250 <puts+0xc>)
 8003246:	4601      	mov	r1, r0
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	f7ff bf9f 	b.w	800318c <_puts_r>
 800324e:	bf00      	nop
 8003250:	20000014 	.word	0x20000014

08003254 <__swbuf_r>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	460e      	mov	r6, r1
 8003258:	4614      	mov	r4, r2
 800325a:	4605      	mov	r5, r0
 800325c:	b118      	cbz	r0, 8003266 <__swbuf_r+0x12>
 800325e:	6983      	ldr	r3, [r0, #24]
 8003260:	b90b      	cbnz	r3, 8003266 <__swbuf_r+0x12>
 8003262:	f000 f9a7 	bl	80035b4 <__sinit>
 8003266:	4b21      	ldr	r3, [pc, #132]	; (80032ec <__swbuf_r+0x98>)
 8003268:	429c      	cmp	r4, r3
 800326a:	d12a      	bne.n	80032c2 <__swbuf_r+0x6e>
 800326c:	686c      	ldr	r4, [r5, #4]
 800326e:	69a3      	ldr	r3, [r4, #24]
 8003270:	60a3      	str	r3, [r4, #8]
 8003272:	89a3      	ldrh	r3, [r4, #12]
 8003274:	071a      	lsls	r2, r3, #28
 8003276:	d52e      	bpl.n	80032d6 <__swbuf_r+0x82>
 8003278:	6923      	ldr	r3, [r4, #16]
 800327a:	b363      	cbz	r3, 80032d6 <__swbuf_r+0x82>
 800327c:	6923      	ldr	r3, [r4, #16]
 800327e:	6820      	ldr	r0, [r4, #0]
 8003280:	b2f6      	uxtb	r6, r6
 8003282:	1ac0      	subs	r0, r0, r3
 8003284:	6963      	ldr	r3, [r4, #20]
 8003286:	4637      	mov	r7, r6
 8003288:	4283      	cmp	r3, r0
 800328a:	dc04      	bgt.n	8003296 <__swbuf_r+0x42>
 800328c:	4621      	mov	r1, r4
 800328e:	4628      	mov	r0, r5
 8003290:	f000 f926 	bl	80034e0 <_fflush_r>
 8003294:	bb28      	cbnz	r0, 80032e2 <__swbuf_r+0x8e>
 8003296:	68a3      	ldr	r3, [r4, #8]
 8003298:	3001      	adds	r0, #1
 800329a:	3b01      	subs	r3, #1
 800329c:	60a3      	str	r3, [r4, #8]
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	6022      	str	r2, [r4, #0]
 80032a4:	701e      	strb	r6, [r3, #0]
 80032a6:	6963      	ldr	r3, [r4, #20]
 80032a8:	4283      	cmp	r3, r0
 80032aa:	d004      	beq.n	80032b6 <__swbuf_r+0x62>
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	07db      	lsls	r3, r3, #31
 80032b0:	d519      	bpl.n	80032e6 <__swbuf_r+0x92>
 80032b2:	2e0a      	cmp	r6, #10
 80032b4:	d117      	bne.n	80032e6 <__swbuf_r+0x92>
 80032b6:	4621      	mov	r1, r4
 80032b8:	4628      	mov	r0, r5
 80032ba:	f000 f911 	bl	80034e0 <_fflush_r>
 80032be:	b190      	cbz	r0, 80032e6 <__swbuf_r+0x92>
 80032c0:	e00f      	b.n	80032e2 <__swbuf_r+0x8e>
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <__swbuf_r+0x9c>)
 80032c4:	429c      	cmp	r4, r3
 80032c6:	d101      	bne.n	80032cc <__swbuf_r+0x78>
 80032c8:	68ac      	ldr	r4, [r5, #8]
 80032ca:	e7d0      	b.n	800326e <__swbuf_r+0x1a>
 80032cc:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <__swbuf_r+0xa0>)
 80032ce:	429c      	cmp	r4, r3
 80032d0:	bf08      	it	eq
 80032d2:	68ec      	ldreq	r4, [r5, #12]
 80032d4:	e7cb      	b.n	800326e <__swbuf_r+0x1a>
 80032d6:	4621      	mov	r1, r4
 80032d8:	4628      	mov	r0, r5
 80032da:	f000 f80d 	bl	80032f8 <__swsetup_r>
 80032de:	2800      	cmp	r0, #0
 80032e0:	d0cc      	beq.n	800327c <__swbuf_r+0x28>
 80032e2:	f04f 37ff 	mov.w	r7, #4294967295
 80032e6:	4638      	mov	r0, r7
 80032e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032ea:	bf00      	nop
 80032ec:	08004ecc 	.word	0x08004ecc
 80032f0:	08004eec 	.word	0x08004eec
 80032f4:	08004eac 	.word	0x08004eac

080032f8 <__swsetup_r>:
 80032f8:	4b32      	ldr	r3, [pc, #200]	; (80033c4 <__swsetup_r+0xcc>)
 80032fa:	b570      	push	{r4, r5, r6, lr}
 80032fc:	681d      	ldr	r5, [r3, #0]
 80032fe:	4606      	mov	r6, r0
 8003300:	460c      	mov	r4, r1
 8003302:	b125      	cbz	r5, 800330e <__swsetup_r+0x16>
 8003304:	69ab      	ldr	r3, [r5, #24]
 8003306:	b913      	cbnz	r3, 800330e <__swsetup_r+0x16>
 8003308:	4628      	mov	r0, r5
 800330a:	f000 f953 	bl	80035b4 <__sinit>
 800330e:	4b2e      	ldr	r3, [pc, #184]	; (80033c8 <__swsetup_r+0xd0>)
 8003310:	429c      	cmp	r4, r3
 8003312:	d10f      	bne.n	8003334 <__swsetup_r+0x3c>
 8003314:	686c      	ldr	r4, [r5, #4]
 8003316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800331a:	b29a      	uxth	r2, r3
 800331c:	0715      	lsls	r5, r2, #28
 800331e:	d42c      	bmi.n	800337a <__swsetup_r+0x82>
 8003320:	06d0      	lsls	r0, r2, #27
 8003322:	d411      	bmi.n	8003348 <__swsetup_r+0x50>
 8003324:	2209      	movs	r2, #9
 8003326:	6032      	str	r2, [r6, #0]
 8003328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800332c:	81a3      	strh	r3, [r4, #12]
 800332e:	f04f 30ff 	mov.w	r0, #4294967295
 8003332:	e03e      	b.n	80033b2 <__swsetup_r+0xba>
 8003334:	4b25      	ldr	r3, [pc, #148]	; (80033cc <__swsetup_r+0xd4>)
 8003336:	429c      	cmp	r4, r3
 8003338:	d101      	bne.n	800333e <__swsetup_r+0x46>
 800333a:	68ac      	ldr	r4, [r5, #8]
 800333c:	e7eb      	b.n	8003316 <__swsetup_r+0x1e>
 800333e:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <__swsetup_r+0xd8>)
 8003340:	429c      	cmp	r4, r3
 8003342:	bf08      	it	eq
 8003344:	68ec      	ldreq	r4, [r5, #12]
 8003346:	e7e6      	b.n	8003316 <__swsetup_r+0x1e>
 8003348:	0751      	lsls	r1, r2, #29
 800334a:	d512      	bpl.n	8003372 <__swsetup_r+0x7a>
 800334c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800334e:	b141      	cbz	r1, 8003362 <__swsetup_r+0x6a>
 8003350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003354:	4299      	cmp	r1, r3
 8003356:	d002      	beq.n	800335e <__swsetup_r+0x66>
 8003358:	4630      	mov	r0, r6
 800335a:	f000 fa19 	bl	8003790 <_free_r>
 800335e:	2300      	movs	r3, #0
 8003360:	6363      	str	r3, [r4, #52]	; 0x34
 8003362:	89a3      	ldrh	r3, [r4, #12]
 8003364:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003368:	81a3      	strh	r3, [r4, #12]
 800336a:	2300      	movs	r3, #0
 800336c:	6063      	str	r3, [r4, #4]
 800336e:	6923      	ldr	r3, [r4, #16]
 8003370:	6023      	str	r3, [r4, #0]
 8003372:	89a3      	ldrh	r3, [r4, #12]
 8003374:	f043 0308 	orr.w	r3, r3, #8
 8003378:	81a3      	strh	r3, [r4, #12]
 800337a:	6923      	ldr	r3, [r4, #16]
 800337c:	b94b      	cbnz	r3, 8003392 <__swsetup_r+0x9a>
 800337e:	89a3      	ldrh	r3, [r4, #12]
 8003380:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003388:	d003      	beq.n	8003392 <__swsetup_r+0x9a>
 800338a:	4621      	mov	r1, r4
 800338c:	4630      	mov	r0, r6
 800338e:	f000 f9bf 	bl	8003710 <__smakebuf_r>
 8003392:	89a2      	ldrh	r2, [r4, #12]
 8003394:	f012 0301 	ands.w	r3, r2, #1
 8003398:	d00c      	beq.n	80033b4 <__swsetup_r+0xbc>
 800339a:	2300      	movs	r3, #0
 800339c:	60a3      	str	r3, [r4, #8]
 800339e:	6963      	ldr	r3, [r4, #20]
 80033a0:	425b      	negs	r3, r3
 80033a2:	61a3      	str	r3, [r4, #24]
 80033a4:	6923      	ldr	r3, [r4, #16]
 80033a6:	b953      	cbnz	r3, 80033be <__swsetup_r+0xc6>
 80033a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80033b0:	d1ba      	bne.n	8003328 <__swsetup_r+0x30>
 80033b2:	bd70      	pop	{r4, r5, r6, pc}
 80033b4:	0792      	lsls	r2, r2, #30
 80033b6:	bf58      	it	pl
 80033b8:	6963      	ldrpl	r3, [r4, #20]
 80033ba:	60a3      	str	r3, [r4, #8]
 80033bc:	e7f2      	b.n	80033a4 <__swsetup_r+0xac>
 80033be:	2000      	movs	r0, #0
 80033c0:	e7f7      	b.n	80033b2 <__swsetup_r+0xba>
 80033c2:	bf00      	nop
 80033c4:	20000014 	.word	0x20000014
 80033c8:	08004ecc 	.word	0x08004ecc
 80033cc:	08004eec 	.word	0x08004eec
 80033d0:	08004eac 	.word	0x08004eac

080033d4 <__sflush_r>:
 80033d4:	898a      	ldrh	r2, [r1, #12]
 80033d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033da:	4605      	mov	r5, r0
 80033dc:	0710      	lsls	r0, r2, #28
 80033de:	460c      	mov	r4, r1
 80033e0:	d458      	bmi.n	8003494 <__sflush_r+0xc0>
 80033e2:	684b      	ldr	r3, [r1, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	dc05      	bgt.n	80033f4 <__sflush_r+0x20>
 80033e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	dc02      	bgt.n	80033f4 <__sflush_r+0x20>
 80033ee:	2000      	movs	r0, #0
 80033f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033f6:	2e00      	cmp	r6, #0
 80033f8:	d0f9      	beq.n	80033ee <__sflush_r+0x1a>
 80033fa:	2300      	movs	r3, #0
 80033fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003400:	682f      	ldr	r7, [r5, #0]
 8003402:	6a21      	ldr	r1, [r4, #32]
 8003404:	602b      	str	r3, [r5, #0]
 8003406:	d032      	beq.n	800346e <__sflush_r+0x9a>
 8003408:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800340a:	89a3      	ldrh	r3, [r4, #12]
 800340c:	075a      	lsls	r2, r3, #29
 800340e:	d505      	bpl.n	800341c <__sflush_r+0x48>
 8003410:	6863      	ldr	r3, [r4, #4]
 8003412:	1ac0      	subs	r0, r0, r3
 8003414:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003416:	b10b      	cbz	r3, 800341c <__sflush_r+0x48>
 8003418:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800341a:	1ac0      	subs	r0, r0, r3
 800341c:	2300      	movs	r3, #0
 800341e:	4602      	mov	r2, r0
 8003420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003422:	6a21      	ldr	r1, [r4, #32]
 8003424:	4628      	mov	r0, r5
 8003426:	47b0      	blx	r6
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	89a3      	ldrh	r3, [r4, #12]
 800342c:	d106      	bne.n	800343c <__sflush_r+0x68>
 800342e:	6829      	ldr	r1, [r5, #0]
 8003430:	291d      	cmp	r1, #29
 8003432:	d848      	bhi.n	80034c6 <__sflush_r+0xf2>
 8003434:	4a29      	ldr	r2, [pc, #164]	; (80034dc <__sflush_r+0x108>)
 8003436:	40ca      	lsrs	r2, r1
 8003438:	07d6      	lsls	r6, r2, #31
 800343a:	d544      	bpl.n	80034c6 <__sflush_r+0xf2>
 800343c:	2200      	movs	r2, #0
 800343e:	6062      	str	r2, [r4, #4]
 8003440:	6922      	ldr	r2, [r4, #16]
 8003442:	04d9      	lsls	r1, r3, #19
 8003444:	6022      	str	r2, [r4, #0]
 8003446:	d504      	bpl.n	8003452 <__sflush_r+0x7e>
 8003448:	1c42      	adds	r2, r0, #1
 800344a:	d101      	bne.n	8003450 <__sflush_r+0x7c>
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	b903      	cbnz	r3, 8003452 <__sflush_r+0x7e>
 8003450:	6560      	str	r0, [r4, #84]	; 0x54
 8003452:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003454:	602f      	str	r7, [r5, #0]
 8003456:	2900      	cmp	r1, #0
 8003458:	d0c9      	beq.n	80033ee <__sflush_r+0x1a>
 800345a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800345e:	4299      	cmp	r1, r3
 8003460:	d002      	beq.n	8003468 <__sflush_r+0x94>
 8003462:	4628      	mov	r0, r5
 8003464:	f000 f994 	bl	8003790 <_free_r>
 8003468:	2000      	movs	r0, #0
 800346a:	6360      	str	r0, [r4, #52]	; 0x34
 800346c:	e7c0      	b.n	80033f0 <__sflush_r+0x1c>
 800346e:	2301      	movs	r3, #1
 8003470:	4628      	mov	r0, r5
 8003472:	47b0      	blx	r6
 8003474:	1c41      	adds	r1, r0, #1
 8003476:	d1c8      	bne.n	800340a <__sflush_r+0x36>
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0c5      	beq.n	800340a <__sflush_r+0x36>
 800347e:	2b1d      	cmp	r3, #29
 8003480:	d001      	beq.n	8003486 <__sflush_r+0xb2>
 8003482:	2b16      	cmp	r3, #22
 8003484:	d101      	bne.n	800348a <__sflush_r+0xb6>
 8003486:	602f      	str	r7, [r5, #0]
 8003488:	e7b1      	b.n	80033ee <__sflush_r+0x1a>
 800348a:	89a3      	ldrh	r3, [r4, #12]
 800348c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003490:	81a3      	strh	r3, [r4, #12]
 8003492:	e7ad      	b.n	80033f0 <__sflush_r+0x1c>
 8003494:	690f      	ldr	r7, [r1, #16]
 8003496:	2f00      	cmp	r7, #0
 8003498:	d0a9      	beq.n	80033ee <__sflush_r+0x1a>
 800349a:	0793      	lsls	r3, r2, #30
 800349c:	bf18      	it	ne
 800349e:	2300      	movne	r3, #0
 80034a0:	680e      	ldr	r6, [r1, #0]
 80034a2:	bf08      	it	eq
 80034a4:	694b      	ldreq	r3, [r1, #20]
 80034a6:	eba6 0807 	sub.w	r8, r6, r7
 80034aa:	600f      	str	r7, [r1, #0]
 80034ac:	608b      	str	r3, [r1, #8]
 80034ae:	f1b8 0f00 	cmp.w	r8, #0
 80034b2:	dd9c      	ble.n	80033ee <__sflush_r+0x1a>
 80034b4:	4643      	mov	r3, r8
 80034b6:	463a      	mov	r2, r7
 80034b8:	6a21      	ldr	r1, [r4, #32]
 80034ba:	4628      	mov	r0, r5
 80034bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80034be:	47b0      	blx	r6
 80034c0:	2800      	cmp	r0, #0
 80034c2:	dc06      	bgt.n	80034d2 <__sflush_r+0xfe>
 80034c4:	89a3      	ldrh	r3, [r4, #12]
 80034c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ca:	81a3      	strh	r3, [r4, #12]
 80034cc:	f04f 30ff 	mov.w	r0, #4294967295
 80034d0:	e78e      	b.n	80033f0 <__sflush_r+0x1c>
 80034d2:	4407      	add	r7, r0
 80034d4:	eba8 0800 	sub.w	r8, r8, r0
 80034d8:	e7e9      	b.n	80034ae <__sflush_r+0xda>
 80034da:	bf00      	nop
 80034dc:	20400001 	.word	0x20400001

080034e0 <_fflush_r>:
 80034e0:	b538      	push	{r3, r4, r5, lr}
 80034e2:	690b      	ldr	r3, [r1, #16]
 80034e4:	4605      	mov	r5, r0
 80034e6:	460c      	mov	r4, r1
 80034e8:	b1db      	cbz	r3, 8003522 <_fflush_r+0x42>
 80034ea:	b118      	cbz	r0, 80034f4 <_fflush_r+0x14>
 80034ec:	6983      	ldr	r3, [r0, #24]
 80034ee:	b90b      	cbnz	r3, 80034f4 <_fflush_r+0x14>
 80034f0:	f000 f860 	bl	80035b4 <__sinit>
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <_fflush_r+0x48>)
 80034f6:	429c      	cmp	r4, r3
 80034f8:	d109      	bne.n	800350e <_fflush_r+0x2e>
 80034fa:	686c      	ldr	r4, [r5, #4]
 80034fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003500:	b17b      	cbz	r3, 8003522 <_fflush_r+0x42>
 8003502:	4621      	mov	r1, r4
 8003504:	4628      	mov	r0, r5
 8003506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800350a:	f7ff bf63 	b.w	80033d4 <__sflush_r>
 800350e:	4b07      	ldr	r3, [pc, #28]	; (800352c <_fflush_r+0x4c>)
 8003510:	429c      	cmp	r4, r3
 8003512:	d101      	bne.n	8003518 <_fflush_r+0x38>
 8003514:	68ac      	ldr	r4, [r5, #8]
 8003516:	e7f1      	b.n	80034fc <_fflush_r+0x1c>
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <_fflush_r+0x50>)
 800351a:	429c      	cmp	r4, r3
 800351c:	bf08      	it	eq
 800351e:	68ec      	ldreq	r4, [r5, #12]
 8003520:	e7ec      	b.n	80034fc <_fflush_r+0x1c>
 8003522:	2000      	movs	r0, #0
 8003524:	bd38      	pop	{r3, r4, r5, pc}
 8003526:	bf00      	nop
 8003528:	08004ecc 	.word	0x08004ecc
 800352c:	08004eec 	.word	0x08004eec
 8003530:	08004eac 	.word	0x08004eac

08003534 <std>:
 8003534:	2300      	movs	r3, #0
 8003536:	b510      	push	{r4, lr}
 8003538:	4604      	mov	r4, r0
 800353a:	e9c0 3300 	strd	r3, r3, [r0]
 800353e:	6083      	str	r3, [r0, #8]
 8003540:	8181      	strh	r1, [r0, #12]
 8003542:	6643      	str	r3, [r0, #100]	; 0x64
 8003544:	81c2      	strh	r2, [r0, #14]
 8003546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800354a:	6183      	str	r3, [r0, #24]
 800354c:	4619      	mov	r1, r3
 800354e:	2208      	movs	r2, #8
 8003550:	305c      	adds	r0, #92	; 0x5c
 8003552:	f7ff fdfb 	bl	800314c <memset>
 8003556:	4b05      	ldr	r3, [pc, #20]	; (800356c <std+0x38>)
 8003558:	6224      	str	r4, [r4, #32]
 800355a:	6263      	str	r3, [r4, #36]	; 0x24
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <std+0x3c>)
 800355e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <std+0x40>)
 8003562:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003564:	4b04      	ldr	r3, [pc, #16]	; (8003578 <std+0x44>)
 8003566:	6323      	str	r3, [r4, #48]	; 0x30
 8003568:	bd10      	pop	{r4, pc}
 800356a:	bf00      	nop
 800356c:	08003e89 	.word	0x08003e89
 8003570:	08003eab 	.word	0x08003eab
 8003574:	08003ee3 	.word	0x08003ee3
 8003578:	08003f07 	.word	0x08003f07

0800357c <_cleanup_r>:
 800357c:	4901      	ldr	r1, [pc, #4]	; (8003584 <_cleanup_r+0x8>)
 800357e:	f000 b885 	b.w	800368c <_fwalk_reent>
 8003582:	bf00      	nop
 8003584:	080034e1 	.word	0x080034e1

08003588 <__sfmoreglue>:
 8003588:	b570      	push	{r4, r5, r6, lr}
 800358a:	2568      	movs	r5, #104	; 0x68
 800358c:	1e4a      	subs	r2, r1, #1
 800358e:	4355      	muls	r5, r2
 8003590:	460e      	mov	r6, r1
 8003592:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003596:	f000 f947 	bl	8003828 <_malloc_r>
 800359a:	4604      	mov	r4, r0
 800359c:	b140      	cbz	r0, 80035b0 <__sfmoreglue+0x28>
 800359e:	2100      	movs	r1, #0
 80035a0:	e9c0 1600 	strd	r1, r6, [r0]
 80035a4:	300c      	adds	r0, #12
 80035a6:	60a0      	str	r0, [r4, #8]
 80035a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80035ac:	f7ff fdce 	bl	800314c <memset>
 80035b0:	4620      	mov	r0, r4
 80035b2:	bd70      	pop	{r4, r5, r6, pc}

080035b4 <__sinit>:
 80035b4:	6983      	ldr	r3, [r0, #24]
 80035b6:	b510      	push	{r4, lr}
 80035b8:	4604      	mov	r4, r0
 80035ba:	bb33      	cbnz	r3, 800360a <__sinit+0x56>
 80035bc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80035c0:	6503      	str	r3, [r0, #80]	; 0x50
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <__sinit+0x58>)
 80035c4:	4a12      	ldr	r2, [pc, #72]	; (8003610 <__sinit+0x5c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6282      	str	r2, [r0, #40]	; 0x28
 80035ca:	4298      	cmp	r0, r3
 80035cc:	bf04      	itt	eq
 80035ce:	2301      	moveq	r3, #1
 80035d0:	6183      	streq	r3, [r0, #24]
 80035d2:	f000 f81f 	bl	8003614 <__sfp>
 80035d6:	6060      	str	r0, [r4, #4]
 80035d8:	4620      	mov	r0, r4
 80035da:	f000 f81b 	bl	8003614 <__sfp>
 80035de:	60a0      	str	r0, [r4, #8]
 80035e0:	4620      	mov	r0, r4
 80035e2:	f000 f817 	bl	8003614 <__sfp>
 80035e6:	2200      	movs	r2, #0
 80035e8:	60e0      	str	r0, [r4, #12]
 80035ea:	2104      	movs	r1, #4
 80035ec:	6860      	ldr	r0, [r4, #4]
 80035ee:	f7ff ffa1 	bl	8003534 <std>
 80035f2:	2201      	movs	r2, #1
 80035f4:	2109      	movs	r1, #9
 80035f6:	68a0      	ldr	r0, [r4, #8]
 80035f8:	f7ff ff9c 	bl	8003534 <std>
 80035fc:	2202      	movs	r2, #2
 80035fe:	2112      	movs	r1, #18
 8003600:	68e0      	ldr	r0, [r4, #12]
 8003602:	f7ff ff97 	bl	8003534 <std>
 8003606:	2301      	movs	r3, #1
 8003608:	61a3      	str	r3, [r4, #24]
 800360a:	bd10      	pop	{r4, pc}
 800360c:	08004ea8 	.word	0x08004ea8
 8003610:	0800357d 	.word	0x0800357d

08003614 <__sfp>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <__sfp+0x70>)
 8003618:	4607      	mov	r7, r0
 800361a:	681e      	ldr	r6, [r3, #0]
 800361c:	69b3      	ldr	r3, [r6, #24]
 800361e:	b913      	cbnz	r3, 8003626 <__sfp+0x12>
 8003620:	4630      	mov	r0, r6
 8003622:	f7ff ffc7 	bl	80035b4 <__sinit>
 8003626:	3648      	adds	r6, #72	; 0x48
 8003628:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800362c:	3b01      	subs	r3, #1
 800362e:	d503      	bpl.n	8003638 <__sfp+0x24>
 8003630:	6833      	ldr	r3, [r6, #0]
 8003632:	b133      	cbz	r3, 8003642 <__sfp+0x2e>
 8003634:	6836      	ldr	r6, [r6, #0]
 8003636:	e7f7      	b.n	8003628 <__sfp+0x14>
 8003638:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800363c:	b16d      	cbz	r5, 800365a <__sfp+0x46>
 800363e:	3468      	adds	r4, #104	; 0x68
 8003640:	e7f4      	b.n	800362c <__sfp+0x18>
 8003642:	2104      	movs	r1, #4
 8003644:	4638      	mov	r0, r7
 8003646:	f7ff ff9f 	bl	8003588 <__sfmoreglue>
 800364a:	6030      	str	r0, [r6, #0]
 800364c:	2800      	cmp	r0, #0
 800364e:	d1f1      	bne.n	8003634 <__sfp+0x20>
 8003650:	230c      	movs	r3, #12
 8003652:	4604      	mov	r4, r0
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	4620      	mov	r0, r4
 8003658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800365a:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <__sfp+0x74>)
 800365c:	6665      	str	r5, [r4, #100]	; 0x64
 800365e:	e9c4 5500 	strd	r5, r5, [r4]
 8003662:	60a5      	str	r5, [r4, #8]
 8003664:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003668:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800366c:	2208      	movs	r2, #8
 800366e:	4629      	mov	r1, r5
 8003670:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003674:	f7ff fd6a 	bl	800314c <memset>
 8003678:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800367c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003680:	e7e9      	b.n	8003656 <__sfp+0x42>
 8003682:	bf00      	nop
 8003684:	08004ea8 	.word	0x08004ea8
 8003688:	ffff0001 	.word	0xffff0001

0800368c <_fwalk_reent>:
 800368c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003690:	4680      	mov	r8, r0
 8003692:	4689      	mov	r9, r1
 8003694:	2600      	movs	r6, #0
 8003696:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800369a:	b914      	cbnz	r4, 80036a2 <_fwalk_reent+0x16>
 800369c:	4630      	mov	r0, r6
 800369e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036a2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80036a6:	3f01      	subs	r7, #1
 80036a8:	d501      	bpl.n	80036ae <_fwalk_reent+0x22>
 80036aa:	6824      	ldr	r4, [r4, #0]
 80036ac:	e7f5      	b.n	800369a <_fwalk_reent+0xe>
 80036ae:	89ab      	ldrh	r3, [r5, #12]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d907      	bls.n	80036c4 <_fwalk_reent+0x38>
 80036b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036b8:	3301      	adds	r3, #1
 80036ba:	d003      	beq.n	80036c4 <_fwalk_reent+0x38>
 80036bc:	4629      	mov	r1, r5
 80036be:	4640      	mov	r0, r8
 80036c0:	47c8      	blx	r9
 80036c2:	4306      	orrs	r6, r0
 80036c4:	3568      	adds	r5, #104	; 0x68
 80036c6:	e7ee      	b.n	80036a6 <_fwalk_reent+0x1a>

080036c8 <__swhatbuf_r>:
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	460e      	mov	r6, r1
 80036cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036d0:	b096      	sub	sp, #88	; 0x58
 80036d2:	2900      	cmp	r1, #0
 80036d4:	4614      	mov	r4, r2
 80036d6:	461d      	mov	r5, r3
 80036d8:	da07      	bge.n	80036ea <__swhatbuf_r+0x22>
 80036da:	2300      	movs	r3, #0
 80036dc:	602b      	str	r3, [r5, #0]
 80036de:	89b3      	ldrh	r3, [r6, #12]
 80036e0:	061a      	lsls	r2, r3, #24
 80036e2:	d410      	bmi.n	8003706 <__swhatbuf_r+0x3e>
 80036e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036e8:	e00e      	b.n	8003708 <__swhatbuf_r+0x40>
 80036ea:	466a      	mov	r2, sp
 80036ec:	f000 fc32 	bl	8003f54 <_fstat_r>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	dbf2      	blt.n	80036da <__swhatbuf_r+0x12>
 80036f4:	9a01      	ldr	r2, [sp, #4]
 80036f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036fe:	425a      	negs	r2, r3
 8003700:	415a      	adcs	r2, r3
 8003702:	602a      	str	r2, [r5, #0]
 8003704:	e7ee      	b.n	80036e4 <__swhatbuf_r+0x1c>
 8003706:	2340      	movs	r3, #64	; 0x40
 8003708:	2000      	movs	r0, #0
 800370a:	6023      	str	r3, [r4, #0]
 800370c:	b016      	add	sp, #88	; 0x58
 800370e:	bd70      	pop	{r4, r5, r6, pc}

08003710 <__smakebuf_r>:
 8003710:	898b      	ldrh	r3, [r1, #12]
 8003712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003714:	079d      	lsls	r5, r3, #30
 8003716:	4606      	mov	r6, r0
 8003718:	460c      	mov	r4, r1
 800371a:	d507      	bpl.n	800372c <__smakebuf_r+0x1c>
 800371c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	6123      	str	r3, [r4, #16]
 8003724:	2301      	movs	r3, #1
 8003726:	6163      	str	r3, [r4, #20]
 8003728:	b002      	add	sp, #8
 800372a:	bd70      	pop	{r4, r5, r6, pc}
 800372c:	ab01      	add	r3, sp, #4
 800372e:	466a      	mov	r2, sp
 8003730:	f7ff ffca 	bl	80036c8 <__swhatbuf_r>
 8003734:	9900      	ldr	r1, [sp, #0]
 8003736:	4605      	mov	r5, r0
 8003738:	4630      	mov	r0, r6
 800373a:	f000 f875 	bl	8003828 <_malloc_r>
 800373e:	b948      	cbnz	r0, 8003754 <__smakebuf_r+0x44>
 8003740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003744:	059a      	lsls	r2, r3, #22
 8003746:	d4ef      	bmi.n	8003728 <__smakebuf_r+0x18>
 8003748:	f023 0303 	bic.w	r3, r3, #3
 800374c:	f043 0302 	orr.w	r3, r3, #2
 8003750:	81a3      	strh	r3, [r4, #12]
 8003752:	e7e3      	b.n	800371c <__smakebuf_r+0xc>
 8003754:	4b0d      	ldr	r3, [pc, #52]	; (800378c <__smakebuf_r+0x7c>)
 8003756:	62b3      	str	r3, [r6, #40]	; 0x28
 8003758:	89a3      	ldrh	r3, [r4, #12]
 800375a:	6020      	str	r0, [r4, #0]
 800375c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003760:	81a3      	strh	r3, [r4, #12]
 8003762:	9b00      	ldr	r3, [sp, #0]
 8003764:	6120      	str	r0, [r4, #16]
 8003766:	6163      	str	r3, [r4, #20]
 8003768:	9b01      	ldr	r3, [sp, #4]
 800376a:	b15b      	cbz	r3, 8003784 <__smakebuf_r+0x74>
 800376c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003770:	4630      	mov	r0, r6
 8003772:	f000 fc01 	bl	8003f78 <_isatty_r>
 8003776:	b128      	cbz	r0, 8003784 <__smakebuf_r+0x74>
 8003778:	89a3      	ldrh	r3, [r4, #12]
 800377a:	f023 0303 	bic.w	r3, r3, #3
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	81a3      	strh	r3, [r4, #12]
 8003784:	89a3      	ldrh	r3, [r4, #12]
 8003786:	431d      	orrs	r5, r3
 8003788:	81a5      	strh	r5, [r4, #12]
 800378a:	e7cd      	b.n	8003728 <__smakebuf_r+0x18>
 800378c:	0800357d 	.word	0x0800357d

08003790 <_free_r>:
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	4605      	mov	r5, r0
 8003794:	2900      	cmp	r1, #0
 8003796:	d043      	beq.n	8003820 <_free_r+0x90>
 8003798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800379c:	1f0c      	subs	r4, r1, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bfb8      	it	lt
 80037a2:	18e4      	addlt	r4, r4, r3
 80037a4:	f000 fc18 	bl	8003fd8 <__malloc_lock>
 80037a8:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <_free_r+0x94>)
 80037aa:	6813      	ldr	r3, [r2, #0]
 80037ac:	4610      	mov	r0, r2
 80037ae:	b933      	cbnz	r3, 80037be <_free_r+0x2e>
 80037b0:	6063      	str	r3, [r4, #4]
 80037b2:	6014      	str	r4, [r2, #0]
 80037b4:	4628      	mov	r0, r5
 80037b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ba:	f000 bc0e 	b.w	8003fda <__malloc_unlock>
 80037be:	42a3      	cmp	r3, r4
 80037c0:	d90b      	bls.n	80037da <_free_r+0x4a>
 80037c2:	6821      	ldr	r1, [r4, #0]
 80037c4:	1862      	adds	r2, r4, r1
 80037c6:	4293      	cmp	r3, r2
 80037c8:	bf01      	itttt	eq
 80037ca:	681a      	ldreq	r2, [r3, #0]
 80037cc:	685b      	ldreq	r3, [r3, #4]
 80037ce:	1852      	addeq	r2, r2, r1
 80037d0:	6022      	streq	r2, [r4, #0]
 80037d2:	6063      	str	r3, [r4, #4]
 80037d4:	6004      	str	r4, [r0, #0]
 80037d6:	e7ed      	b.n	80037b4 <_free_r+0x24>
 80037d8:	4613      	mov	r3, r2
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	b10a      	cbz	r2, 80037e2 <_free_r+0x52>
 80037de:	42a2      	cmp	r2, r4
 80037e0:	d9fa      	bls.n	80037d8 <_free_r+0x48>
 80037e2:	6819      	ldr	r1, [r3, #0]
 80037e4:	1858      	adds	r0, r3, r1
 80037e6:	42a0      	cmp	r0, r4
 80037e8:	d10b      	bne.n	8003802 <_free_r+0x72>
 80037ea:	6820      	ldr	r0, [r4, #0]
 80037ec:	4401      	add	r1, r0
 80037ee:	1858      	adds	r0, r3, r1
 80037f0:	4282      	cmp	r2, r0
 80037f2:	6019      	str	r1, [r3, #0]
 80037f4:	d1de      	bne.n	80037b4 <_free_r+0x24>
 80037f6:	6810      	ldr	r0, [r2, #0]
 80037f8:	6852      	ldr	r2, [r2, #4]
 80037fa:	4401      	add	r1, r0
 80037fc:	6019      	str	r1, [r3, #0]
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	e7d8      	b.n	80037b4 <_free_r+0x24>
 8003802:	d902      	bls.n	800380a <_free_r+0x7a>
 8003804:	230c      	movs	r3, #12
 8003806:	602b      	str	r3, [r5, #0]
 8003808:	e7d4      	b.n	80037b4 <_free_r+0x24>
 800380a:	6820      	ldr	r0, [r4, #0]
 800380c:	1821      	adds	r1, r4, r0
 800380e:	428a      	cmp	r2, r1
 8003810:	bf01      	itttt	eq
 8003812:	6811      	ldreq	r1, [r2, #0]
 8003814:	6852      	ldreq	r2, [r2, #4]
 8003816:	1809      	addeq	r1, r1, r0
 8003818:	6021      	streq	r1, [r4, #0]
 800381a:	6062      	str	r2, [r4, #4]
 800381c:	605c      	str	r4, [r3, #4]
 800381e:	e7c9      	b.n	80037b4 <_free_r+0x24>
 8003820:	bd38      	pop	{r3, r4, r5, pc}
 8003822:	bf00      	nop
 8003824:	200004a0 	.word	0x200004a0

08003828 <_malloc_r>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	1ccd      	adds	r5, r1, #3
 800382c:	f025 0503 	bic.w	r5, r5, #3
 8003830:	3508      	adds	r5, #8
 8003832:	2d0c      	cmp	r5, #12
 8003834:	bf38      	it	cc
 8003836:	250c      	movcc	r5, #12
 8003838:	2d00      	cmp	r5, #0
 800383a:	4606      	mov	r6, r0
 800383c:	db01      	blt.n	8003842 <_malloc_r+0x1a>
 800383e:	42a9      	cmp	r1, r5
 8003840:	d903      	bls.n	800384a <_malloc_r+0x22>
 8003842:	230c      	movs	r3, #12
 8003844:	6033      	str	r3, [r6, #0]
 8003846:	2000      	movs	r0, #0
 8003848:	bd70      	pop	{r4, r5, r6, pc}
 800384a:	f000 fbc5 	bl	8003fd8 <__malloc_lock>
 800384e:	4a21      	ldr	r2, [pc, #132]	; (80038d4 <_malloc_r+0xac>)
 8003850:	6814      	ldr	r4, [r2, #0]
 8003852:	4621      	mov	r1, r4
 8003854:	b991      	cbnz	r1, 800387c <_malloc_r+0x54>
 8003856:	4c20      	ldr	r4, [pc, #128]	; (80038d8 <_malloc_r+0xb0>)
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	b91b      	cbnz	r3, 8003864 <_malloc_r+0x3c>
 800385c:	4630      	mov	r0, r6
 800385e:	f000 fb03 	bl	8003e68 <_sbrk_r>
 8003862:	6020      	str	r0, [r4, #0]
 8003864:	4629      	mov	r1, r5
 8003866:	4630      	mov	r0, r6
 8003868:	f000 fafe 	bl	8003e68 <_sbrk_r>
 800386c:	1c43      	adds	r3, r0, #1
 800386e:	d124      	bne.n	80038ba <_malloc_r+0x92>
 8003870:	230c      	movs	r3, #12
 8003872:	4630      	mov	r0, r6
 8003874:	6033      	str	r3, [r6, #0]
 8003876:	f000 fbb0 	bl	8003fda <__malloc_unlock>
 800387a:	e7e4      	b.n	8003846 <_malloc_r+0x1e>
 800387c:	680b      	ldr	r3, [r1, #0]
 800387e:	1b5b      	subs	r3, r3, r5
 8003880:	d418      	bmi.n	80038b4 <_malloc_r+0x8c>
 8003882:	2b0b      	cmp	r3, #11
 8003884:	d90f      	bls.n	80038a6 <_malloc_r+0x7e>
 8003886:	600b      	str	r3, [r1, #0]
 8003888:	18cc      	adds	r4, r1, r3
 800388a:	50cd      	str	r5, [r1, r3]
 800388c:	4630      	mov	r0, r6
 800388e:	f000 fba4 	bl	8003fda <__malloc_unlock>
 8003892:	f104 000b 	add.w	r0, r4, #11
 8003896:	1d23      	adds	r3, r4, #4
 8003898:	f020 0007 	bic.w	r0, r0, #7
 800389c:	1ac3      	subs	r3, r0, r3
 800389e:	d0d3      	beq.n	8003848 <_malloc_r+0x20>
 80038a0:	425a      	negs	r2, r3
 80038a2:	50e2      	str	r2, [r4, r3]
 80038a4:	e7d0      	b.n	8003848 <_malloc_r+0x20>
 80038a6:	684b      	ldr	r3, [r1, #4]
 80038a8:	428c      	cmp	r4, r1
 80038aa:	bf16      	itet	ne
 80038ac:	6063      	strne	r3, [r4, #4]
 80038ae:	6013      	streq	r3, [r2, #0]
 80038b0:	460c      	movne	r4, r1
 80038b2:	e7eb      	b.n	800388c <_malloc_r+0x64>
 80038b4:	460c      	mov	r4, r1
 80038b6:	6849      	ldr	r1, [r1, #4]
 80038b8:	e7cc      	b.n	8003854 <_malloc_r+0x2c>
 80038ba:	1cc4      	adds	r4, r0, #3
 80038bc:	f024 0403 	bic.w	r4, r4, #3
 80038c0:	42a0      	cmp	r0, r4
 80038c2:	d005      	beq.n	80038d0 <_malloc_r+0xa8>
 80038c4:	1a21      	subs	r1, r4, r0
 80038c6:	4630      	mov	r0, r6
 80038c8:	f000 face 	bl	8003e68 <_sbrk_r>
 80038cc:	3001      	adds	r0, #1
 80038ce:	d0cf      	beq.n	8003870 <_malloc_r+0x48>
 80038d0:	6025      	str	r5, [r4, #0]
 80038d2:	e7db      	b.n	800388c <_malloc_r+0x64>
 80038d4:	200004a0 	.word	0x200004a0
 80038d8:	200004a4 	.word	0x200004a4

080038dc <__sfputc_r>:
 80038dc:	6893      	ldr	r3, [r2, #8]
 80038de:	b410      	push	{r4}
 80038e0:	3b01      	subs	r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	6093      	str	r3, [r2, #8]
 80038e6:	da07      	bge.n	80038f8 <__sfputc_r+0x1c>
 80038e8:	6994      	ldr	r4, [r2, #24]
 80038ea:	42a3      	cmp	r3, r4
 80038ec:	db01      	blt.n	80038f2 <__sfputc_r+0x16>
 80038ee:	290a      	cmp	r1, #10
 80038f0:	d102      	bne.n	80038f8 <__sfputc_r+0x1c>
 80038f2:	bc10      	pop	{r4}
 80038f4:	f7ff bcae 	b.w	8003254 <__swbuf_r>
 80038f8:	6813      	ldr	r3, [r2, #0]
 80038fa:	1c58      	adds	r0, r3, #1
 80038fc:	6010      	str	r0, [r2, #0]
 80038fe:	7019      	strb	r1, [r3, #0]
 8003900:	4608      	mov	r0, r1
 8003902:	bc10      	pop	{r4}
 8003904:	4770      	bx	lr

08003906 <__sfputs_r>:
 8003906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003908:	4606      	mov	r6, r0
 800390a:	460f      	mov	r7, r1
 800390c:	4614      	mov	r4, r2
 800390e:	18d5      	adds	r5, r2, r3
 8003910:	42ac      	cmp	r4, r5
 8003912:	d101      	bne.n	8003918 <__sfputs_r+0x12>
 8003914:	2000      	movs	r0, #0
 8003916:	e007      	b.n	8003928 <__sfputs_r+0x22>
 8003918:	463a      	mov	r2, r7
 800391a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800391e:	4630      	mov	r0, r6
 8003920:	f7ff ffdc 	bl	80038dc <__sfputc_r>
 8003924:	1c43      	adds	r3, r0, #1
 8003926:	d1f3      	bne.n	8003910 <__sfputs_r+0xa>
 8003928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800392c <_vfiprintf_r>:
 800392c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003930:	460c      	mov	r4, r1
 8003932:	b09d      	sub	sp, #116	; 0x74
 8003934:	4617      	mov	r7, r2
 8003936:	461d      	mov	r5, r3
 8003938:	4606      	mov	r6, r0
 800393a:	b118      	cbz	r0, 8003944 <_vfiprintf_r+0x18>
 800393c:	6983      	ldr	r3, [r0, #24]
 800393e:	b90b      	cbnz	r3, 8003944 <_vfiprintf_r+0x18>
 8003940:	f7ff fe38 	bl	80035b4 <__sinit>
 8003944:	4b7c      	ldr	r3, [pc, #496]	; (8003b38 <_vfiprintf_r+0x20c>)
 8003946:	429c      	cmp	r4, r3
 8003948:	d158      	bne.n	80039fc <_vfiprintf_r+0xd0>
 800394a:	6874      	ldr	r4, [r6, #4]
 800394c:	89a3      	ldrh	r3, [r4, #12]
 800394e:	0718      	lsls	r0, r3, #28
 8003950:	d55e      	bpl.n	8003a10 <_vfiprintf_r+0xe4>
 8003952:	6923      	ldr	r3, [r4, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d05b      	beq.n	8003a10 <_vfiprintf_r+0xe4>
 8003958:	2300      	movs	r3, #0
 800395a:	9309      	str	r3, [sp, #36]	; 0x24
 800395c:	2320      	movs	r3, #32
 800395e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003962:	2330      	movs	r3, #48	; 0x30
 8003964:	f04f 0b01 	mov.w	fp, #1
 8003968:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800396c:	9503      	str	r5, [sp, #12]
 800396e:	46b8      	mov	r8, r7
 8003970:	4645      	mov	r5, r8
 8003972:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003976:	b10b      	cbz	r3, 800397c <_vfiprintf_r+0x50>
 8003978:	2b25      	cmp	r3, #37	; 0x25
 800397a:	d154      	bne.n	8003a26 <_vfiprintf_r+0xfa>
 800397c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003980:	d00b      	beq.n	800399a <_vfiprintf_r+0x6e>
 8003982:	4653      	mov	r3, sl
 8003984:	463a      	mov	r2, r7
 8003986:	4621      	mov	r1, r4
 8003988:	4630      	mov	r0, r6
 800398a:	f7ff ffbc 	bl	8003906 <__sfputs_r>
 800398e:	3001      	adds	r0, #1
 8003990:	f000 80c2 	beq.w	8003b18 <_vfiprintf_r+0x1ec>
 8003994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003996:	4453      	add	r3, sl
 8003998:	9309      	str	r3, [sp, #36]	; 0x24
 800399a:	f898 3000 	ldrb.w	r3, [r8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 80ba 	beq.w	8003b18 <_vfiprintf_r+0x1ec>
 80039a4:	2300      	movs	r3, #0
 80039a6:	f04f 32ff 	mov.w	r2, #4294967295
 80039aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039ae:	9304      	str	r3, [sp, #16]
 80039b0:	9307      	str	r3, [sp, #28]
 80039b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039b6:	931a      	str	r3, [sp, #104]	; 0x68
 80039b8:	46a8      	mov	r8, r5
 80039ba:	2205      	movs	r2, #5
 80039bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80039c0:	485e      	ldr	r0, [pc, #376]	; (8003b3c <_vfiprintf_r+0x210>)
 80039c2:	f000 fafb 	bl	8003fbc <memchr>
 80039c6:	9b04      	ldr	r3, [sp, #16]
 80039c8:	bb78      	cbnz	r0, 8003a2a <_vfiprintf_r+0xfe>
 80039ca:	06d9      	lsls	r1, r3, #27
 80039cc:	bf44      	itt	mi
 80039ce:	2220      	movmi	r2, #32
 80039d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039d4:	071a      	lsls	r2, r3, #28
 80039d6:	bf44      	itt	mi
 80039d8:	222b      	movmi	r2, #43	; 0x2b
 80039da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039de:	782a      	ldrb	r2, [r5, #0]
 80039e0:	2a2a      	cmp	r2, #42	; 0x2a
 80039e2:	d02a      	beq.n	8003a3a <_vfiprintf_r+0x10e>
 80039e4:	46a8      	mov	r8, r5
 80039e6:	2000      	movs	r0, #0
 80039e8:	250a      	movs	r5, #10
 80039ea:	9a07      	ldr	r2, [sp, #28]
 80039ec:	4641      	mov	r1, r8
 80039ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039f2:	3b30      	subs	r3, #48	; 0x30
 80039f4:	2b09      	cmp	r3, #9
 80039f6:	d969      	bls.n	8003acc <_vfiprintf_r+0x1a0>
 80039f8:	b360      	cbz	r0, 8003a54 <_vfiprintf_r+0x128>
 80039fa:	e024      	b.n	8003a46 <_vfiprintf_r+0x11a>
 80039fc:	4b50      	ldr	r3, [pc, #320]	; (8003b40 <_vfiprintf_r+0x214>)
 80039fe:	429c      	cmp	r4, r3
 8003a00:	d101      	bne.n	8003a06 <_vfiprintf_r+0xda>
 8003a02:	68b4      	ldr	r4, [r6, #8]
 8003a04:	e7a2      	b.n	800394c <_vfiprintf_r+0x20>
 8003a06:	4b4f      	ldr	r3, [pc, #316]	; (8003b44 <_vfiprintf_r+0x218>)
 8003a08:	429c      	cmp	r4, r3
 8003a0a:	bf08      	it	eq
 8003a0c:	68f4      	ldreq	r4, [r6, #12]
 8003a0e:	e79d      	b.n	800394c <_vfiprintf_r+0x20>
 8003a10:	4621      	mov	r1, r4
 8003a12:	4630      	mov	r0, r6
 8003a14:	f7ff fc70 	bl	80032f8 <__swsetup_r>
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	d09d      	beq.n	8003958 <_vfiprintf_r+0x2c>
 8003a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a20:	b01d      	add	sp, #116	; 0x74
 8003a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a26:	46a8      	mov	r8, r5
 8003a28:	e7a2      	b.n	8003970 <_vfiprintf_r+0x44>
 8003a2a:	4a44      	ldr	r2, [pc, #272]	; (8003b3c <_vfiprintf_r+0x210>)
 8003a2c:	4645      	mov	r5, r8
 8003a2e:	1a80      	subs	r0, r0, r2
 8003a30:	fa0b f000 	lsl.w	r0, fp, r0
 8003a34:	4318      	orrs	r0, r3
 8003a36:	9004      	str	r0, [sp, #16]
 8003a38:	e7be      	b.n	80039b8 <_vfiprintf_r+0x8c>
 8003a3a:	9a03      	ldr	r2, [sp, #12]
 8003a3c:	1d11      	adds	r1, r2, #4
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	9103      	str	r1, [sp, #12]
 8003a42:	2a00      	cmp	r2, #0
 8003a44:	db01      	blt.n	8003a4a <_vfiprintf_r+0x11e>
 8003a46:	9207      	str	r2, [sp, #28]
 8003a48:	e004      	b.n	8003a54 <_vfiprintf_r+0x128>
 8003a4a:	4252      	negs	r2, r2
 8003a4c:	f043 0302 	orr.w	r3, r3, #2
 8003a50:	9207      	str	r2, [sp, #28]
 8003a52:	9304      	str	r3, [sp, #16]
 8003a54:	f898 3000 	ldrb.w	r3, [r8]
 8003a58:	2b2e      	cmp	r3, #46	; 0x2e
 8003a5a:	d10e      	bne.n	8003a7a <_vfiprintf_r+0x14e>
 8003a5c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003a60:	2b2a      	cmp	r3, #42	; 0x2a
 8003a62:	d138      	bne.n	8003ad6 <_vfiprintf_r+0x1aa>
 8003a64:	9b03      	ldr	r3, [sp, #12]
 8003a66:	f108 0802 	add.w	r8, r8, #2
 8003a6a:	1d1a      	adds	r2, r3, #4
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	9203      	str	r2, [sp, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bfb8      	it	lt
 8003a74:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a78:	9305      	str	r3, [sp, #20]
 8003a7a:	4d33      	ldr	r5, [pc, #204]	; (8003b48 <_vfiprintf_r+0x21c>)
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	f898 1000 	ldrb.w	r1, [r8]
 8003a82:	4628      	mov	r0, r5
 8003a84:	f000 fa9a 	bl	8003fbc <memchr>
 8003a88:	b140      	cbz	r0, 8003a9c <_vfiprintf_r+0x170>
 8003a8a:	2340      	movs	r3, #64	; 0x40
 8003a8c:	1b40      	subs	r0, r0, r5
 8003a8e:	fa03 f000 	lsl.w	r0, r3, r0
 8003a92:	9b04      	ldr	r3, [sp, #16]
 8003a94:	f108 0801 	add.w	r8, r8, #1
 8003a98:	4303      	orrs	r3, r0
 8003a9a:	9304      	str	r3, [sp, #16]
 8003a9c:	f898 1000 	ldrb.w	r1, [r8]
 8003aa0:	2206      	movs	r2, #6
 8003aa2:	482a      	ldr	r0, [pc, #168]	; (8003b4c <_vfiprintf_r+0x220>)
 8003aa4:	f108 0701 	add.w	r7, r8, #1
 8003aa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003aac:	f000 fa86 	bl	8003fbc <memchr>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	d037      	beq.n	8003b24 <_vfiprintf_r+0x1f8>
 8003ab4:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <_vfiprintf_r+0x224>)
 8003ab6:	bb1b      	cbnz	r3, 8003b00 <_vfiprintf_r+0x1d4>
 8003ab8:	9b03      	ldr	r3, [sp, #12]
 8003aba:	3307      	adds	r3, #7
 8003abc:	f023 0307 	bic.w	r3, r3, #7
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	9303      	str	r3, [sp, #12]
 8003ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ac6:	444b      	add	r3, r9
 8003ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8003aca:	e750      	b.n	800396e <_vfiprintf_r+0x42>
 8003acc:	fb05 3202 	mla	r2, r5, r2, r3
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	4688      	mov	r8, r1
 8003ad4:	e78a      	b.n	80039ec <_vfiprintf_r+0xc0>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	250a      	movs	r5, #10
 8003ada:	4619      	mov	r1, r3
 8003adc:	f108 0801 	add.w	r8, r8, #1
 8003ae0:	9305      	str	r3, [sp, #20]
 8003ae2:	4640      	mov	r0, r8
 8003ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ae8:	3a30      	subs	r2, #48	; 0x30
 8003aea:	2a09      	cmp	r2, #9
 8003aec:	d903      	bls.n	8003af6 <_vfiprintf_r+0x1ca>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0c3      	beq.n	8003a7a <_vfiprintf_r+0x14e>
 8003af2:	9105      	str	r1, [sp, #20]
 8003af4:	e7c1      	b.n	8003a7a <_vfiprintf_r+0x14e>
 8003af6:	fb05 2101 	mla	r1, r5, r1, r2
 8003afa:	2301      	movs	r3, #1
 8003afc:	4680      	mov	r8, r0
 8003afe:	e7f0      	b.n	8003ae2 <_vfiprintf_r+0x1b6>
 8003b00:	ab03      	add	r3, sp, #12
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	4622      	mov	r2, r4
 8003b06:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <_vfiprintf_r+0x228>)
 8003b08:	a904      	add	r1, sp, #16
 8003b0a:	4630      	mov	r0, r6
 8003b0c:	f3af 8000 	nop.w
 8003b10:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003b14:	4681      	mov	r9, r0
 8003b16:	d1d5      	bne.n	8003ac4 <_vfiprintf_r+0x198>
 8003b18:	89a3      	ldrh	r3, [r4, #12]
 8003b1a:	065b      	lsls	r3, r3, #25
 8003b1c:	f53f af7e 	bmi.w	8003a1c <_vfiprintf_r+0xf0>
 8003b20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b22:	e77d      	b.n	8003a20 <_vfiprintf_r+0xf4>
 8003b24:	ab03      	add	r3, sp, #12
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	4622      	mov	r2, r4
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <_vfiprintf_r+0x228>)
 8003b2c:	a904      	add	r1, sp, #16
 8003b2e:	4630      	mov	r0, r6
 8003b30:	f000 f888 	bl	8003c44 <_printf_i>
 8003b34:	e7ec      	b.n	8003b10 <_vfiprintf_r+0x1e4>
 8003b36:	bf00      	nop
 8003b38:	08004ecc 	.word	0x08004ecc
 8003b3c:	08004f0c 	.word	0x08004f0c
 8003b40:	08004eec 	.word	0x08004eec
 8003b44:	08004eac 	.word	0x08004eac
 8003b48:	08004f12 	.word	0x08004f12
 8003b4c:	08004f16 	.word	0x08004f16
 8003b50:	00000000 	.word	0x00000000
 8003b54:	08003907 	.word	0x08003907

08003b58 <_printf_common>:
 8003b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b5c:	4691      	mov	r9, r2
 8003b5e:	461f      	mov	r7, r3
 8003b60:	688a      	ldr	r2, [r1, #8]
 8003b62:	690b      	ldr	r3, [r1, #16]
 8003b64:	4606      	mov	r6, r0
 8003b66:	4293      	cmp	r3, r2
 8003b68:	bfb8      	it	lt
 8003b6a:	4613      	movlt	r3, r2
 8003b6c:	f8c9 3000 	str.w	r3, [r9]
 8003b70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b74:	460c      	mov	r4, r1
 8003b76:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b7a:	b112      	cbz	r2, 8003b82 <_printf_common+0x2a>
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	f8c9 3000 	str.w	r3, [r9]
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	0699      	lsls	r1, r3, #26
 8003b86:	bf42      	ittt	mi
 8003b88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b8c:	3302      	addmi	r3, #2
 8003b8e:	f8c9 3000 	strmi.w	r3, [r9]
 8003b92:	6825      	ldr	r5, [r4, #0]
 8003b94:	f015 0506 	ands.w	r5, r5, #6
 8003b98:	d107      	bne.n	8003baa <_printf_common+0x52>
 8003b9a:	f104 0a19 	add.w	sl, r4, #25
 8003b9e:	68e3      	ldr	r3, [r4, #12]
 8003ba0:	f8d9 2000 	ldr.w	r2, [r9]
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	42ab      	cmp	r3, r5
 8003ba8:	dc29      	bgt.n	8003bfe <_printf_common+0xa6>
 8003baa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003bae:	6822      	ldr	r2, [r4, #0]
 8003bb0:	3300      	adds	r3, #0
 8003bb2:	bf18      	it	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	0692      	lsls	r2, r2, #26
 8003bb8:	d42e      	bmi.n	8003c18 <_printf_common+0xc0>
 8003bba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bbe:	4639      	mov	r1, r7
 8003bc0:	4630      	mov	r0, r6
 8003bc2:	47c0      	blx	r8
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	d021      	beq.n	8003c0c <_printf_common+0xb4>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	68e5      	ldr	r5, [r4, #12]
 8003bcc:	f003 0306 	and.w	r3, r3, #6
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	bf18      	it	ne
 8003bd4:	2500      	movne	r5, #0
 8003bd6:	f8d9 2000 	ldr.w	r2, [r9]
 8003bda:	f04f 0900 	mov.w	r9, #0
 8003bde:	bf08      	it	eq
 8003be0:	1aad      	subeq	r5, r5, r2
 8003be2:	68a3      	ldr	r3, [r4, #8]
 8003be4:	6922      	ldr	r2, [r4, #16]
 8003be6:	bf08      	it	eq
 8003be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bec:	4293      	cmp	r3, r2
 8003bee:	bfc4      	itt	gt
 8003bf0:	1a9b      	subgt	r3, r3, r2
 8003bf2:	18ed      	addgt	r5, r5, r3
 8003bf4:	341a      	adds	r4, #26
 8003bf6:	454d      	cmp	r5, r9
 8003bf8:	d11a      	bne.n	8003c30 <_printf_common+0xd8>
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	e008      	b.n	8003c10 <_printf_common+0xb8>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4652      	mov	r2, sl
 8003c02:	4639      	mov	r1, r7
 8003c04:	4630      	mov	r0, r6
 8003c06:	47c0      	blx	r8
 8003c08:	3001      	adds	r0, #1
 8003c0a:	d103      	bne.n	8003c14 <_printf_common+0xbc>
 8003c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c14:	3501      	adds	r5, #1
 8003c16:	e7c2      	b.n	8003b9e <_printf_common+0x46>
 8003c18:	2030      	movs	r0, #48	; 0x30
 8003c1a:	18e1      	adds	r1, r4, r3
 8003c1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c26:	4422      	add	r2, r4
 8003c28:	3302      	adds	r3, #2
 8003c2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c2e:	e7c4      	b.n	8003bba <_printf_common+0x62>
 8003c30:	2301      	movs	r3, #1
 8003c32:	4622      	mov	r2, r4
 8003c34:	4639      	mov	r1, r7
 8003c36:	4630      	mov	r0, r6
 8003c38:	47c0      	blx	r8
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	d0e6      	beq.n	8003c0c <_printf_common+0xb4>
 8003c3e:	f109 0901 	add.w	r9, r9, #1
 8003c42:	e7d8      	b.n	8003bf6 <_printf_common+0x9e>

08003c44 <_printf_i>:
 8003c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	7e09      	ldrb	r1, [r1, #24]
 8003c50:	b085      	sub	sp, #20
 8003c52:	296e      	cmp	r1, #110	; 0x6e
 8003c54:	4617      	mov	r7, r2
 8003c56:	4606      	mov	r6, r0
 8003c58:	4698      	mov	r8, r3
 8003c5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c5c:	f000 80b3 	beq.w	8003dc6 <_printf_i+0x182>
 8003c60:	d822      	bhi.n	8003ca8 <_printf_i+0x64>
 8003c62:	2963      	cmp	r1, #99	; 0x63
 8003c64:	d036      	beq.n	8003cd4 <_printf_i+0x90>
 8003c66:	d80a      	bhi.n	8003c7e <_printf_i+0x3a>
 8003c68:	2900      	cmp	r1, #0
 8003c6a:	f000 80b9 	beq.w	8003de0 <_printf_i+0x19c>
 8003c6e:	2958      	cmp	r1, #88	; 0x58
 8003c70:	f000 8083 	beq.w	8003d7a <_printf_i+0x136>
 8003c74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c7c:	e032      	b.n	8003ce4 <_printf_i+0xa0>
 8003c7e:	2964      	cmp	r1, #100	; 0x64
 8003c80:	d001      	beq.n	8003c86 <_printf_i+0x42>
 8003c82:	2969      	cmp	r1, #105	; 0x69
 8003c84:	d1f6      	bne.n	8003c74 <_printf_i+0x30>
 8003c86:	6820      	ldr	r0, [r4, #0]
 8003c88:	6813      	ldr	r3, [r2, #0]
 8003c8a:	0605      	lsls	r5, r0, #24
 8003c8c:	f103 0104 	add.w	r1, r3, #4
 8003c90:	d52a      	bpl.n	8003ce8 <_printf_i+0xa4>
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6011      	str	r1, [r2, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	da03      	bge.n	8003ca2 <_printf_i+0x5e>
 8003c9a:	222d      	movs	r2, #45	; 0x2d
 8003c9c:	425b      	negs	r3, r3
 8003c9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ca2:	486f      	ldr	r0, [pc, #444]	; (8003e60 <_printf_i+0x21c>)
 8003ca4:	220a      	movs	r2, #10
 8003ca6:	e039      	b.n	8003d1c <_printf_i+0xd8>
 8003ca8:	2973      	cmp	r1, #115	; 0x73
 8003caa:	f000 809d 	beq.w	8003de8 <_printf_i+0x1a4>
 8003cae:	d808      	bhi.n	8003cc2 <_printf_i+0x7e>
 8003cb0:	296f      	cmp	r1, #111	; 0x6f
 8003cb2:	d020      	beq.n	8003cf6 <_printf_i+0xb2>
 8003cb4:	2970      	cmp	r1, #112	; 0x70
 8003cb6:	d1dd      	bne.n	8003c74 <_printf_i+0x30>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	f043 0320 	orr.w	r3, r3, #32
 8003cbe:	6023      	str	r3, [r4, #0]
 8003cc0:	e003      	b.n	8003cca <_printf_i+0x86>
 8003cc2:	2975      	cmp	r1, #117	; 0x75
 8003cc4:	d017      	beq.n	8003cf6 <_printf_i+0xb2>
 8003cc6:	2978      	cmp	r1, #120	; 0x78
 8003cc8:	d1d4      	bne.n	8003c74 <_printf_i+0x30>
 8003cca:	2378      	movs	r3, #120	; 0x78
 8003ccc:	4865      	ldr	r0, [pc, #404]	; (8003e64 <_printf_i+0x220>)
 8003cce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cd2:	e055      	b.n	8003d80 <_printf_i+0x13c>
 8003cd4:	6813      	ldr	r3, [r2, #0]
 8003cd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cda:	1d19      	adds	r1, r3, #4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6011      	str	r1, [r2, #0]
 8003ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e08c      	b.n	8003e02 <_printf_i+0x1be>
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cee:	6011      	str	r1, [r2, #0]
 8003cf0:	bf18      	it	ne
 8003cf2:	b21b      	sxthne	r3, r3
 8003cf4:	e7cf      	b.n	8003c96 <_printf_i+0x52>
 8003cf6:	6813      	ldr	r3, [r2, #0]
 8003cf8:	6825      	ldr	r5, [r4, #0]
 8003cfa:	1d18      	adds	r0, r3, #4
 8003cfc:	6010      	str	r0, [r2, #0]
 8003cfe:	0628      	lsls	r0, r5, #24
 8003d00:	d501      	bpl.n	8003d06 <_printf_i+0xc2>
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	e002      	b.n	8003d0c <_printf_i+0xc8>
 8003d06:	0668      	lsls	r0, r5, #25
 8003d08:	d5fb      	bpl.n	8003d02 <_printf_i+0xbe>
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	296f      	cmp	r1, #111	; 0x6f
 8003d0e:	bf14      	ite	ne
 8003d10:	220a      	movne	r2, #10
 8003d12:	2208      	moveq	r2, #8
 8003d14:	4852      	ldr	r0, [pc, #328]	; (8003e60 <_printf_i+0x21c>)
 8003d16:	2100      	movs	r1, #0
 8003d18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d1c:	6865      	ldr	r5, [r4, #4]
 8003d1e:	2d00      	cmp	r5, #0
 8003d20:	60a5      	str	r5, [r4, #8]
 8003d22:	f2c0 8095 	blt.w	8003e50 <_printf_i+0x20c>
 8003d26:	6821      	ldr	r1, [r4, #0]
 8003d28:	f021 0104 	bic.w	r1, r1, #4
 8003d2c:	6021      	str	r1, [r4, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d13d      	bne.n	8003dae <_printf_i+0x16a>
 8003d32:	2d00      	cmp	r5, #0
 8003d34:	f040 808e 	bne.w	8003e54 <_printf_i+0x210>
 8003d38:	4665      	mov	r5, ip
 8003d3a:	2a08      	cmp	r2, #8
 8003d3c:	d10b      	bne.n	8003d56 <_printf_i+0x112>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	07db      	lsls	r3, r3, #31
 8003d42:	d508      	bpl.n	8003d56 <_printf_i+0x112>
 8003d44:	6923      	ldr	r3, [r4, #16]
 8003d46:	6862      	ldr	r2, [r4, #4]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	bfde      	ittt	le
 8003d4c:	2330      	movle	r3, #48	; 0x30
 8003d4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d56:	ebac 0305 	sub.w	r3, ip, r5
 8003d5a:	6123      	str	r3, [r4, #16]
 8003d5c:	f8cd 8000 	str.w	r8, [sp]
 8003d60:	463b      	mov	r3, r7
 8003d62:	aa03      	add	r2, sp, #12
 8003d64:	4621      	mov	r1, r4
 8003d66:	4630      	mov	r0, r6
 8003d68:	f7ff fef6 	bl	8003b58 <_printf_common>
 8003d6c:	3001      	adds	r0, #1
 8003d6e:	d14d      	bne.n	8003e0c <_printf_i+0x1c8>
 8003d70:	f04f 30ff 	mov.w	r0, #4294967295
 8003d74:	b005      	add	sp, #20
 8003d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d7a:	4839      	ldr	r0, [pc, #228]	; (8003e60 <_printf_i+0x21c>)
 8003d7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d80:	6813      	ldr	r3, [r2, #0]
 8003d82:	6821      	ldr	r1, [r4, #0]
 8003d84:	1d1d      	adds	r5, r3, #4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6015      	str	r5, [r2, #0]
 8003d8a:	060a      	lsls	r2, r1, #24
 8003d8c:	d50b      	bpl.n	8003da6 <_printf_i+0x162>
 8003d8e:	07ca      	lsls	r2, r1, #31
 8003d90:	bf44      	itt	mi
 8003d92:	f041 0120 	orrmi.w	r1, r1, #32
 8003d96:	6021      	strmi	r1, [r4, #0]
 8003d98:	b91b      	cbnz	r3, 8003da2 <_printf_i+0x15e>
 8003d9a:	6822      	ldr	r2, [r4, #0]
 8003d9c:	f022 0220 	bic.w	r2, r2, #32
 8003da0:	6022      	str	r2, [r4, #0]
 8003da2:	2210      	movs	r2, #16
 8003da4:	e7b7      	b.n	8003d16 <_printf_i+0xd2>
 8003da6:	064d      	lsls	r5, r1, #25
 8003da8:	bf48      	it	mi
 8003daa:	b29b      	uxthmi	r3, r3
 8003dac:	e7ef      	b.n	8003d8e <_printf_i+0x14a>
 8003dae:	4665      	mov	r5, ip
 8003db0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003db4:	fb02 3311 	mls	r3, r2, r1, r3
 8003db8:	5cc3      	ldrb	r3, [r0, r3]
 8003dba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	2900      	cmp	r1, #0
 8003dc2:	d1f5      	bne.n	8003db0 <_printf_i+0x16c>
 8003dc4:	e7b9      	b.n	8003d3a <_printf_i+0xf6>
 8003dc6:	6813      	ldr	r3, [r2, #0]
 8003dc8:	6825      	ldr	r5, [r4, #0]
 8003dca:	1d18      	adds	r0, r3, #4
 8003dcc:	6961      	ldr	r1, [r4, #20]
 8003dce:	6010      	str	r0, [r2, #0]
 8003dd0:	0628      	lsls	r0, r5, #24
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	d501      	bpl.n	8003dda <_printf_i+0x196>
 8003dd6:	6019      	str	r1, [r3, #0]
 8003dd8:	e002      	b.n	8003de0 <_printf_i+0x19c>
 8003dda:	066a      	lsls	r2, r5, #25
 8003ddc:	d5fb      	bpl.n	8003dd6 <_printf_i+0x192>
 8003dde:	8019      	strh	r1, [r3, #0]
 8003de0:	2300      	movs	r3, #0
 8003de2:	4665      	mov	r5, ip
 8003de4:	6123      	str	r3, [r4, #16]
 8003de6:	e7b9      	b.n	8003d5c <_printf_i+0x118>
 8003de8:	6813      	ldr	r3, [r2, #0]
 8003dea:	1d19      	adds	r1, r3, #4
 8003dec:	6011      	str	r1, [r2, #0]
 8003dee:	681d      	ldr	r5, [r3, #0]
 8003df0:	6862      	ldr	r2, [r4, #4]
 8003df2:	2100      	movs	r1, #0
 8003df4:	4628      	mov	r0, r5
 8003df6:	f000 f8e1 	bl	8003fbc <memchr>
 8003dfa:	b108      	cbz	r0, 8003e00 <_printf_i+0x1bc>
 8003dfc:	1b40      	subs	r0, r0, r5
 8003dfe:	6060      	str	r0, [r4, #4]
 8003e00:	6863      	ldr	r3, [r4, #4]
 8003e02:	6123      	str	r3, [r4, #16]
 8003e04:	2300      	movs	r3, #0
 8003e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e0a:	e7a7      	b.n	8003d5c <_printf_i+0x118>
 8003e0c:	6923      	ldr	r3, [r4, #16]
 8003e0e:	462a      	mov	r2, r5
 8003e10:	4639      	mov	r1, r7
 8003e12:	4630      	mov	r0, r6
 8003e14:	47c0      	blx	r8
 8003e16:	3001      	adds	r0, #1
 8003e18:	d0aa      	beq.n	8003d70 <_printf_i+0x12c>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	079b      	lsls	r3, r3, #30
 8003e1e:	d413      	bmi.n	8003e48 <_printf_i+0x204>
 8003e20:	68e0      	ldr	r0, [r4, #12]
 8003e22:	9b03      	ldr	r3, [sp, #12]
 8003e24:	4298      	cmp	r0, r3
 8003e26:	bfb8      	it	lt
 8003e28:	4618      	movlt	r0, r3
 8003e2a:	e7a3      	b.n	8003d74 <_printf_i+0x130>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	464a      	mov	r2, r9
 8003e30:	4639      	mov	r1, r7
 8003e32:	4630      	mov	r0, r6
 8003e34:	47c0      	blx	r8
 8003e36:	3001      	adds	r0, #1
 8003e38:	d09a      	beq.n	8003d70 <_printf_i+0x12c>
 8003e3a:	3501      	adds	r5, #1
 8003e3c:	68e3      	ldr	r3, [r4, #12]
 8003e3e:	9a03      	ldr	r2, [sp, #12]
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	42ab      	cmp	r3, r5
 8003e44:	dcf2      	bgt.n	8003e2c <_printf_i+0x1e8>
 8003e46:	e7eb      	b.n	8003e20 <_printf_i+0x1dc>
 8003e48:	2500      	movs	r5, #0
 8003e4a:	f104 0919 	add.w	r9, r4, #25
 8003e4e:	e7f5      	b.n	8003e3c <_printf_i+0x1f8>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1ac      	bne.n	8003dae <_printf_i+0x16a>
 8003e54:	7803      	ldrb	r3, [r0, #0]
 8003e56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e5e:	e76c      	b.n	8003d3a <_printf_i+0xf6>
 8003e60:	08004f1d 	.word	0x08004f1d
 8003e64:	08004f2e 	.word	0x08004f2e

08003e68 <_sbrk_r>:
 8003e68:	b538      	push	{r3, r4, r5, lr}
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	4c05      	ldr	r4, [pc, #20]	; (8003e84 <_sbrk_r+0x1c>)
 8003e6e:	4605      	mov	r5, r0
 8003e70:	4608      	mov	r0, r1
 8003e72:	6023      	str	r3, [r4, #0]
 8003e74:	f7fd f85a 	bl	8000f2c <_sbrk>
 8003e78:	1c43      	adds	r3, r0, #1
 8003e7a:	d102      	bne.n	8003e82 <_sbrk_r+0x1a>
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	b103      	cbz	r3, 8003e82 <_sbrk_r+0x1a>
 8003e80:	602b      	str	r3, [r5, #0]
 8003e82:	bd38      	pop	{r3, r4, r5, pc}
 8003e84:	200005c4 	.word	0x200005c4

08003e88 <__sread>:
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e90:	f000 f8a4 	bl	8003fdc <_read_r>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	bfab      	itete	ge
 8003e98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e9a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e9c:	181b      	addge	r3, r3, r0
 8003e9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ea2:	bfac      	ite	ge
 8003ea4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ea6:	81a3      	strhlt	r3, [r4, #12]
 8003ea8:	bd10      	pop	{r4, pc}

08003eaa <__swrite>:
 8003eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eae:	461f      	mov	r7, r3
 8003eb0:	898b      	ldrh	r3, [r1, #12]
 8003eb2:	4605      	mov	r5, r0
 8003eb4:	05db      	lsls	r3, r3, #23
 8003eb6:	460c      	mov	r4, r1
 8003eb8:	4616      	mov	r6, r2
 8003eba:	d505      	bpl.n	8003ec8 <__swrite+0x1e>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec4:	f000 f868 	bl	8003f98 <_lseek_r>
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	4632      	mov	r2, r6
 8003ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ed0:	81a3      	strh	r3, [r4, #12]
 8003ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ed6:	463b      	mov	r3, r7
 8003ed8:	4628      	mov	r0, r5
 8003eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ede:	f000 b817 	b.w	8003f10 <_write_r>

08003ee2 <__sseek>:
 8003ee2:	b510      	push	{r4, lr}
 8003ee4:	460c      	mov	r4, r1
 8003ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eea:	f000 f855 	bl	8003f98 <_lseek_r>
 8003eee:	1c43      	adds	r3, r0, #1
 8003ef0:	89a3      	ldrh	r3, [r4, #12]
 8003ef2:	bf15      	itete	ne
 8003ef4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003efa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003efe:	81a3      	strheq	r3, [r4, #12]
 8003f00:	bf18      	it	ne
 8003f02:	81a3      	strhne	r3, [r4, #12]
 8003f04:	bd10      	pop	{r4, pc}

08003f06 <__sclose>:
 8003f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f0a:	f000 b813 	b.w	8003f34 <_close_r>
	...

08003f10 <_write_r>:
 8003f10:	b538      	push	{r3, r4, r5, lr}
 8003f12:	4605      	mov	r5, r0
 8003f14:	4608      	mov	r0, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	2200      	movs	r2, #0
 8003f1a:	4c05      	ldr	r4, [pc, #20]	; (8003f30 <_write_r+0x20>)
 8003f1c:	6022      	str	r2, [r4, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f7fc ffb7 	bl	8000e92 <_write>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d102      	bne.n	8003f2e <_write_r+0x1e>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	b103      	cbz	r3, 8003f2e <_write_r+0x1e>
 8003f2c:	602b      	str	r3, [r5, #0]
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	200005c4 	.word	0x200005c4

08003f34 <_close_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	2300      	movs	r3, #0
 8003f38:	4c05      	ldr	r4, [pc, #20]	; (8003f50 <_close_r+0x1c>)
 8003f3a:	4605      	mov	r5, r0
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	6023      	str	r3, [r4, #0]
 8003f40:	f7fc ffc3 	bl	8000eca <_close>
 8003f44:	1c43      	adds	r3, r0, #1
 8003f46:	d102      	bne.n	8003f4e <_close_r+0x1a>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	b103      	cbz	r3, 8003f4e <_close_r+0x1a>
 8003f4c:	602b      	str	r3, [r5, #0]
 8003f4e:	bd38      	pop	{r3, r4, r5, pc}
 8003f50:	200005c4 	.word	0x200005c4

08003f54 <_fstat_r>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	2300      	movs	r3, #0
 8003f58:	4c06      	ldr	r4, [pc, #24]	; (8003f74 <_fstat_r+0x20>)
 8003f5a:	4605      	mov	r5, r0
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	4611      	mov	r1, r2
 8003f60:	6023      	str	r3, [r4, #0]
 8003f62:	f7fc ffbd 	bl	8000ee0 <_fstat>
 8003f66:	1c43      	adds	r3, r0, #1
 8003f68:	d102      	bne.n	8003f70 <_fstat_r+0x1c>
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	b103      	cbz	r3, 8003f70 <_fstat_r+0x1c>
 8003f6e:	602b      	str	r3, [r5, #0]
 8003f70:	bd38      	pop	{r3, r4, r5, pc}
 8003f72:	bf00      	nop
 8003f74:	200005c4 	.word	0x200005c4

08003f78 <_isatty_r>:
 8003f78:	b538      	push	{r3, r4, r5, lr}
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	4c05      	ldr	r4, [pc, #20]	; (8003f94 <_isatty_r+0x1c>)
 8003f7e:	4605      	mov	r5, r0
 8003f80:	4608      	mov	r0, r1
 8003f82:	6023      	str	r3, [r4, #0]
 8003f84:	f7fc ffbb 	bl	8000efe <_isatty>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d102      	bne.n	8003f92 <_isatty_r+0x1a>
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	b103      	cbz	r3, 8003f92 <_isatty_r+0x1a>
 8003f90:	602b      	str	r3, [r5, #0]
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	200005c4 	.word	0x200005c4

08003f98 <_lseek_r>:
 8003f98:	b538      	push	{r3, r4, r5, lr}
 8003f9a:	4605      	mov	r5, r0
 8003f9c:	4608      	mov	r0, r1
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	4c05      	ldr	r4, [pc, #20]	; (8003fb8 <_lseek_r+0x20>)
 8003fa4:	6022      	str	r2, [r4, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f7fc ffb3 	bl	8000f12 <_lseek>
 8003fac:	1c43      	adds	r3, r0, #1
 8003fae:	d102      	bne.n	8003fb6 <_lseek_r+0x1e>
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	b103      	cbz	r3, 8003fb6 <_lseek_r+0x1e>
 8003fb4:	602b      	str	r3, [r5, #0]
 8003fb6:	bd38      	pop	{r3, r4, r5, pc}
 8003fb8:	200005c4 	.word	0x200005c4

08003fbc <memchr>:
 8003fbc:	b510      	push	{r4, lr}
 8003fbe:	b2c9      	uxtb	r1, r1
 8003fc0:	4402      	add	r2, r0
 8003fc2:	4290      	cmp	r0, r2
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	d101      	bne.n	8003fcc <memchr+0x10>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e003      	b.n	8003fd4 <memchr+0x18>
 8003fcc:	781c      	ldrb	r4, [r3, #0]
 8003fce:	3001      	adds	r0, #1
 8003fd0:	428c      	cmp	r4, r1
 8003fd2:	d1f6      	bne.n	8003fc2 <memchr+0x6>
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	bd10      	pop	{r4, pc}

08003fd8 <__malloc_lock>:
 8003fd8:	4770      	bx	lr

08003fda <__malloc_unlock>:
 8003fda:	4770      	bx	lr

08003fdc <_read_r>:
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	4605      	mov	r5, r0
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	4c05      	ldr	r4, [pc, #20]	; (8003ffc <_read_r+0x20>)
 8003fe8:	6022      	str	r2, [r4, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f7fc ff34 	bl	8000e58 <_read>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	d102      	bne.n	8003ffa <_read_r+0x1e>
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	b103      	cbz	r3, 8003ffa <_read_r+0x1e>
 8003ff8:	602b      	str	r3, [r5, #0]
 8003ffa:	bd38      	pop	{r3, r4, r5, pc}
 8003ffc:	200005c4 	.word	0x200005c4

08004000 <_init>:
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	bf00      	nop
 8004004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004006:	bc08      	pop	{r3}
 8004008:	469e      	mov	lr, r3
 800400a:	4770      	bx	lr

0800400c <_fini>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	bf00      	nop
 8004010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004012:	bc08      	pop	{r3}
 8004014:	469e      	mov	lr, r3
 8004016:	4770      	bx	lr
